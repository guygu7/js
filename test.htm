<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>Title</title>
		<link href="test.css" rel="stylesheet">
	</head>
	<body>
		<script src="jquery-3.2.1/jquery-3.2.1.min.js"></script>
		<script src="js/core.js"></script>
		<script src="js/BasicComponent.js"></script>
		<script src="js/Components.js"></script>
		<script src="js/Menu.js"></script>
		<script src="js/Scene.js"></script>
		<script src="js/panel.js"></script>
		<script src="js/button.js"></script>
		<script src="js/table.js"></script>
		<script src="js/corner.js"></script>
		<script src="js/progressbar.js"></script>
		<script src="js/infoDIV.js"></script>
		<script src="js/dataModel.js"></script>
		<div id="mainDesktop" class="main-desktop"></div>
		<script>
			
			//+++++data++++
			var role1 = LC.Data.RoleFactory.createRole();
			var role2 = LC.Data.RoleFactory.createRole();
			role1.setName("role1");
			role2.setName("role2");
			//+++++++++++++
			//+++++view++++
			var rolePanel = LC.Components.PanelFactory.createPanelBasic(null,"160px","80px",LC.CommonProperty.CSS_PANEL_PROTRUDING);
			rolePanel.dom.text(role1.getName());
			$("#mainDesktop").append(rolePanel.dom);
			var rolePanel12 = LC.Components.PanelFactory.createPanelBasic(null,"160px","80px",LC.CommonProperty.CSS_PANEL_PROTRUDING);
			rolePanel12.dom.text(role1.getName());
			$("#mainDesktop").append(rolePanel12.dom);
			var rolePanel2 = LC.Components.PanelFactory.createPanelBasic(null,"160px","80px",LC.CommonProperty.CSS_PANEL_PROTRUDING);
			rolePanel2.dom.text(role2.getName());
			$("#mainDesktop").append(rolePanel2.dom);
			//+++++++++++++
			
			//rolePanel监听role1
			role1.addListener(rolePanel);
			role2.addListener(rolePanel2);
			role1.addListener(rolePanel12);
			
			role1.removeListener(rolePanel);
			role1.addListener(rolePanel2);
			//设定响应
			rolePanel.addResponseMethod("setName",function(){
				rolePanel.dom.text(role1.getName());
			});
			rolePanel12.addResponseMethod("setName",function(){
				rolePanel12.dom.text(role1.getName());
			});
			//rolePanel.removeResponseMethod("setName");
			rolePanel2.addResponseMethod("setName",function(){
				rolePanel2.dom.text(role2.getName());
			});
			
			//修改数据实例，验证视图变化
			role1.setName("role1NameChange");
			$("#mainDesktop").append("<button id='but1'>改变1号名字1</button>");
			$("#mainDesktop").append("<button id='but2'>改变1号名字2</button>");
			$("#mainDesktop").append("<button id='but3'>改变2号名字1</button>");
			$("#mainDesktop").append("<button id='but4'>改变2号名字2</button>");
			$("#but1").bind("click",function(){
				role1.setName("小明");
			});
			$("#but2").bind("click",function(){
				role1.setName("小明2号");
			});
			$("#but3").bind("click",function(){
				role2.setName("小王");
			});
			$("#but4").bind("click",function(){
				role2.setName("小王2号");
			});
		</script>	
			
		<!--<script>	
			var Event = (function() {
				var global = this,
				    Event,
				    _default = 'default';
				Event = function() {
					var _listen,
					    _trigger,
					    _remove,
					    _slice = Array.prototype.slice,
					    _shift = Array.prototype.shift,
					    _unshift = Array.prototype.unshift,
					    namespaceCache = {},
					    _create,
					    find,
					    each = function(ary, fn) {
						var ret;
						for (var i = 0,
						    l = ary.length; i < l; i++) {
							var n = ary[i];
							ret = fn.call(n, i, n);
						}
						return ret;
					};
					_listen = function(key, fn, cache) {
						if (!cache[key]) {
							cache[key] = [];
						}
						cache[key].push(fn);
					};
					_remove = function(key, cache, fn) {
						if (cache[key]) {
							if (fn) {
								for (var i = cache[key].length; i >= 0; i--) {
									if (cache[key][i] === fn) {
										cache[key].splice(i, 1);
									}
								}
							} else {
								cache[key] = [];
							}
						}
					};
					_trigger = function() {
						var cache = _shift.call(arguments),
						    key = _shift.call(arguments),
						    args =
						    arguments,
						    _self = this,
						    ret,
						    stack = cache[key];
						if (!stack || !stack.length) {
							return;
						}
						return each(stack, function() {
							this.apply(_self, args);
						});
					};
					_create = function(namespace) {
						var namespace = namespace || _default;
						var cache = {},
						    offlineStack = [], //离线事件
						    ret = {
							listen : function(key, fn, last) {
								_listen(key, fn, cache);
								if (offlineStack === null) {
									return;
								}
								if (last === 'last') {
									offlineStack.length && offlineStack.pop()();
								} else {
									each(offlineStack, function() {
										this();
									});
								}
								offlineStack = null;
							},
							one : function(key, fn, last) {
								_remove(key, cache);
								this.listen(key, fn, last);
							},
							remove : function(key, fn) {
								_remove(key, cache, fn);
							},
							trigger : function() {
								var fn,
								    args,
								    _self = this;
								_unshift.call(arguments, cache);
								args = arguments;
								fn = function() {
									return _trigger.apply(_self, args);
								};
								if (offlineStack) {
									return offlineStack.push(fn);
								}
								return fn();
							}
						};
						return namespace ? (namespaceCache[namespace] ? namespaceCache[namespace] : namespaceCache[namespace] = ret) : ret;
					};
					return {
						create : _create,
						one : function(key, fn, last) {
							var event = this.create();
							event.one(key, fn, last);
						},
						remove : function(key, fn) {
							var event = this.create();
							event.remove(key, fn);
						},
						listen : function(key, fn, last) {
							var event = this.create();
							event.listen(key, fn, last);
						},
						trigger : function() {
							var event = this.create();
							event.trigger.apply(this, arguments);
						}
					};
				}();
				return Event;
			})();
			/********* 先发布后订阅 *********/
			Event.trigger('click', 1);
			Event.listen('click', function(a) {
				console.log(a);
				//1
			});
			/********* 使用命名空间 *********/
			Event.create('namespace1').listen('click', function(a) {
				console.log(a);
				//1
			});
			Event.create('namespace1').trigger('click', 1);
			Event.create('namespace3').listen('click', function(a) {
				console.log(a);
				//2
			});
			Event.create('namespace3').trigger('click', 2);
		</script>-->
	</body>
</html>