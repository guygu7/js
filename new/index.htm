<!DOCTYPE html>
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>index</title>
		<meta name="description" content="">
		<meta name="author" content="LC">
		<meta name="viewport" content="width=device-width; initial-scale=1.0">
		<link rel="shortcut icon" href="/favicon.ico">
		<link rel="apple-touch-icon" href="/apple-touch-icon.png">

		<link href="css/main.css" rel="stylesheet">
		<link href="css/menu.css" rel="stylesheet">
		<link href="css/panel.css" rel="stylesheet">
		<link href="css/steeringWheel.css" rel="stylesheet">
		<link href="css/button.css" rel="stylesheet">
		<link href="css/numberPicker.css" rel="stylesheet">
	</head>

	<body>
		<div ng-app="myApp" ng-controller="myApp" class="main-desktop">
			<!--起始场景-->
			<div ng-controller="scene-start" ng-hide="viewControl.display.sceneStartHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-start','show-animation-scene':viewControl.currentScene=='scene-start'}" class="scene">
				<div ng-click="buttonstart()" class="button" style="top:200px;left:200px;">
					<div class="button-background">
						<div class="button-background2"></div>
					</div>
					<div class="button-content">
						start
					</div>
				</div>
			</div>
			<!--xx场景-->
			<div ng-controller="scene-main" ng-hide="viewControl.display.sceneMainHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-main','show-animation-scene':viewControl.currentScene=='scene-main'}" class="scene">

				<!--交流信息面板-->
				<div ng-click="panelOnClick(viewDataModel.panelText)" class="panel" style="bottom:20px;left:10px;">
					<div>
						{{viewDataModel.panelText}}
					</div>
					<div class="panel-lamp"></div>
				</div>

				<div class="panel2" style="top:10px;left:10px;">
					<span>{{viewDataModel.panel2Text()}}</span>
				</div>
				<!--ng-mousedown="test()" ng-mouseup="test2()" ng-mouseleave="test2()"-->
				<div ng-rightclick="testright()"  class="panel3" style="top:60px;left:20px;">
					<div class="panel3-tittle">
						{{viewDataModel.panel3.tittleText}}
					</div>
				</div>

				<!--人物交互面板(按钮组)-->
				<div ng-controller="panel4" ng-hide="viewControl.display.panel4Hide" class="panel4" style="top:60px;left:330px;">
					<div ng-click="onClick($event,$index)" ng-repeat="x in viewDataModel.panel4.buttonElements()" class="button2">
						<div class="button2-background"></div>
						<div class="button2-background2"></div>
						<div class="button2-background3"></div>
						<div class="button2-content">
							{{x.getName()}}
						</div>
					</div>
				</div>

				<!--方向盘-->
				<div ng-controller="steeringWheel" ng-hide="viewControl.display.steeringWheelHide" ng-style="viewControl.steeringWheel_Style" class="steeringWheel">
					<div ng-repeat="x in arrows" ng-class="{'steeringWheel-upperArrow':{{x}}=='1','steeringWheel-rightArrow':{{x}}=='2','steeringWheel-lowerArrow':{{x}}=='3','steeringWheel-leftArrow':{{x}}=='4'}">
						<!--steeringWheel-upperArrow-->
						<div ng-click="arrowOnClick($index)" ng-class="{'steeringWheel-upperArrow-graphical':{{x}}=='1','steeringWheel-rightArrow-graphical':{{x}}=='2','steeringWheel-lowerArrow-graphical':{{x}}=='3','steeringWheel-leftArrow-graphical':{{x}}=='4'}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-1'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-2'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
					</div>
				</div>

				<!--列表菜单-遮罩层-->
				<div ng-controller="menuAutoMaskLayer" ng-hide="viewControl.display.menuAutoMaskLayerHide"  ng-style="viewControl.menuAutoMaskLayer_Style" ng-mousedown="menuAutoMaskLayerClick($event)" class="maskLayer" ></div>
				<!--列表菜单（自动大小_带箭头）-->
				<div id="menuAuto" ng-controller="menu" ng-hide="viewControl.display.menuHide" ng-style="viewControl.menu_Style" ng-class="{'hide-animation':menuHide,'show-animation':!menuHide}" class="menuAuto-background">
					<div class="menuAuto">
						<div ng-click="menulistClick($index,$event)" ng-repeat="y in viewDataModel.menu.buttonElements()" class="menuAuto-list">
							<div class="menuAuto-list-background2"></div>
							<div class="menuAuto-list-content">
								{{y.getName()}}
							</div>
							<div class="menuAuto-arrow">
								<div class="menuAuto-arrow1"></div>
								<div class="menuAuto-arrow2"></div>
								<div class="menuAuto-arrow3"></div>
								<div class="menuAuto-arrow4"></div>
								<div class="menuAuto-arrow5"></div>
							</div>
						</div>
					</div>
				</div>
				
				<!--列表菜单:包裹-->
				<div ng-controller="menuBag" ng-hide="viewControl.display.menuBagHide" ng-style="viewControl.menu_bag_Style" ng-class="{'hide-animation':menuBagHide,'show-animation':!menuBagHide}" class="menu-background">
					<div class="menu">
						{{viewDataModel.menuBag.tittleText()}}
						<div ng-click="menulistClick($event,$index)" ng-repeat="y in viewDataModel.menuBag.buttonElements()" class="menu-list">
							<div class="menu-list-background"></div>
							<div class="menu-list-background2"></div>
							<div class="menu-list-content">
								{{y.getName()}}×{{y.getTotalNum()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--仓库-遮罩层-->
				<div ng-controller="panel5MaskLayer" ng-hide="viewControl.display.panel5MaskLayerHide"  ng-style="viewControl.panel5MaskLayer_Style" ng-mousedown="panel5MaskLayerClick($event)" class="maskLayer" ></div>
				<!--仓库-->
				<div ng-controller="panel5" ng-hide="viewControl.display.panel5Hide" ng-style="viewControl.panel5_Style" ng-class="{'hide-animation':panel5Hide,'show-animation':!panel5Hide}" class="panel5">
					<div class="panel5-tittle">
						{{viewDataModel.panel5.tittleText()}}
					</div>
					<div class="menu" style="width: 485px;height: 340px;left:10px;">
						<div ng-click="onClick($event,$index)" ng-repeat="x in viewDataModel.panel5.buttonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getName().length}}<6,'button2-content-scroll':{{x.getName().length}}>5}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--数字选择器-遮罩层-->
				<div ng-controller="numberPickerMaskLayer" ng-hide="viewControl.display.numberPickerMaskLayerHide"  ng-style="viewControl.numberPickerMaskLayer_Style" ng-mousedown="numberPickerMaskLayerClick($event)" class="maskLayer" ></div>
				<!--数字选择器-->
				<div ng-controller="numberPicker" ng-hide="viewControl.display.numberPickerHide" ng-style="viewControl.numberPicker_Style" ng-class="{'hide-animation':numberPickerHide,'show-animation':!numberPickerHide}" class="numberPicker-background">
					<div class="numberPicker">
						<div class="numberPicker-tittle">{{viewDataModel.numberPicker.tittleText}}</div>
						<div ng-mousedown="numberUp()" ng-mouseup="numberUpStop()" ng-mouseleave="numberUpStop()" class="numberPicker-upperArrow">
							<div class="numberPicker-arrow1"></div>
							<div class="numberPicker-arrow2"></div>
							<div class="numberPicker-arrow3"></div>
						</div>
						<div class="numberPicker-numberBox">{{viewDataModel.numberPicker.number}}
						</div>
						<div ng-mousedown="numberDown()" ng-mouseup="numberDownStop()" ng-mouseleave="numberDownStop()" class="numberPicker-lowerArrow">
							<div class="numberPicker-arrow1"></div>
							<div class="numberPicker-arrow2"></div>
							<div class="numberPicker-arrow3"></div>
						</div>
						<div ng-click="confirm()" class="numberPicker-button">{{viewDataModel.numberPicker.confirmButton}}</div>
					</div>
				</div>
				
				<!--交易面板-->
				<div ng-controller="transactionPanel" ng-hide="viewControl.display.transactionPanelHide" ng-style="viewControl.transactionPanel_Style" ng-class="{'hide-animation':transactionPanelHide,'show-animation':!transactionPanelHide}" class="panel5">
					<div class="menu" style="width: 485px;height: 170px;left:10px;">
						<div ng-repeat="x in viewDataModel.transactionPanel.sellButtonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getName().length}}<6,'button2-content-scroll':{{x.getName().length}}>5}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
					<div style="width:485px;height: 30px;top:15px;left:10px;text-align:center;position: relative;">
						<div ng-click="confirm()">确定</div>
					</div>
					<div class="menu" style="width: 485px;height: 170px;left:10px;">
						<div ng-repeat="x in viewDataModel.transactionPanel.buyButtonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getName().length}}<6,'button2-content-scroll':{{x.getName().length}}>5}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--未实装组件-->
				<!--列表菜单
				<div ng-hide="viewControl.display.menuHide" ng-style="viewControl.menu_Style" ng-class="{'hide-animation':menuHide,'show-animation':!menuHide}" class="menu-background">
					<div ng-controller="menu" class="menu">
						{{viewDataModel.menu.tittleText}}
						<div ng-click="menulistClick($index)" ng-repeat="y in viewDataModel.menu.buttonElements" class="menu-list">
							<div class="menu-list-background"></div>
							<div class="menu-list-background2"></div>
							<div class="menu-list-content">
								{{y.getName()}}
							</div>
						</div>
					</div>
				</div>
				-->
				
			</div>
		</div>
		<script src="js/angular.js"></script>
		<script src="js/main.js"></script>
		<script src="js/data/DataModle.js"></script>
		<script src="js/viewData.js"></script>
		<script>
			//定义数据层
			/*----数据----*/
			/**
			 * 基础字典数据 
			 */
			var dictionaryData = {};
			dictionaryData.action={
				action1:{name:"堆叠",type:"split",target:""},
			};
			/**
			 * 物品字典 
			 */
			dictionaryData.item={
				item1:{name:"角色所属物体",type:"",content:"角色所属物体说明",totalNum:9,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item2:{name:"角色所属物体2",type:"",content:"角色所属物体说明",totalNum:9,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item3:{name:"角色所属物体3",type:"",content:"角色所属物体说明",totalNum:9,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item4:{name:"交流对象的物体",type:"",content:"物体1说明",totalNum:9,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item5:{name:"物体1",type:"",content:"物体1说明",totalNum:9,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item6:{name:"物体2超长物品名字",type:"",content:"物体2说明",totalNum:19,
					actions:[
						dictionaryData.action.action1,
					],
				},
				item7:{name:"物体3",type:"",content:"物体3说明",totalNum:11},
				item8:{name:"物体4",type:"",content:"物体4说明",totalNum:1},
				item9:{name:"物体5",type:"",content:"物体5说明",totalNum:9},
			};
			/**
			 * 初始数据 
			 */
			var data = {
				/**
				 * 开始引导文本
				 */
				startText:"开始引导文本。。",
				/**
				 * 角色数据 
				 */
				role:{
					name:"角色",
					items:[
						dictionaryData.item.item1,
						dictionaryData.item.item2,
						dictionaryData.item.item3,
					],
				},
				/**
				 * 场景数据 
				 */
				domains:[
					/**
					 * 开场局部区域（小场景） 
					 */
					{
						name:"引导场景",
						signId:"startDomain",
						interactiveObjects:[
							{	
								name:"引导对象",
								actions:[
									{name:"对话",type:"talk",content:"对话内容"},
									{name:"移动",type:"move",content:"移动到公共场景",target:"publicDomain"},
								],
							},
						],
					},
					/**
					 * 公共场景
					 */
					{
						name:"公共场景",
						signId:"publicDomain",
						interactiveObjects:[
							{
								name:"移动-私有据点场景",
								actions:[
									{name:"对话",type:"talk",content:"公共场景-移动对象-对话内容"},
									{name:"移动",type:"move",content:"移动-私有据点场景",target:"homeDomain"},
								],
							},
							{
								name:"交流对象",
								items:[
									dictionaryData.item.item4,
								],
								actions:[
									{name:"对话",type:"talk",content:"公共场景-交流对象-对话内容"},
									{name:"交互",type:"transaction",content:""},
								],
							},
						],
					},
					/**
					 * 私有据点场景
					 */
					{
						name:"私有据点场景",
						signId:"homeDomain",
						interactiveObjects:[
							{
								name:"移动-公共场景",
								actions:[
									{name:"对话",type:"talk",content:"私有据点-移动对象-对话内容"},
									{name:"移动",type:"move",content:"移动-公共场景",target:"publicDomain"},
								],
							},
							{
								name:"私有建筑",
								actions:[
									{name:"对话",type:"talk",content:"私有据点-私有建筑-对话内容"},
									{name:"使用",type:"useWarehouse",content:"私有据点-私有建筑-使用"},
								],
								items:[
									dictionaryData.item.item5,
									dictionaryData.item.item6,
									dictionaryData.item.item7,
									dictionaryData.item.item8,
									dictionaryData.item.item9,
								],
							},
						],
					},
				],
			};
			/**
			 * 伪完全复制对象，需传入创建的新对象
			 * 传参： beanObj 原始被复制对象,copyObj 复制对象
			 */
			function copyBean (beanObj,copyObj){
				/*仅复制基本类型属性
				for (var i in copyObj) {
					if (copyObj.hasOwnProperty(i) && typeof copyObj[i] == "function") {
						if ("set"==i.substring(0,3)){
							//遍历beanObj对象所有get方法,并将值set至copyObj
							for (var j in beanObj) {
								if (beanObj.hasOwnProperty(j) && typeof beanObj[j] == "function") {
									if("get"==j.substring(0,3) && i.substring(3)==j.substring(3)){
										//copyObj.set(beanObj.get())
										copyObj[i](beanObj[j]());
									}
								}
							}
						};
					}
				}
				*/
				//复制基本类型属性  和  包含对象的数组属性（由于依赖于工厂创建对象，仅适用于本项目）
				//遍历beanObj对象所有get方法
				for (var beanObjFn in beanObj) {
					if (beanObj.hasOwnProperty(beanObjFn) && typeof beanObj[beanObjFn] == "function") {
						if("get"==beanObjFn.substring(0,3)){
							//判断beanObj.get后是否包含其他对象，需要递归
							var tempVal = beanObj[beanObjFn](0);
							//判断，为数组，且数组内有至少一个元素
							if(null != tempVal && Object.prototype.toString.call(tempVal)=="[object Array]" && tempVal.length>0){
								for (var j=0; j < tempVal.length; j++) {
									//判断数组内元素为对象
									if(Object.prototype.toString.call(tempVal[j])=="[object Object]"){
										var tempObj;
										//获取数组元素对象构造函数名，并根据名称创建新的对象
										if("domain"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createDomain();
										} else if("interactiveObject"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createInteractiveObject();
										} else if("action"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createAction();
										} else if("item"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createItem();
										} else if("role"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createRole();
										}
										//递归，复制数组内元素对象数据，获取返回复制对象
										var returnTempObj = copyBean(tempVal[j],tempObj);
										//遍历出copyObj的对应add方法调用存入
										for (var copyObjFn in copyObj) {
											if (copyObj.hasOwnProperty(copyObjFn) && typeof copyObj[copyObjFn] == "function") {
												if ("add"==copyObjFn.substring(0,3) && beanObjFn.substring(0,beanObjFn.length-1)){
													copyObj[copyObjFn](returnTempObj);
												}
											}
										}
									}else{
										//不是对象则直接存入copy对象（暂时没有这种情况）
									};
								};
							}else if(typeof tempVal=="number" || typeof tempVal=="string" || typeof tempVal=="boolean"){
								//判断为Number String Boolean
								//直接遍历出copyObj的对应set方法调用存入
								for (var copyObjFn in copyObj) {
									if (copyObj.hasOwnProperty(copyObjFn) && typeof copyObj[copyObjFn] == "function") {
										if ("set"==copyObjFn.substring(0,3) && copyObjFn.substring(3)==beanObjFn.substring(3)){
											copyObj[copyObjFn](tempVal);
										}
									}
								}
							};
						}
					}
				}
				return copyObj;
			};
			/**
			 * 场景数据封装到对象 
			 */
			function loadDomainsData (data){
				//将data数据封装对象，暂时仅为一个domain数组 
				var data_Obj = [];
				//暂存domain数据
				var tempDomains = data.domains;
				for (var i=0; i < tempDomains.length; i++) {
					//创建domain对象
					var domain_Obj = DataModleFactory.createDomain();
					domain_Obj.setName(tempDomains[i].name).setSignId(tempDomains[i].signId);
					//暂存interactiveObject可交互对象数据
					var tempInteractiveObjects = tempDomains[i].interactiveObjects;
					if (tempInteractiveObjects) {
						for (var j=0; j < tempInteractiveObjects.length; j++) {
							//创建interactiveObject可交互对象的对象
							var interactiveObject_Obj =  DataModleFactory.createInteractiveObject();
							interactiveObject_Obj.setName(tempInteractiveObjects[j].name);
							//暂存action交互动作数据
							var tempActions = tempInteractiveObjects[j].actions;
							if(tempActions){
								for (var k=0; k < tempActions.length; k++) {
									//创建action对象
									var action_Obj =  DataModleFactory.createAction();
									action_Obj.setName(tempActions[k].name).setType(tempActions[k].type).setContent(tempActions[k].content).setTarget(tempActions[k].target);
									//action对象 存入 interactiveObject_Obj
									interactiveObject_Obj.addAction(action_Obj);
								};
							};
							//暂存item物品数据
							var tempItems = tempInteractiveObjects[j].items;
							if (tempItems) {
								for (var k=0; k < tempItems.length; k++) {
									//创建item物品对象
									var item_Obj =  DataModleFactory.createItem();
									item_Obj.setName(tempItems[k].name).setType(tempItems[k].type).setContent(tempItems[k].content).setTotalNum(tempItems[k].totalNum);
									//暂存action交互动作数据
									var tempItemActions = tempItems[k].actions;
									if(tempItemActions){
										for (var l=0; l < tempItemActions.length; l++) {
											//创建action对象
											var action_Obj =  DataModleFactory.createAction();
											action_Obj.setName(tempItemActions[l].name).setType(tempItemActions[l].type).setContent(tempItemActions[l].content).setTarget(tempItemActions[l].target);
											//action对象存入item_Obj
											item_Obj.addAction(action_Obj);
										};
									};
									//item物品对象 存入 interactiveObject_Obj
									interactiveObject_Obj.addItem(item_Obj);
								};
							};
							//interactiveObject可交互对象的对象 存入 domain_Obj
							domain_Obj.addInteractiveObject(interactiveObject_Obj);
						};
					}
					//domain对象 存入 data_Obj
					data_Obj.push(domain_Obj);
				}
				return data_Obj;
			};
			/**
			 * 角色数据封装到对象 
			 */
			function loadRolesData(data){
				//将data数据封装对象，暂时仅为一个Role数组 
				var data_Obj = [];
				//暂存role数据
				var tempRole = data.role;
				//创建role对象
				var role_Obj = DataModleFactory.createRole();
				role_Obj.setName(tempRole.name);
				//暂存item物品数据
				var tempItems = tempRole.items;
				if (tempItems) {
					for (var i=0; i < tempItems.length; i++) {
						//创建item物品对象
						var item_Obj =  DataModleFactory.createItem();
						item_Obj.setName(tempItems[i].name).setType(tempItems[i].type).setContent(tempItems[i].content).setTotalNum(tempItems[i].totalNum);
						//暂存action交互动作数据
						var tempItemActions = tempItems[i].actions;
						if(tempItemActions){
							for (var l=0; l < tempItemActions.length; l++) {
								//创建action对象
								var action_Obj =  DataModleFactory.createAction();
								action_Obj.setName(tempItemActions[l].name).setType(tempItemActions[l].type).setContent(tempItemActions[l].content).setTarget(tempItemActions[l].target);
								//action对象存入item_Obj
								item_Obj.addAction(action_Obj);
							};
						};
						//item物品对象 存入 role_Obj
						role_Obj.addItem(item_Obj);
					};
				};
				//role对象 存入 data_Obj
				data_Obj.push(role_Obj);
				return data_Obj;
			};
			
			/**
			 * 暂时仅为一个domain数组 
			 */
			var dataDomainsObj = loadDomainsData(data);
			/**
			 * 暂时仅为单个role对象
			 */
			var dataRoleObj = loadRolesData(data);
			
			/**
			 * 当前场景地图
			 */
			var currentDomain = DataModleFactory.createDomain();
			/**
			 * 当前可交互对象 
			 */
			var currentInteractiveObject = DataModleFactory.createInteractiveObject();
			/**
			 * 当前的物品
			 */
			var currentItem = DataModleFactory.createItem();
			/**
			 * 当前的交互动作
			 */
			var currentAction = DataModleFactory.createAction();
			/**
			 * 交易暂存物品集合
			 */
			var transactionItems = {
				sellItems:[],
				buyItems:[],
			};
			
			var app = angular.module("myApp", []);
			app.directive('ngRightclick', function($parse) {
			    return function(scope, element, attrs) {
			        var fn = $parse(attrs.ngRightclick);
			        element.bind('contextmenu', function(event) {
			            scope.$apply(function() {
			                event.preventDefault();
			                fn(scope, {$event:event});
			            });
			        });
			    };
			});
			var deBug$RootScope = null;
			app.controller("myApp", function($scope,$rootScope,$timeout,$interval) {
				$scope.viewDataModel = viewDataModel;
				$scope.viewControl = viewControl;
				var stop;
				$rootScope.test = function(){
					stop = $interval(function() {
						console.info("test");
					}, 70);
				};
				$rootScope.test2 = function(){
					$interval.cancel(stop);
				};
				
				$rootScope.testright = function(){
					console.info("testright");
				};
				$rootScope.testright2 = function(){
					console.info("testright2");
				};
				
				/**
				 * 交流面板的打字效果方法
				 */
				panelTyping = function(str) {
					var i = 0;
					function typing() {
						if (i <= str.length) {
							viewDataModel.panelText = str.slice(0, i++) + '_';
							$timeout(typing, 50);//递归调用
						} else {
							viewDataModel.panelText = str;//结束打字,移除 _ 光标
						}
					}
					typing();
				};
				/**
				 * 场景更新数据
				 */
				sceneMainDataLoad = function(domainData){
					//加载场景数据
					currentDomain = domainData;
				};
				//初始化
				(function () {
					//初始化数据
					sceneMainDataLoad(dataDomainsObj[0]);
				})();
			});
			
			//起始场景
			app.controller("scene-start", function($scope, $rootScope, $timeout) {
				//开始按钮
				$scope.buttonstart = function() {
					//人物交互面板(按钮组)初始数据加载
					viewDataModel.panel4.buttonElements = function (){
						return currentDomain.getInteractiveObjects();
					};
					//场景名称数据加载
					viewDataModel.panel2Text = function (){
						return currentDomain.getName();
					};
					//动态效果
					viewControl.display.sceneMainHide = false;
					$timeout(function() {
						viewControl.currentScene = "scene-main";
					}, 10);
					$timeout(function() {
						viewControl.display.sceneStartHide = true;
					}, 800);
					//动态显示开始引导文本
					$timeout(function() {
						panelTyping(data.startText);
					}, 1500);
				};
			});
			
			app.controller("scene-main", function($scope, $rootScope, $timeout) {
				$scope.panelOnClick = panelTyping;
				/**
				 * 获取层叠关系数组中最大值
				 */
				getMaxZIndex = function(num){
					var maxZIndex=num?num:0;
					for (var i in viewControl.zIndexList) {
						if(viewControl.zIndexList[i]&&maxZIndex<viewControl.zIndexList[i]){
							maxZIndex=viewControl.zIndexList[i];
						}
					};
					return maxZIndex;
				};
				/**
				 * 方向盘组件 显示命令
				 */
				steeringWheelShow = function(){
					viewControl.display.steeringWheelHide = false;
					var right = viewControl.steeringWheel_Style.right;
					viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2))-20 + "px";
					viewControl.steeringWheel_Style.opacity = 0;
					$timeout(function() {
						viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2)) + "px";
						viewControl.steeringWheel_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 方向盘组件 隐藏命令 
				 */
				steeringWheelHide = function(){
					var right = viewControl.steeringWheel_Style.right;
					viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2))-20 + "px";
					viewControl.steeringWheel_Style.opacity = 0;
					$timeout(function() {
						viewControl.display.steeringWheelHide = true;
					}, 200);
				};
				/**
				 * 列表菜单（自动大小_带箭头）显示命令（需传入点击目标）
				 */
				menuShow = function(target){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel4"] = maxZIndex+2;
					viewControl.zIndexList["menuAutoMaskLayer"] = maxZIndex+1;
					//控制显示菜单的动画效果
					//弹出遮罩层
					viewControl.display.menuAutoMaskLayerHide = false;
					//显示菜单
					viewControl.display.menuHide = false;
					//获取相对整个场景对象的top,left
					var tempa = document.getElementById("menuAuto").parentNode;
					var tempb = target;
					var totalTop = 0;
					var totalLeft = tempb.offsetWidth;
					while (tempa!=tempb){
						totalTop += tempb.offsetTop;
						totalLeft += tempb.offsetLeft;
						tempb = tempb.parentNode;
					};
					viewControl.menu_Style.top = totalTop + "px";
					viewControl.menu_Style.left = totalLeft-20 + "px";
					viewControl.menu_Style.opacity = 0;
					viewControl.menu_Style["z-index"] = viewControl.zIndexList["panel4"];
					viewControl.menuAutoMaskLayer_Style["z-index"] = viewControl.zIndexList["menuAutoMaskLayer"];
					$timeout(function() {
						viewControl.menu_Style.left = totalLeft + "px";
						viewControl.menu_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 列表菜单（自动大小_带箭头）隐藏命令（包含动画效果和view数据清理） 
				 */
				menuHide = function(){
					//控制隐藏菜单的动画效果
					var left = viewControl.menu_Style.left;
					viewControl.menu_Style.left = (Number(left.substring(0, left.length - 2)) + 20) + "px";
					viewControl.menu_Style.opacity = 0;
					$timeout(function() {
						//数据清理
						viewDataModel.menu.buttonElements = null;
						//重置层叠
						viewControl.menu_Style["z-index"] = 0;
						viewControl.menuAutoMaskLayer_Style["z-index"] = 0;
						viewControl.zIndexList["panel4"] = 0;
						viewControl.zIndexList["menuAutoMaskLayer"] = 0;
						//隐藏遮罩层
						viewControl.display.menuAutoMaskLayerHide = true;
						//隐藏菜单
						viewControl.display.menuHide = true;
					},200);
				};
				/**
				 * 仓库组件 显示命令(同时打开包裹组件)
				 */
				panel5Show = function(model){
					var panel5Left=0;
					var menuBagLeft=0;
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel5"] = maxZIndex+2;
					viewControl.zIndexList["menuBag"] = maxZIndex+2;
					viewControl.zIndexList["panel5MaskLayer"] = maxZIndex+1;
					
					viewControl.panel5_Style["z-index"] = viewControl.zIndexList["panel5"];
					viewControl.menu_bag_Style["z-index"] = viewControl.zIndexList["menuBag"];
					viewControl.panel5MaskLayer_Style["z-index"] = viewControl.zIndexList["panel5MaskLayer"];
					//判断为交易状态，增加交易面板显示
					if(model&&model=="transaction"){
						panel5Left+=170;
						menuBagLeft-=230;
						viewControl.zIndexList["transactionPanel"] = maxZIndex+1;
						viewControl.transactionPanel_Style["z-index"] = viewControl.zIndexList["transactionPanel"];
						viewControl.display.transactionPanelHide = false;
						viewControl.transactionPanel_Style.top = 20 + "px";
						viewControl.transactionPanel_Style.opacity = 0;
					}
					//弹出遮罩层
					viewControl.display.panel5MaskLayerHide = false;
					
					viewControl.display.panel5Hide = false;
					viewControl.panel5_Style.left = 650 +panel5Left+ "px";
					viewControl.panel5_Style.opacity = 0;
					//同时打开包
					viewControl.display.menuBagHide = false;
					viewControl.menu_bag_Style.left = 100 +menuBagLeft+ "px";
					viewControl.menu_bag_Style.opacity = 0;
					$timeout(function() {
						//判断为交易状态，增加交易面板显示
						if(model&&model=="transaction"){
							viewControl.transactionPanel_Style.top = 50 + "px";
							viewControl.transactionPanel_Style.opacity = 1;
						}
						viewControl.panel5_Style.left =  600 +panel5Left+ "px";
						viewControl.panel5_Style.opacity = 1;
						//包
						viewControl.menu_bag_Style.left = 200 +menuBagLeft+ "px";
						viewControl.menu_bag_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 仓库组件 隐藏命令(同时隐藏包裹组件)（包含动画效果和view数据清理） 
				 */
				panel5Hide = function(){
					//实现隐藏菜单（包裹）的动画效果
					var left = viewControl.menu_bag_Style.left;
					viewControl.menu_bag_Style.left = (Number(left.substring(0, left.length - 2)) - 50) + "px";
					viewControl.menu_bag_Style.opacity = 0;
					//实现隐藏仓库组件的动画效果
					left = viewControl.panel5_Style.left;
					viewControl.panel5_Style.left = (Number(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel5_Style.opacity = 0;
					//无论是否为交易状态，一并增加隐藏交易面板动画效果，重置角色状态
					viewControl.transactionPanel_Style.opacity = 0;
					dataRoleObj[0].setStatus("");
					
					$timeout(function() {
						//仓库组件 数据清理
						viewDataModel.panel5.buttonElements = null;
						viewDataModel.panel5.tittleText = null;
						//包裹数据清理(暂不需要)
						//重置层叠
						viewControl.zIndexList["panel5"] = 0;
						viewControl.zIndexList["menuBag"] = 0;
						viewControl.zIndexList["panel5MaskLayer"] = 0;
						viewControl.panel5_Style["z-index"] = 0;
						viewControl.menu_bag_Style["z-index"] = 0;
						viewControl.panel5MaskLayer_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.panel5MaskLayerHide = true;
						viewControl.display.panel5Hide = true;
						viewControl.display.menuBagHide = true;
						//无论是否为交易状态，一并进行交易面板的处理
						viewControl.zIndexList["transactionPanel"] = 0;
						viewControl.transactionPanel_Style["z-index"] = 0;
						viewControl.display.transactionPanelHide = true;
						//无论是否为交易状态，一并进行交易面板的数据处理
						//待售出退回到角色包
						var roleItems = dataRoleObj[0].getItems();
						var flag = false;
						for (var j=0; j < transactionItems.sellItems.length;j) {
							var sellItem = transactionItems.sellItems[j];
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==sellItem.getName()&&roleItems[i].getType()==sellItem.getType()&&roleItems[i].getContent()==sellItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+sellItem.getTotalNum());
									flag = true;
								}
							};
							if(!flag){
								//遍历完成，未发现同一物品，复制出一个物品对象
								var item_Obj = DataModleFactory.createItem();
								copyBean(sellItem,item_Obj);
								//存入角色包
								dataRoleObj[0].addItem(item_Obj);
							}
							//从交易面板数据中移除
							transactionItems.sellItems.shift();
							flag = false;
						}
						//待购入退回至交互对象
						var interactiveObjectItems = currentInteractiveObject.getItems();
						var flag = false;
						for (var j=0; j < transactionItems.buyItems.length;j) {
							var buyItem = transactionItems.buyItems[j];
							for (var i=0; i < interactiveObjectItems.length; i++) {
								if(interactiveObjectItems[i].getName()==buyItem.getName()&&interactiveObjectItems[i].getType()==buyItem.getType()&&interactiveObjectItems[i].getContent()==buyItem.getContent()){
									//遍历后发现同一物品,叠加数量
									interactiveObjectItems[i].setTotalNum(interactiveObjectItems[i].getTotalNum()+buyItem.getTotalNum());
									flag = true;
								}
							};
							if(!flag){
								//遍历完成，未发现同一物品，复制出一个物品对象
								var item_Obj = DataModleFactory.createItem();
								copyBean(buyItem,item_Obj);
								//存入交互对象
								currentInteractiveObject.addItem(item_Obj);
							}
							//从交易面板数据中移除
							transactionItems.buyItems.shift();
							flag = false;
						}
						//交易流程完成，清空当前交互对象
						currentInteractiveObject = null;
					}, 200);
				};
				
				/**
				 * 数字选择器  显示命令（需传入top left）
				 */
				numberPickerShow = function(top,left){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["numberPicker"] = maxZIndex+2;
					viewControl.zIndexList["numberPickerMaskLayer"] = maxZIndex+1;
					
					viewControl.numberPicker_Style["z-index"] = viewControl.zIndexList["numberPicker"];
					viewControl.numberPickerMaskLayer_Style["z-index"] = viewControl.zIndexList["numberPickerMaskLayer"];
					//弹出遮罩层
					viewControl.display.numberPickerMaskLayerHide = false;
					
					viewControl.display.numberPickerHide = false;
					viewControl.numberPicker_Style.top = top + "px";
					viewControl.numberPicker_Style.left = left + "px";
					viewControl.numberPicker_Style.opacity = 0;
					$timeout(function() {
						viewControl.numberPicker_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 数字选择器 隐藏命令（包含动画效果和view数据清理） 
				 */
				numberPickerHide = function(){
					viewControl.numberPicker_Style.opacity = 0;
					$timeout(function() {
						//重置计数
						viewDataModel.numberPicker.number = 1;
						//重置层叠
						viewControl.zIndexList["numberPicker"] = 0;
						viewControl.zIndexList["numberPickerMaskLayer"] = 0;
						viewControl.numberPicker_Style["z-index"] = 0;
						viewControl.numberPickerMaskLayer_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.numberPickerMaskLayerHide = true;
						viewControl.display.numberPickerHide = true;
					}, 100);
				};
				
			});

			//人物交互面板
			app.controller("panel4", function($scope, $rootScope, $timeout) {
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//处理传入对象，判断 class= button2
					var tempt = $event.target.parentNode;
					while("button2 ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为交互对象
					viewControl.currentInteractiveType = "interactiveObject";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互对象
					currentInteractiveObject = currentDomain.getInteractiveObject(index);
					//加载交互对象动作数据
					viewDataModel.menu.buttonElements = function () {
						return currentInteractiveObject.getActions();
					};
					//viewDataModel.menu.tittleText = currentInteractiveObject.getName();
				};
			});
			
			//交互动作菜单
			app.controller("menu", function($scope, $rootScope,$timeout) {
				//点击某个交互动作
				$scope.menulistClick = function(index,$event){
					//获取交互动作
					if ("interactiveObject"==viewControl.currentInteractiveType){
						currentAction = currentInteractiveObject.getAction(index);
					}else if("item"==viewControl.currentInteractiveType){
						currentAction = currentItem.getAction(index);
					}else{
						return;
					}
					if(currentAction.getType()=="talk"){
						//判断为对话
						panelTyping(currentAction.getContent());
						//对话动作完成，清空当前交互动作
						currentAction = null;
						//对话动作完成，清空当前交互对象
						//currentInteractiveObject = null;清空会报错
					}else if(currentAction.getType()=="move"){
						//判断为移动，场景切换
						//currentDomain.clear();
						for (var i=0; i < dataDomainsObj.length; i++) {
							if (currentAction.getTarget()==dataDomainsObj[i].getSignId()) {
								sceneMainDataLoad(dataDomainsObj[i]);
								panelTyping(currentAction.getContent());
								break;
							};
						};
						//移动动作完成，清空当前交互动作
						currentAction = null;
						//移动动作完成，清空当前交互对象
						//currentInteractiveObject = null;清空会报错
					}else if(currentAction.getType()=="useWarehouse"){
						//判断为（与仓库）交易
						//加载仓库数据
						viewDataModel.panel5.buttonElements = function () {
							return currentInteractiveObject.getItems();
						};
						viewDataModel.panel5.tittleText =  function () {
							return currentInteractiveObject.getName();
						};
						//加载包裹数据,重新定位视图数据指针
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getItems();
						};
						panel5Show();
						//使用建筑功能（仓库）动作完成，清空当前交互动作
						currentAction = null;
						//使用流程继续，保留当前交互对象
						currentInteractiveObject;
					}else if(currentAction.getType()=="split"){
						//判断为交易,重新定位视图数据指针
						viewDataModel.numberPicker.number = currentItem.getTotalNum();
						//打开数字选择器
						numberPickerShow(document.getElementById("menuAuto").offsetTop,document.getElementById("menuAuto").offsetLeft);
						//动作继续，不清空当前交互动作
						currentAction;
						//交易流程继续，保留当前交互对象
						currentInteractiveObject;
					}else if(currentAction.getType()=="transaction"){
						//判断为打开交易动作
						//加载当前交互对象的物品数据
						viewDataModel.panel5.buttonElements = function () {
							return currentInteractiveObject.getItems();
						};
						viewDataModel.panel5.tittleText =  function () {
							return currentInteractiveObject.getName();
						};
						//加载包裹数据,重新定位视图数据指针
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getItems();
						};
						//加载交易面板数据，初始为空
						//viewDataModel.transactionPanel.sellButtonElements = function(){return {};},
						//viewDataModel.transactionPanel.buyButtonElements = function(){return {};},
						panel5Show("transaction");
						//标记角色状态为交易状态
						dataRoleObj[0].setStatus("transaction");
						//打开交易动作完成，清空当前交互动作
						currentAction = null;
						//交易流程继续，保留当前交互对象
						currentInteractiveObject;
					}
					//隐藏菜单
					menuHide();
				};
			});

			//列表菜单:包裹 组件
			app.controller("menuBag", function($scope, $rootScope,$timeout) {
				$scope.menulistClick = function($event,index) {
					//处理传入对象
					var tempt = $event.target.parentNode;
					while("menu-list ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					currentItem = dataRoleObj[0].getItem(index);
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						return currentItem.getActions();
					};
				};
			});
			
			//仓库组件
			app.controller("panel5", function($scope, $rootScope,$timeout) {
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//处理传入对象，判断 class= button2
					var tempt = $event.target.parentNode;
					while("button2 ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					currentItem = currentInteractiveObject.getItem(index);
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						return currentItem.getActions();
					};
					//viewDataModel.menu.tittleText = currentItem.getName();
				};
			});
			
			//交易面板组件
			app.controller("transactionPanel", function($scope, $rootScope,$timeout) {
				//点击确认
				$scope.confirm = function() {
					//校验是否可执行（未完成）
					
					//待售出存入交互对象
					var interactiveObjectItems = currentInteractiveObject.getItems();
					var flag = false;
					for (var j=0; j < transactionItems.sellItems.length;j) {
						var sellItem = transactionItems.sellItems[j];
						for (var i=0; i < interactiveObjectItems.length; i++) {
							if(interactiveObjectItems[i].getName()==sellItem.getName()&&interactiveObjectItems[i].getType()==sellItem.getType()&&interactiveObjectItems[i].getContent()==sellItem.getContent()){
								//遍历后发现同一物品,叠加数量
								interactiveObjectItems[i].setTotalNum(interactiveObjectItems[i].getTotalNum()+sellItem.getTotalNum());
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(sellItem,item_Obj);
							//存入交互对象
							currentInteractiveObject.addItem(item_Obj);
						}
						//从交易面板数据中移除
						transactionItems.sellItems.shift();
						flag = false;
					}
					//待购入存入角色包 roleItems  dataRoleObj[0].getItems()
					var roleItems = dataRoleObj[0].getItems();
					var flag = false;
					for (var j=0; j < transactionItems.buyItems.length;j) {
						var buyItem = transactionItems.buyItems[j];
						for (var i=0; i < roleItems.length; i++) {
							if(roleItems[i].getName()==buyItem.getName()&&roleItems[i].getType()==buyItem.getType()&&roleItems[i].getContent()==buyItem.getContent()){
								//遍历后发现同一物品,叠加数量
								roleItems[i].setTotalNum(roleItems[i].getTotalNum()+buyItem.getTotalNum());
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(buyItem,item_Obj);
							//存入交互对象
							dataRoleObj[0].addItem(item_Obj);
						}
						//从交易面板数据中移除
						transactionItems.buyItems.shift();
						flag = false;
					}
					panel5Hide();
					//交易流程完成，清空当前交互对象
					currentInteractiveObject = null;
				};
			});
			
			//数字选择器
			app.controller("numberPicker", function($scope, $rootScope,$timeout,$interval) {
				//按住数字增加
				$scope.numberUp = function() {
					numberUp_Interval = $interval(function() {
						if(viewDataModel.numberPicker.number<currentItem.getTotalNum()&&viewDataModel.numberPicker.number<99){
							viewDataModel.numberPicker.number++;
						}else{
							viewDataModel.numberPicker.number = 1;
						}
					}, 70);
				};
				//停止数字增加
				$scope.numberUpStop = function() {
					$interval.cancel(numberUp_Interval);
				};
				//按住数字减少
				$scope.numberDown = function() {
					numberDown_Interval = $interval(function() {
						if(viewDataModel.numberPicker.number>1){
							viewDataModel.numberPicker.number--;
						}else{
							viewDataModel.numberPicker.number = currentItem.getTotalNum();
						}
					}, 70);
				};
				//停止数字增加
				$scope.numberDownStop = function() {
					$interval.cancel(numberDown_Interval);
				};
				//点击确认
				$scope.confirm = function() {
					//校验
					if(viewDataModel.numberPicker.number>currentItem.getTotalNum()){
						viewDataModel.numberPicker.number=currentItem.getTotalNum();
					}
					//从当前交互动作，判断是移动至角色包裹
					if("split"==currentAction.getType() && "toRoleBag"==currentAction.getTarget()){
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							currentInteractiveObject.delItem(currentItem);
						}
						var roleItems;
						//判断是角色否交易状态
						if(dataRoleObj[0].getStatus()=="transaction"){
							//交易状态，读取交易暂存物品数组
							roleItems = transactionItems.buyItems;
						}else{//非交易状态，读取角色包物品数组
							roleItems = dataRoleObj[0].getItems();
						}
						var flag = false;
						for (var i=0; i < roleItems.length; i++) {
							if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
								//遍历后发现同一物品,叠加数量
								roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							//item_Obj.setName(currentItem.getName()).setType(currentItem.getType()).setContent(currentItem.getContent()).setTotalNum(Number(viewDataModel.numberPicker.number));
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							//暂存action交互动作数据
							var tempItemActions = currentItem.getActions;
							if(tempItemActions){
								for (var l=0; l < tempItemActions.length; l++) {
									//action对象存入item_Obj
									item_Obj.addAction(tempItemActions.getAction(i));
								};
							};
							//判断是角色否交易状态
							if(dataRoleObj[0].getStatus()=="transaction"){
								//交易状态，将物品数据暂存至。。
								roleItems.push(item_Obj);
							}else{//非交易状态，物品数据存至角色包
								dataRoleObj[0].addItem(item_Obj);
							}
						}
						//隐藏
						numberPickerHide();
					} else if("split"==currentAction.getType() && "toInteractiveObject"==currentAction.getTarget()){
						//判断是从角色包裹移动至当前交互对象
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							dataRoleObj[0].delItem(currentItem);
						}
						var roleItems;
						//判断是角色否交易状态
						if(dataRoleObj[0].getStatus()=="transaction"){
							//交易状态，读取交易暂存物品数组
							roleItems = transactionItems.sellItems;
						}else{//非交易状态，读取当前交互对象的物品数组
							roleItems = currentInteractiveObject.getItems();
						}
						var flag = false;
						for (var i=0; i < roleItems.length; i++) {
							if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
								//遍历后发现同一物品,叠加数量
								roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							//暂存action交互动作数据
							var tempItemActions = currentItem.getActions;
							if(tempItemActions){
								for (var l=0; l < tempItemActions.length; l++) {
									//action对象存入item_Obj
									item_Obj.addAction(tempItemActions.getAction(i));
								};
							};
							//判断是角色否交易状态
							if(dataRoleObj[0].getStatus()=="transaction"){
								//交易状态，将物品数据暂存至。。
								roleItems.push(item_Obj);
							}else{//非交易状态，物品数据存至交互对象
								currentInteractiveObject.addItem(item_Obj);
							}
						}
						//隐藏
						numberPickerHide();
					};
					
				};
			});
			
			//列表菜单（自动大小_带箭头）专用遮罩层
			app.controller("menuAutoMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$scope.menuAutoMaskLayerClick = function($event) {
					menuHide();
				};
			});
			//仓库专用遮罩层
			app.controller("panel5MaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$scope.panel5MaskLayerClick = function($event) {
					panel5Hide();
				};
			});
			//数字选择器专用遮罩层
			app.controller("numberPickerMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$scope.numberPickerMaskLayerClick = function($event) {
					numberPickerHide();
				};
			});
			
			
		</script>
		<script src="js/animation/steeringWheel.js"></script>

	</body>
</html>

