<!DOCTYPE html>
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>index</title>
		<meta name="description" content="">
		<meta name="author" content="LC">
		<meta name="viewport" content="width=device-width; initial-scale=1.0">
		<link rel="shortcut icon" href="/favicon.ico">
		<link rel="apple-touch-icon" href="/apple-touch-icon.png">

		<link href="css/main.css" rel="stylesheet">
		<link href="css/menu.css" rel="stylesheet">
		<link href="css/panel.css" rel="stylesheet">
		<link href="css/steeringWheel.css" rel="stylesheet">
		<link href="css/button.css" rel="stylesheet">
	</head>

	<body>
		<div ng-app="myApp" ng-controller="myApp" class="main-desktop">
			<!--起始场景-->
			<div ng-controller="scene-start" ng-hide="viewControl.display.sceneStartHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-start','show-animation-scene':viewControl.currentScene=='scene-start'}" class="scene">
				<div ng-click="buttonstart()" class="button" style="top:200px;left:200px;">
					<div class="button-background">
						<div class="button-background2"></div>
					</div>
					<div class="button-content">
						start
					</div>
				</div>
			</div>
			<!--xx场景-->
			<div ng-controller="scene-main" ng-hide="viewControl.display.sceneMainHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-main','show-animation-scene':viewControl.currentScene=='scene-main'}" class="scene">

				<!--交流信息面板-->
				<div ng-click="panelOnClick(viewDataModel.panelText)" class="panel" style="bottom:20px;left:10px;">
					<div>
						{{viewDataModel.panelText}}
					</div>
					<div class="panel-lamp"></div>
				</div>

				<div class="panel2" style="top:10px;left:10px;">
					<span>{{viewDataModel.panel2Text}}</span>
				</div>
				<div class="panel3" style="top:60px;left:20px;">
					<div class="panel3-tittle">
						{{viewDataModel.panel3.tittleText}}
					</div>
				</div>

				<!--人物交互面板(按钮组)-->
				<div ng-controller="panel4" ng-hide="panel4Hide" class="panel4" style="top:60px;left:330px;">
					<div ng-click="onClick($event,$index)" ng-repeat="x in viewDataModel.panel4.buttonElements" class="button2">
						<div class="button2-background"></div>
						<div class="button2-background2"></div>
						<div class="button2-background3"></div>
						<div class="button2-content">
							{{x.getName()}}
						</div>
					</div>
				</div>

				<!--方向盘-->
				<div ng-controller="steeringWheel" class="steeringWheel" style="bottom:55px;right:80px;">
					<div ng-repeat="x in arrows" ng-class="{'steeringWheel-upperArrow':{{x}}=='1','steeringWheel-rightArrow':{{x}}=='2','steeringWheel-lowerArrow':{{x}}=='3','steeringWheel-leftArrow':{{x}}=='4'}">
						<!--steeringWheel-upperArrow-->
						<div ng-click="arrowOnClick($index)" ng-class="{'steeringWheel-upperArrow-graphical':{{x}}=='1','steeringWheel-rightArrow-graphical':{{x}}=='2','steeringWheel-lowerArrow-graphical':{{x}}=='3','steeringWheel-leftArrow-graphical':{{x}}=='4'}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-1'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-2'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
					</div>
				</div>

				<!--遮罩层-->
				<div ng-controller="maskLayer" ng-hide="viewControl.display.maskLayerHide"  ng-style="viewControl.maskLayer_Style" ng-click="maskLayerClick($event)" class="maskLayer" ></div>
				<!--列表菜单（自动大小_带箭头）-->
				<div ng-hide="viewControl.display.menuHide" ng-style="viewControl.panel4_menu_Style" ng-class="{'hide-animation':menuHide,'show-animation':!menuHide}" class="menuAuto-background">
					<div ng-controller="menu" class="menuAuto">
						<div ng-click="menulistClick($index)" ng-repeat="y in viewDataModel.menu.buttonElements" class="menuAuto-list">
							<div class="menuAuto-list-background2"></div>
							<div class="menuAuto-list-content">
								{{y.getName()}}
							</div>
							<div class="menuAuto-arrow">
								<div class="menuAuto-arrow1"></div>
								<div class="menuAuto-arrow2"></div>
								<div class="menuAuto-arrow3"></div>
								<div class="menuAuto-arrow4"></div>
								<div class="menuAuto-arrow5"></div>
							</div>
						</div>
					</div>
				</div>
				
				<!--列表菜单:包裹-->
				<div ng-hide="viewControl.display.menuBagHide" ng-style="viewControl.panel4_menu_bag_Style" ng-class="{'hide-animation':menuBagHide,'show-animation':!menuBagHide}" class="menu-background">
					<div  class="menu">
						{{viewDataModel.menu.tittleText}}
						<div ng-click="menulistClick()" ng-repeat="y in viewDataModel.menuBag.buttonElements" class="menu-list">
							<div class="menu-list-background"></div>
							<div class="menu-list-background2"></div>
							<div class="menu-list-content">
								{{y.getName()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--仓库-->
				<div ng-controller="panel5" ng-hide="viewControl.display.panel5Hide" ng-style="viewControl.panel5_Style" ng-class="{'hide-animation':panel5Hide,'show-animation':!panel5Hide}" class="panel5">
					<div class="panel5-tittle">
						{{viewDataModel.panel5.tittleText}}
					</div>
					<div class="menu" style="width: 500px;height: 340px;left:10px;">
						<div ng-click="onClick($event,$index)" ng-repeat="x in viewDataModel.panel5.buttonElements" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getName().length}}<6,'button2-content-scroll':{{x.getName().length}}>5}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
				</div>
				<!--未实装组件-->
				<!--遮罩层
				<div ng-controller="maskLayer" ng-hide="viewControl.display.maskLayerHide" ng-click="maskLayerClick($event)" class="maskLayer" ></div>
				--><!--列表菜单（自动大小_带箭头）
				<div ng-hide="false" class="menuAuto-background">
					<div class="menuAuto">
						<div ng-click="menulistClick($index)" class="menuAuto-list">
							<div class="menuAuto-list-background2"></div>
							<div class="menuAuto-list-content">
								中文
							</div>
							<div class="menuAuto-arrow">
								<div class="menuAuto-arrow1"></div>
								<div class="menuAuto-arrow2"></div>
								<div class="menuAuto-arrow3"></div>
								<div class="menuAuto-arrow4"></div>
								<div class="menuAuto-arrow5"></div>
							</div>
						</div>
					</div>
				</div>
				-->
				<!--列表菜单
				<div ng-hide="viewControl.display.menuHide" ng-style="viewControl.panel4_menu_Style" ng-class="{'hide-animation':menuHide,'show-animation':!menuHide}" class="menu-background">
					<div ng-controller="menu" class="menu">
						{{viewDataModel.menu.tittleText}}
						<div ng-click="menulistClick($index)" ng-repeat="y in viewDataModel.menu.buttonElements" class="menu-list">
							<div class="menu-list-background"></div>
							<div class="menu-list-background2"></div>
							<div class="menu-list-content">
								{{y.getName()}}
							</div>
						</div>
					</div>
				</div>
				-->
				
			</div>
		</div>
		<script src="js/angular.js"></script>
		<script src="js/main.js"></script>
		<script src="js/data/DataModle.js"></script>
		<script src="js/viewData.js"></script>
		<script>
			//定义数据层
			/*----数据----*/
			var data = {
				/**
				 * 开始引导文本
				 */
				startText:"开始引导文本。。",
				domains:[
					/**
					 * 开场局部区域（小场景） 
					 */
					{
						name:"引导场景",
						signId:"startDomain",
						interactiveObjects:[
							{	
								name:"引导对象",
								actions:[
									{name:"对话",type:"talk",content:"对话内容"},
									{name:"移动",type:"move",content:"移动到公共场景",target:"publicDomain"},
								],
							},
						],
					},
					/**
					 * 公共场景
					 */
					{
						name:"公共场景",
						signId:"publicDomain",
						interactiveObjects:[
							{
								name:"移动对象",
								actions:[
									{name:"对话",type:"talk",content:"公共场景-移动对象-对话内容"},
									{name:"移动到私有据点场景",type:"move",content:"移动-私有据点场景",target:"homeDomain"},
								],
							},
							{
								name:"交流对象",
								actions:[
									{name:"对话",type:"talk",content:"公共场景-交流对象-对话内容"},
									{name:"其他",type:"",content:""},
								],
							},
						],
					},
					/**
					 * 私有据点场景
					 */
					{
						name:"私有据点场景",
						signId:"homeDomain",
						interactiveObjects:[
							{
								name:"移动对象",
								actions:[
									{name:"对话",type:"talk",content:"私有据点-移动对象-对话内容"},
									{name:"移动到公共场景",type:"move",content:"移动-公共场景",target:"publicDomain"},
								],
							},
							{
								name:"私有建筑",
								actions:[
									{name:"对话",type:"talk",content:"私有据点-私有建筑-对话内容"},
									{name:"使用",type:"use",content:"私有据点-私有建筑-使用"},
								],
								items:[
									{name:"物体1",type:"",content:"物体1说明",totalNum:9,
										actions:[
											{name:"对话"}
										],
									},
									{name:"物体2超长物品名字",type:"",content:"物体2说明",totalNum:19},
									{name:"物体3",type:"",content:"物体3说明",totalNum:11},
									{name:"物体4",type:"",content:"物体4说明",totalNum:1},
									{name:"物体5",type:"",content:"物体5说明",totalNum:9},
								],
							},
						],
					},
				],
			};
			
			//当前场景地图
			var currentDomain = DataModleFactory.createDomain();
			/**
			 * 当前可交互对象 
			 */
			var currentInteractiveObject = DataModleFactory.createInteractiveObject();
			/**
			 * 当前的物品
			 */
			var currentItem = DataModleFactory.createItem();

			var app = angular.module("myApp", []);
			app.controller("myApp", function($scope,$rootScope,$timeout) {
				$scope.viewDataModel = viewDataModel;
				$scope.viewControl = viewControl;
				/**
				 * 交流面板的打字效果方法
				 */
				panelTyping = function(str) {
					var i = 0;
					function typing() {
						if (i <= str.length) {
							viewDataModel.panelText = str.slice(0, i++) + '_';
							$timeout(typing, 50);//递归调用
						} else {
							viewDataModel.panelText = str;//结束打字,移除 _ 光标
						}
					}
					typing();
				};
				/**
				 * 场景更新数据
				 */
				sceneMainDataLoad = function(domainData){
					//加载场景数据
					currentDomain.setName(domainData.name);
					currentDomain.setSignId(domainData.signId);
					for (var i=0; i < domainData.interactiveObjects.length; i++) {
						//加载可交互对象数据
						var loadInteractiveObject = DataModleFactory.createInteractiveObject();
						loadInteractiveObject.setName(domainData.interactiveObjects[i].name);
						currentDomain.addButtonElement(loadInteractiveObject);
						//加载交互动作数据
						var loadActions = domainData.interactiveObjects[i].actions;
						if (loadActions) {
							for (var j=0; j < loadActions.length; j++) {
								var tempAction = DataModleFactory.createAction();
								tempAction.setName(loadActions[j].name).setType(loadActions[j].type).setContent(loadActions[j].content).setTarget(loadActions[j].target);;
								loadInteractiveObject.addAction(tempAction);
							};
						};
						//加载交互对象所有物品数据
						var loadItems = domainData.interactiveObjects[i].items;
						if (loadItems) {
							for (var j=0; j < loadItems.length; j++) {
								var tempItem = DataModleFactory.createItem();
								tempItem.setName(loadItems[j].name).setType(loadItems[j].type).setContent(loadItems[j].content).setTotalNum(loadItems[j].totalNum);
								loadInteractiveObject.addItem(tempItem);
								//加载物品的交互动作数据
								var loadItemActions = loadItems[j].actions;
								console.info(loadItemActions);
								if (loadItemActions) {
									for (var k=0; k < loadItemActions.length; k++) {
										var tempAction2 = DataModleFactory.createAction();
										tempAction2.setName(loadItemActions[k].name).setType(loadItemActions[k].type).setContent(loadItemActions[k].content).setTarget(loadItemActions[k].target);;
										tempItem.addAction(tempAction2);
									};
								};
							}
						};
					};
				};
				//初始化
				(function () {
					//修改该对象方法，使场景视图数据可以关联
					var tempfn = currentDomain.setName;
					currentDomain.setName=function(pram){
						viewDataModel.panel2Text = pram;
						return tempfn(pram);
					};
					//初始化数据
					sceneMainDataLoad(data.domains[0]);
				})();
			});
			
			//起始场景
			app.controller("scene-start", function($scope, $rootScope, $timeout) {
				//开始按钮
				$scope.buttonstart = function() {
					//人物交互面板(按钮组)初始数据加载
					viewDataModel.panel4.buttonElements = currentDomain.getButtonElements();
					//动态效果
					viewControl.display.sceneMainHide = false;
					$timeout(function() {
						viewControl.currentScene = "scene-main";
					}, 10);
					$timeout(function() {
						viewControl.display.sceneStartHide = true;
					}, 800);
					//动态显示开始引导文本
					$timeout(function() {
						panelTyping(data.startText);
					}, 1500);
				};
			});
			
			app.controller("scene-main", function($scope, $rootScope, $timeout) {
				$scope.panelOnClick = panelTyping;
			});

			//人物交互面板
			app.controller("panel4", function($scope, $rootScope, $timeout) {
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//标记当前交互对象
					currentInteractiveObject = currentDomain.getButtonElement(index);
					//加载交互对象动作数据
					viewDataModel.menu.buttonElements = currentInteractiveObject.getActions();
					//viewDataModel.menu.tittleText = currentInteractiveObject.getName();
					//检测层叠关系数组中最大值，并+1存入
					var maxZIndex=100;
					for (var i in viewControl.zIndexList) {
						console.info(viewControl.zIndexList[i]);
						if(viewControl.zIndexList[i]&&maxZIndex<viewControl.zIndexList[i]){
							maxZIndex=viewControl.zIndexList[i];
						}
					};
					viewControl.zIndexList["panel4"]=maxZIndex+1;
					
					//控制显示菜单的动画效果
					//弹出遮罩层
					viewControl.display.maskLayerHide = false;
					//显示菜单
					viewControl.display.menuHide = false;
					var t = $event.target;
					viewControl.panel4_menu_Style.top = t.offsetTop + t.parentNode.offsetTop + 50 + "px";
					viewControl.panel4_menu_Style.left = t.offsetLeft + t.parentNode.offsetLeft + t.offsetWidth + 280 + "px";
					viewControl.panel4_menu_Style.opacity = 0;
					viewControl.panel4_menu_Style["z-index"] = viewControl.zIndexList["panel4"];
					$timeout(function() {
						viewControl.panel4_menu_Style.left = t.offsetLeft + t.parentNode.offsetLeft + t.offsetWidth + 340 + "px";
						viewControl.panel4_menu_Style.opacity = 1;
					}, 10);
				};
			});
			
			//交互动作菜单
			app.controller("menu", function($scope, $rootScope,$timeout) {
				//隐藏命令（包含动画效果和view数据清理）
				$rootScope.menuHide = function(){
					var left = viewControl.panel4_menu_Style.left;
					viewControl.panel4_menu_Style.left = (parseInt(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel4_menu_Style.opacity = 0;
					$timeout(function() {
						viewDataModel.menu.buttonElements = null;
					},400);
				};
				//点击某个交互动作
				$scope.menulistClick = function(index){
					//获取交互动作
					var nowAction = currentInteractiveObject.getAction(index);
					if(nowAction.getType()=="talk"){
						//判断为对话
						panelTyping(nowAction.getContent());
					}else if(nowAction.getType()=="move"){
						//判断为移动，场景切换
						currentDomain.clear();
						for (var i=0; i < data.domains.length; i++) {
							if (nowAction.getTarget()==data.domains[i].signId) {
								sceneMainDataLoad(data.domains[i]);
								panelTyping(nowAction.getContent());
								break;
							};
						};
					}else if(nowAction.getType()=="use"){
						//判断为使用建筑功能（仓库）
						viewControl.display.panel5Hide = false;
						//加载数据
						viewDataModel.panel5.buttonElements = currentInteractiveObject.getItems();
						viewDataModel.panel5.tittle = currentInteractiveObject.getName();
						viewControl.panel5_Style.left = 650 + "px";
						viewControl.panel5_Style.opacity = 0;
						//同时打开包裹
						viewControl.display.menuBagHide = false;
						//加载数据
						viewDataModel.menuBag.buttonElements = null;
						viewDataModel.menuBag.tittleText = "数据";
						viewControl.panel4_menu_bag_Style.left = 100 + "px";
						viewControl.panel4_menu_bag_Style.opacity = 0;
						$timeout(function() {
							viewControl.panel5_Style.left =  600 + "px";
							viewControl.panel5_Style.opacity = 1 + "px";
							viewControl.panel4_menu_bag_Style.left = 200 + "px";
							viewControl.panel4_menu_bag_Style.opacity = 1;
						}, 100);
					}
					//实现隐藏菜单的动画效果
					/*
					var left = viewControl.panel4_menu_Style.left;
					viewControl.panel4_menu_Style.left = (parseInt(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel4_menu_Style.opacity = 0;
					*/
					$rootScope.menuHide(50);
					$timeout(function() {
						if(nowAction.getType()=="use"){
							console.info("use");
						}else{
							//隐藏遮罩层
							viewControl.display.maskLayerHide = true;
						}
						//隐藏菜单
						viewControl.display.menuHide = true;
					}, 500);
				};
			});

			//仓库组件
			app.controller("panel5", function($scope, $rootScope,$timeout) {
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//标记当前交互对象
					currentItem = currentInteractiveObject.getItem(index);
					//加载交互对象动作数据
					viewDataModel.menu.buttonElements = currentItem.getActions();
					//viewDataModel.menu.tittleText = currentItem.getName();
					//控制显示菜单的动画效果
					//弹出遮罩层
					viewControl.display.maskLayerHide = false;
					//显示菜单
					viewControl.display.menuHide = false;
					var t = $event.target;
					viewControl.panel4_menu_Style.top = t.offsetTop + t.parentNode.offsetTop + 50 + "px";
					viewControl.panel4_menu_Style.left = t.offsetLeft + t.parentNode.offsetLeft + t.offsetWidth + 280 + "px";
					viewControl.panel4_menu_Style.opacity = 0;
					console.info(t.zindex);
					$timeout(function() {
						viewControl.panel4_menu_Style.left = t.offsetLeft + t.parentNode.offsetLeft + t.offsetWidth + 340 + "px";
						viewControl.panel4_menu_Style.opacity = 1;
					}, 10);
				};
			});

			//遮罩层
			app.controller("maskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$scope.maskLayerClick = function($event) {
					//实现隐藏列表菜单（自动大小_带箭头）的动画效果
					/*
					var left = viewControl.panel4_menu_Style.left;
					viewControl.panel4_menu_Style.left = (parseInt(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel4_menu_Style.opacity = 0;
					//数据清理
					viewDataModel.menu.buttonElements = null;
					*/
					$rootScope.menuHide();
					
					//实现隐藏菜单（包裹）的动画效果
					left = viewControl.panel4_menu_bag_Style.left;
					viewControl.panel4_menu_bag_Style.left = (parseInt(left.substring(0, left.length - 2)) - 50) + "px";
					viewControl.panel4_menu_bag_Style.opacity = 0;
					//数据清理
					
					//实现隐藏仓库组件的动画效果
					left = viewControl.panel5_Style.left;
					viewControl.panel5_Style.left = (parseInt(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel5_Style.opacity = 0;
					//数据清理
					viewDataModel.panel5.buttonElements = null;
					viewDataModel.panel5.tittle = null;
					
					$timeout(function() {
						viewControl.display.maskLayerHide = true;
						//同时隐藏其他
						viewControl.display.menuHide = true;
						viewControl.display.menuBagHide = true;
						viewControl.display.panel5Hide = true;
					}, 400);
				};
			});

		</script>
		<script src="js/animation/steeringWheel.js"></script>

	</body>
</html>

