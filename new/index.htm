<!DOCTYPE html>
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>index</title>
		<meta name="description" content="">
		<meta name="author" content="LC">
		<meta name="viewport" content="width=device-width; initial-scale=1.0">
		<link rel="shortcut icon" href="/favicon.ico">
		<link rel="apple-touch-icon" href="/apple-touch-icon.png">

		<link href="css/main.css" rel="stylesheet">
		<link href="css/menu.css" rel="stylesheet">
		<link href="css/panel.css" rel="stylesheet">
		<link href="css/steeringWheel.css" rel="stylesheet">
		<link href="css/button.css" rel="stylesheet">
		<link href="css/numberPicker.css" rel="stylesheet">
		<link href="css/top.css" rel="stylesheet">
		<link href="css/fight.css" rel="stylesheet">
		<link href="css/img.css" rel="stylesheet">
		<link href="css/decorate.css" rel="stylesheet">
		<link href="css/confirmDialog.css" rel="stylesheet">
		<link href="css/mission.css" rel="stylesheet">
		<link href="css/3dMap.css" rel="stylesheet">
		
	</head>

	<body>
		<div ng-app="myApp" ng-controller="myApp" ng-rightclick="" class="main-desktop">
			<!--起始场景-->
			<div ng-controller="scene-start" ng-hide="viewControl.display.sceneStartHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-start','show-animation-scene':viewControl.currentScene=='scene-start'}" class="scene">
				<input type="BUTTON" name="FullScreen" value="全屏显示" onClick="window.open(document.location, 'big', 'fullscreen=yes')">
				<div ng-click="buttonStart()" class="button" style="top:200px;left:200px;">
					<div class="button-background">
						<div class="button-background2"></div>
					</div>
					<div class="button-content">
						start
					</div>
				</div>
			</div>
			<!--xx场景-->
			<div ng-controller="scene-main" ng-hide="viewControl.display.sceneMainHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-main','show-animation-scene':viewControl.currentScene=='scene-main'}" class="scene">
				
				<!--背景装饰组件（齿轮）-->
				<div class="decorativeGear" style="top:-500px;left:-500px;">
					<div class="decorativeGear1"></div>
					<div class="decorativeGear2"></div>
					<div class="decorativeGear3"></div>
					<div class="decorativeGear4"></div>
					<div class="decorativeGear5"></div>
					<div class="decorativeGear6"></div>
					<div class="decorativeGear7"></div>
					<div class="decorativeGear-animus">
						<div class="decorativeGear-animus1"></div>
						<div class="decorativeGear-animus2"></div>
						<div class="decorativeGear-animus3"></div>
					</div>
				</div>
				<!--背景装饰组件（齿轮）-->
				<div class="decorativeGear" style="bottom: -500px;right: -500px;">
					<div class="decorativeGear1"></div>
					<div class="decorativeGear2"></div>
					<div class="decorativeGear3"></div>
					<div class="decorativeGear4"></div>
					<div class="decorativeGear5"></div>
					<div class="decorativeGear6"></div>
					<div class="decorativeGear7"></div>
					<div class="decorativeGear-animus">
						<div class="decorativeGear-animus1"></div>
						<div class="decorativeGear-animus2"></div>
						<div class="decorativeGear-animus3"></div>
					</div>
				</div>
				
				<!--顶部菜单-->
				<div ng-controller="topFrame" ng-hide="viewControl.display.topFrameHide" ng-class="{'hide-animation':viewControl.topFrameHide,'show-animation':!(viewControl.topFrameHide)}" class="top-frame">
					<div class="top">
						<div ng-click="clickButton2()" class="top-button" style="right:860px;">
							<div class="top-button-background"></div>
							<div class="top-button-content">任务</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
						<div ng-click="clickButton1('skill')" class="top-button" style="right:690px;">
							<div class="top-button-background"></div>
							<div class="top-button-content">技能</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
						<div ng-click="clickButton1('useRoleBag')" class="top-button" style="right:520px;">
							<div class="top-button-background"></div>
							<div class="top-button-content">包裹</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
						<div ng-click="clickButton1('useRoleBag','useRoleBag-Consumable')" class="top-button" style="right:350px;">
							<div class="top-button-background"></div>
							<div class="top-button-content">消耗</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
						<div ng-click="clickButton1('useRoleBag','useRoleBag-Equip')" class="top-button" style="right:180px;">
							<div class="top-button-background"></div>
							<div class="top-button-content">实装</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
						<div ng-hide="viewControl.display.top-button4" class="top-button">
							<div class="top-button-background"></div>
							<div class="top-button-content">系统</div>
							<div class="top-button-arrow">
								<div class="top-button-arrow1"></div>
								<div class="top-button-arrow2"></div>
								<div class="top-button-arrow3"></div>
								<div class="top-button-arrow4"></div>
								<div class="top-button-arrow5"></div>
							</div>
						</div>
					</div>
				</div>
				
				<!--交流信息面板-->
				<div ng-click="panelTypingOnClick()" ng-hide="viewControl.display.panelHide" ng-style="viewControl.panel_Style" class="panel">
					<div>
						{{viewDataModel.panelText}}
					</div>
					<div class="panel-lamp"></div>
				</div>
				
				
				
				<!--顶部横向装饰组件-->
				<div class="decorativeStrip-top">
					<div class="decorativeStrip-top1"></div>
					<div class="decorativeStrip-top2-unit">
						<div class="decorativeStrip-top2-unit1"></div>
						<div class="decorativeStrip-top2-unit2"></div>
						<div class="decorativeStrip-top2-unit3"></div>
						<div class="decorativeStrip-top2-unit4"></div>
					</div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit"><div class="decorativeStrip-top2-unit1"></div><div class="decorativeStrip-top2-unit2"></div><div class="decorativeStrip-top2-unit3"></div><div class="decorativeStrip-top2-unit4"></div></div>
					<div class="decorativeStrip-top2-unit">
						<div class="decorativeStrip-top2-unit1"></div>
					</div>
				</div>
				<!--左侧纵向装饰组件-->
				<div class="decorativeStrip-left"></div>
				
				<!--场景名称展示条-->
				<div class="panel2" ng-hide="viewControl.display.panel2Hide" ng-style="viewControl.panel2_Style">
					<span>{{viewDataModel.panel2Text()}}</span>
				</div>
				
				<!--角色信息面板-->
				<div ng-controller="panel3" ng-hide="viewControl.display.panel3Hide" ng-style="viewControl.panel3_Style" class="panel3">
					<div class="panel3-tittle">
						{{viewDataModel.panel3.tittleText()}}
					</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								包裹:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleBagSpace()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleHp()}}/{{viewDataModel.panel3.roleMaxHp()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleEp()}}/{{viewDataModel.panel3.roleMaxEp()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="width: 256px;height: 20px;background-image:linear-gradient(90deg, rgb(235,230,205) 20%, transparent 20%, transparent),linear-gradient(rgb(235,230,205) 20%, transparent 20%, transparent),linear-gradient(90deg, transparent 80%, rgb(235,230,205) 80%),linear-gradient( transparent 80%, rgb(235,230,205) 80%),linear-gradient(90deg, rgb(179,174,152) 30%, transparent 30%, transparent),linear-gradient(rgb(179,174,152) 30%, transparent 30%, transparent),linear-gradient(90deg, transparent 70%, rgb(179,174,152) 70%),linear-gradient( transparent 70%, rgb(179,174,152) 70%);background-size: 20px 20px;background-color:rgb(224,219,195);">
							</div>
						</div>
						
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleAtt()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleDef()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleCri()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleCriStrike()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleAvd()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleHit()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 5px;">
						</div>
				</div>
				<!--角色信息面板2-->
				<div ng-controller="panel3" ng-rightclick="testright()" ng-hide="viewControl.display.panel3Hide2" ng-style="viewControl.panel3_Style2" class="panel3">
					<div class="panel3-tittle">
						{{viewDataModel.panel3.tittleText()}}
					</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								包裹:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleBagSpace()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleHp()}}/{{viewDataModel.panel3.roleMaxHp()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleEp()}}/{{viewDataModel.panel3.roleMaxEp()}}
							</div>
						</div>
						
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="width: 256px;height: 20px;background-image:linear-gradient(90deg, rgb(235,230,205) 20%, transparent 20%, transparent),linear-gradient(rgb(235,230,205) 20%, transparent 20%, transparent),linear-gradient(90deg, transparent 80%, rgb(235,230,205) 80%),linear-gradient( transparent 80%, rgb(235,230,205) 80%),linear-gradient(90deg, rgb(179,174,152) 30%, transparent 30%, transparent),linear-gradient(rgb(179,174,152) 30%, transparent 30%, transparent),linear-gradient(90deg, transparent 70%, rgb(179,174,152) 70%),linear-gradient( transparent 70%, rgb(179,174,152) 70%);background-size: 20px 20px;background-color:rgb(224,219,195);">
							</div>
						</div>
						
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleAtt()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleDef()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleCri()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleCriStrike()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleAvd()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 10px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3.roleHit()}}
							</div>
						</div>
						<div style="height:10px;width: 250px;margin: 5px;">
						</div>
				</div>

				<!--人物交互面板(按钮组)-->
				<!--旧
				<div ng-controller="panel4" ng-hide="viewControl.display.panel4Hide" ng-style="viewControl.panel4_Style" class="panel4">
					<div ng-click="onClick($event,$index)" ng-repeat="x in viewDataModel.panel4.buttonElements()" class="button2">
						<div class="button2-background"></div>
						<div class="button2-background2"></div>
						<div class="button2-background3"></div>
						<div class="button2-content">
							{{x.getName()}}
						</div>
					</div>
				</div>
				-->
				<!--人物交互面板(按钮组)-->
				<div id="map3D" ng-controller="panel4" ng-mousedown="dragRotate($event)" ng-mouseup="dragRotateStop()" ng-mouseleave="dragRotateStop()" ng-hide="viewControl.display.panel4Hide" ng-style="viewControl.panel4_Style" class="panel4" style="width: 600px;height: 440px;">
					<!--地图场景地板-->
					<div class=" map3d-floor " ng-style="viewControl.map3dFloor_Style">
						<!--地图场景装饰元素构成-->
						<div ng-repeat="x in viewControl.map3d_Style" ng-style=" x.cube ">
							<div ng-class="{'map3d-side2':x.color==1}" ng-style=" x.front ">
							</div>
							<div ng-class="{'map3d-side2':x.color==1}" ng-style=" x.back ">
							</div>
							<div ng-class="{'map3d-side3':x.color==1}" ng-style=" x.right ">
							</div>
							<div ng-class="{'map3d-side3':x.color==1}" ng-style=" x.left ">
							</div>
							<div ng-class="{'map3d-side1':x.color==1}" ng-style=" x.top ">
							</div>
						</div>
						<div class="map3d-decorate1"></div>
						<div class="map3d-decorate2"></div>
						<div class="map3d-decorate3"></div>
						<div class="map3d-decorate4"></div>
						<div class="map3d-decorate5"></div>
						<div class="map3d-decorate6"></div>
						<div class="map3d-decorate7"></div>
						<div class="map3d-decorate8"></div>
						<div class="map3d-decorate9"></div>
						<div class="map3d-decorate10"></div>
						<!--
						<div class="map3d-decorate5"></div>
						-->
						<!--交互元素展示-->
						<div ng-repeat="x in viewDataModel.panel4.buttonElements()" class="map3d-button" ng-style="viewControl.map3d_button{{$index+1}}">
							<div class="map3d-obj" >
							</div>
							<div ng-click="onClick($event,$index)" class="button2" ng-style="viewControl.map3dButton{{$index+1}}_Style">
								<div class="button2-background"></div>
								<div class="button2-background2"></div>
								<div class="button2-background3"></div>
								<div class="button2-content">
									{{x.getName()}}
								</div>
							</div>
						</div>
					</div>
				</div>
				
				<!--方向盘-->
				<div ng-controller="steeringWheel" ng-hide="viewControl.display.steeringWheelHide" ng-style="viewControl.steeringWheel_Style" class="steeringWheel">
					<div ng-repeat="x in arrows" ng-class="{'steeringWheel-upperArrow':{{x}}=='1','steeringWheel-rightArrow':{{x}}=='2','steeringWheel-lowerArrow':{{x}}=='3','steeringWheel-leftArrow':{{x}}=='4'}">
						<!--steeringWheel-upperArrow-->
						<div ng-click="arrowOnClick($index)" ng-class="{'steeringWheel-upperArrow-graphical':{{x}}=='1','steeringWheel-rightArrow-graphical':{{x}}=='2','steeringWheel-lowerArrow-graphical':{{x}}=='3','steeringWheel-leftArrow-graphical':{{x}}=='4'}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-1'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
						<div ng-class="{'steeringWheel-upperArrow-shadow':{{x}}=='1','steeringWheel-rightArrow-shadow':{{x}}=='2','steeringWheel-lowerArrow-shadow':{{x}}=='3','steeringWheel-leftArrow-shadow':{{x}}=='4','steeringWheel-upperArrow-shadow-jsAnimation':{{x}}+'-2'==animation}">
							<div class="steeringWheel-arrow1"></div>
							<div class="steeringWheel-arrow2"></div>
							<div class="steeringWheel-arrow3"></div>
							<div class="steeringWheel-arrow4"></div>
							<div class="steeringWheel-arrow5"></div>
						</div>
					</div>
				</div>

				<!--列表菜单-遮罩层-->
				<div ng-controller="menuAutoMaskLayer" ng-hide="viewControl.display.menuAutoMaskLayerHide"  ng-style="viewControl.menuAutoMaskLayer_Style" ng-rightclick="menuAutoMaskLayerClick($event)" class="maskLayer" ></div>
				<!--列表菜单（自动大小_带箭头）-->
				<div id="menuAuto" ng-controller="menu" ng-hide="viewControl.display.menuHide" ng-style="viewControl.menu_Style" ng-rightclick="menuAutoMaskLayerClick($event)" class="menuAuto-background">
					<div class="menuAuto">
						<div ng-click="menulistClick($index,$event)" ng-repeat="y in viewDataModel.menu.buttonElements()" class="menuAuto-list">
							<div class="menuAuto-list-background2"></div>
							<div class="menuAuto-list-content">
								{{y.getName()}}
							</div>
							<div class="menuAuto-arrow">
								<div class="menuAuto-arrow1"></div>
								<div class="menuAuto-arrow2"></div>
								<div class="menuAuto-arrow3"></div>
								<div class="menuAuto-arrow4"></div>
								<div class="menuAuto-arrow5"></div>
							</div>
						</div>
					</div>
				</div>
				
				<!--列表菜单:包裹-->
				<div ng-controller="menuBag" ng-hide="viewControl.display.menuBagHide" ng-style="viewControl.menu_bag_Style" ng-class="{'hide-animation':menuBagHide,'show-animation':!menuBagHide}" ng-rightclick="panel5MaskLayerClick($event)" class="menu-background">
					<div class="menu-tittle">{{viewDataModel.panel3.tittle()}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{viewDataModel.panel3.roleBagSpace()}}</div>
					<div class="menu-top"></div>
					<div class="menu" >
						<div ng-click="menulistClick($event,$index)" ng-mouseenter="menulistHover($index,y.constructor.name)" ng-mouseleave="menulistUnHover()" ng-repeat="y in viewDataModel.menuBag.buttonElements()" class="menu-list">
							<div class="menu-list-background"></div>
							<div class="menu-list-background2"></div>
							<div class="menu-list-content">
								{{y.getName()}}
							</div>
							<div class="menu-list-content-suffix" ng-hide="y.getIsPutOn()||y.constructor.name=='skill'">
								×{{y.getTotalNum()}}
							</div>
							<div class="menu-list-content-suffix2" ng-hide="!y.getIsPutOn()">
								已装备
							</div>
							<div class="menu-list-button-arrow">
								<div class="menu-list-button-arrow1"></div>
								<div class="menu-list-button-arrow2"></div>
								<div class="menu-list-button-arrow3"></div>
								<div class="menu-list-button-arrow4"></div>
								<div class="menu-list-button-arrow5"></div>
							</div>
						</div>
					</div>
					<div class="menu-bottom"></div>
				</div>
				
				<!--物品信息面板-->
				<div ng-controller="panel3ItemInfo" ng-hide="viewControl.display.panel3ItemInfoHide" ng-style="viewControl.panel3ItemInfo_Style" class="panel3" >
					<div class="panel3-tittle">
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoNameHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								名称：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.name()}}
							</div>
						</div>
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前HP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复HP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecoveryMaxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前EP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复EP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecoveryMaxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxHpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxHp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxEpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxEp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAttHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("att")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAttPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("attPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDamageHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								固定伤害:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("damage")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDefHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("def")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDefPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("defPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("cri")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriStrikeHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criStrike")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriStrikePercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criStrikePercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAvdHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("adv")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAvdPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("avdPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHitHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hit")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHitPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hitPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoBuffsHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								-------------------持续状态------------------
							</div>
						</div>
						<div ng-repeat="x in viewDataModel.panel3ItemInfo.buffs()" ng-hide="viewControl.display.panel3ItemInfoBuffsHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								{{x.getName()}}
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
							</div>
						</div>
					</div>
					<div class="panel3-lattice" ng-hide="viewControl.display.panel3ItemInfoContentHide" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoContentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								说明：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.content()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--对比角色物品信息面板-->
				<div ng-controller="panel3RoleItemInfo" ng-hide="viewControl.display.panel3RoleItemInfoHide" ng-style="viewControl.panel3RoleItemInfo_Style" class="panel3" >
					<div class="panel3-tittle">
						当前
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3RoleItemInfoNameHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								名称：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.name()}}
							</div>
						</div>
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3RoleItemInfoHpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("hpRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoHpRecoveryPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前HP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("hpRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoHpRecoveryMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复HP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("hpRecoveryMaxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoEpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("epRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoEpRecoveryPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前EP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("epRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoEpRecoveryMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复EP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("epRecoveryMaxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoMaxHpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("maxHp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("maxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoMaxEpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("maxEp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("maxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoAttHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("att")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoAttPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("attPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoDamageHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								固定伤害:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("damage")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoDefHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("def")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoDefPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("defPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoCriHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("cri")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoCriPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("criPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoCriStrikeHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("criStrike")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoCriStrikePercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("criStrikePercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoAvdHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("adv")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoAvdPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("avdPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoHitHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("hit")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3RoleItemInfoHitPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.attr("hitPercent")}}
							</div>
						</div>
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3RoleItemInfoContentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								说明：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3RoleItemInfo.content()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--仓库-遮罩层-->
				<div ng-controller="panel5MaskLayer" ng-hide="viewControl.display.panel5MaskLayerHide"  ng-style="viewControl.panel5MaskLayer_Style" ng-rightclick="panel5MaskLayerClick($event)" class="maskLayer" ></div>
				<!--仓库-->
				<div ng-controller="panel5" ng-hide="viewControl.display.panel5Hide" ng-style="viewControl.panel5_Style" ng-rightclick="panel5MaskLayerClick($event)" class="panel5">
					<div class="panel5-tittle">
						{{viewDataModel.panel5.tittleText()}}{{viewDataModel.panel5.bagSpace()}}
					</div>
					<div class="menu" style="width: 485px;height: 340px;left:10px;">
						<div ng-click="onClick($event,$index)" ng-mouseenter="menulistHover($index)" ng-mouseleave="menulistUnHover()" ng-repeat="x in viewDataModel.panel5.buttonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getNameLength()}}<12,'button2-content-scroll':{{x.getNameLength()}}>11}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
				</div>
				
				<!--数字选择器-遮罩层-->
				<div ng-controller="numberPickerMaskLayer" ng-hide="viewControl.display.numberPickerMaskLayerHide"  ng-style="viewControl.numberPickerMaskLayer_Style" ng-rightclick="numberPickerMaskLayerClick($event)" class="maskLayer" ></div>
				<!--数字选择器-->
				<div ng-controller="numberPicker" ng-hide="viewControl.display.numberPickerHide" ng-style="viewControl.numberPicker_Style" ng-rightclick="numberPickerMaskLayerClick($event)" class="numberPicker-background">
					<div class="numberPicker">
						<div class="numberPicker-tittle">{{viewDataModel.numberPicker.tittleText}}</div>
						<div ng-mousedown="numberUp()" ng-mouseup="numberUpStop()" ng-mouseleave="numberUpStop()" class="numberPicker-upperArrow">
							<div class="numberPicker-arrow1"></div>
							<div class="numberPicker-arrow2"></div>
							<div class="numberPicker-arrow3"></div>
						</div>
						<div class="numberPicker-numberBox">{{viewDataModel.numberPicker.number}}
						</div>
						<div ng-mousedown="numberDown()" ng-mouseup="numberDownStop()" ng-mouseleave="numberDownStop()" class="numberPicker-lowerArrow">
							<div class="numberPicker-arrow1"></div>
							<div class="numberPicker-arrow2"></div>
							<div class="numberPicker-arrow3"></div>
						</div>
						<div ng-click="confirm()" class="numberPicker-button" data-word="{{viewDataModel.numberPicker.confirmButton}}"></div>
					</div>
				</div>
				
				<!--交易面板-->
				<div ng-controller="transactionPanel" ng-hide="viewControl.display.transactionPanelHide" ng-style="viewControl.transactionPanel_Style" ng-rightclick="panel5MaskLayerClick($event)" class="panel5">
					<div class="menu-top" style="width: 99%"></div>
					<div class="menu" style="width: 485px;height: 170px;left:10px;">
						<div ng-click="sellsClick($event,$index)" ng-repeat="x in viewDataModel.transactionPanel.sellButtonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getNameLength()}}<12,'button2-content-scroll':{{x.getNameLength()}}>11}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					<div class="menu-bottom" style="bottom:0px;width: 99%"></div>
					</div>
					<div style="width:485px;height: 30px;top:15px;left:10px;text-align:center;position: relative;">
						<div ng-click="confirm()">确定</div>
					</div>
					<div class="menu" style="width: 485px;height: 170px;left:10px;">
					<div class="menu-top" style="top:0px;width: 99%"></div>
						<div ng-click="buysClick($event,$index)" ng-repeat="x in viewDataModel.transactionPanel.buyButtonElements()" class="button2">
							<div class="button2-background"></div>
							<div class="button2-background2"></div>
							<div class="button2-background3"></div>
							<div class="button2-content-position">
								<div ng-class="{'button2-content2':{{x.getNameLength()}}<12,'button2-content-scroll':{{x.getNameLength()}}>11}">
									{{x.getName()}}
								</div>
							</div>
							<div class="button2-content-suffix">
								×{{x.getTotalNum()}}
							</div>
						</div>
					</div>
					<div class="menu-bottom" style="width: 99%"></div>
				</div>
				
				<!--遮罩层-->
				<div ng-controller="confirmPanleMaskLayer" ng-hide="viewControl.display.confirmPanleMaskLayerHide" ng-style="viewControl.confirmPanleMaskLayer_Style" ng-rightclick="confirmPanleMaskLayerClick()" class="maskLayer" ></div>
				<!--确认对话框面板-->
				<div ng-controller="confirmPanle" ng-hide="viewControl.display.confirmPanleHide" ng-style="viewControl.confirmPanle_Style" ng-rightclick="confirmPanleMaskLayerClick()" class="panel3">
					<div style="width: 490px;" class="panel3-tittle">
						<div style="background:rgb(235,230,205);" class="confirmDialog-decoratingBlock"></div>
						{{viewDataModel.confirmPanle.tittle}}
					</div>
					<div class="confirmDialog-textContent">{{viewDataModel.confirmPanle.textContent}}</div>
					<div class="confirmDialog-decoratingLine"></div>
					<div ng-click="confirmPanleButtonSureClick()" style="left:95px;" class="confirmDialog-button">
						<div class="confirmDialog-decoratingBlock"></div>
						是
					</div>
					<div ng-click="confirmPanleMaskLayerClick()" style="right:95px;" class="confirmDialog-button">
						<div class="confirmDialog-decoratingBlock"></div>
						否
					</div>
				</div>
				
				<!--遮罩层-->
				<div ng-controller="missionSelectMaskLayer" ng-hide="viewControl.display.missionSelectMaskLayerHide" ng-style="viewControl.missionSelectMaskLayer_Style" ng-rightclick="missionSelectMaskLayerClick()" class="maskLayer" ></div>
				<!--任务列表-->
				<div ng-controller="missionSelect" ng-hide="viewControl.display.missionSelectHide" ng-style="viewControl.missionSelect_Style" ng-rightclick="missionSelectMaskLayerClick()" class="mission-select">
					<div ng-click="missionSelectClick($index)" ng-mouseenter="missionSelectHover($index)" ng-rightclick="missionSelectMaskLayerClick()" ng-repeat="x in viewDataModel.missionSelect.elements()" class="mission-select-option">
						<div class="mission-select-option-background"></div>
						<!--可接取任务图标
						<div class="mission-imgAccept">
							<div class="mission-imgAccept1"></div>
						</div>
						-->
						<!--进行中任务图标
						<div class=""></div>
						-->
						<!--已完成任务图标
						<div class=""></div>
						-->
						<div class="mission-select-option-status" ng-hide="x.getStatus()!='ongoing'">进行</div>
						<div class="mission-select-option-status" ng-hide="x.getStatus()!='deliverable'">完成</div>
						<div class="mission-select-option-content">{{x.getName()}}</div>
					</div>
				</div>
				<!--任务信息面板-->
				<div ng-hide="viewControl.display.missionInfoHide" ng-style="viewControl.missionInfo_Style" ng-rightclick="missionSelectMaskLayerClick()" class="mission-info">
					<div class="mission-info-content">{{viewDataModel.missionSelect.content()}}</div>
					<div class="mission-info-complete">
						<div ng-repeat="x in viewDataModel.missionSelect.completeItems()" class="mission-info-complete1">
							{{x.getName()}} : {{x.getHaveNum()}}/{{x.getTotalNum()}}
						</div>
						<div class="mission-info-complete1"></div>
					</div>
					<div class="mission-info-reward">
						
					</div>
				</div>
				
			</div>
		
			<!--战斗场景-->
			<div ng-controller="scene-battle" ng-hide="viewControl.display.sceneBattleHide" ng-class="{'hide-animation-scene':viewControl.currentScene!='scene-battle','show-animation-scene':viewControl.currentScene=='scene-battle'}" class="scene">
				
				<!--左侧纵向装饰组件-->
				<div class="decorativeStrip-left"></div>
				
				<!--交流信息面板-->
				<div ng-click="panelOnClick(viewDataModel.panelText)" ng-hide="viewControl.display.panelHide" ng-style="viewControl.panel_Style" class="panel">
					<div>
						{{viewDataModel.panelText}}
					</div>
					<div class="panel-lamp"></div>
				</div>
				
				
				<!--物品信息面板-->
				<div ng-controller="panel3ItemInfo" ng-hide="viewControl.display.panel3ItemInfoHide" ng-style="viewControl.panel3ItemInfo_Style" class="panel3" >
					<div class="panel3-tittle">
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoNameHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								名称：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.name()}}
							</div>
						</div>
					</div>
					<div class="panel3-lattice" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前HP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHpRecoveryMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复HP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hpRecoveryMaxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP恢复:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecovery")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复当前EP:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecoveryPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoEpRecoveryMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								恢复EP最大值:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("epRecoveryMaxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxHpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxHp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxHpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								HP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxHpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxEpHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxEp")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoMaxEpPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								EP最大值增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("maxEpPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAttHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("att")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAttPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								攻击力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("attPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDamageHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								固定伤害:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("damage")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDefHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("def")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoDefPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								防御力增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("defPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("cri")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriStrikeHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criStrike")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoCriStrikePercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								暴击伤害增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("criStrikePercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAvdHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("adv")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoAvdPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								闪避率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("avdPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHitHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hit")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoHitPercentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								命中率增加:
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.attr("hitPercent")}}
							</div>
						</div>
						<div ng-hide="viewControl.display.panel3ItemInfoBuffsHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								-------------------持续状态------------------
							</div>
						</div>
						<div ng-repeat="x in viewDataModel.panel3ItemInfo.buffs()" ng-hide="viewControl.display.panel3ItemInfoBuffsHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								{{x.getName()}}
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
							</div>
						</div>
					</div>
					<div class="panel3-lattice" ng-hide="viewControl.display.panel3ItemInfoContentHide" style="width:250px;">
						<div ng-hide="viewControl.display.panel3ItemInfoContentHide" style="height:10px;width: 250px;margin: 5px;">
							<div style="height: 10px;left: 10px;position: absolute;">
								说明：
							</div>
							<div style="height: 10px;right: 10px;position: absolute;">
								{{viewDataModel.panel3ItemInfo.content()}}
							</div>
						</div>
					</div>
				</div>
				
				
				<div class="panelFight">
					<!--对象信息组件-->
					<div class="panelFight-objInfo">
						<div class="panelFight-lattice">
							<div class="panelFight-lattice-enemyValue">{{viewDataModel.battle.enemyHP()}}/{{viewDataModel.battle.enemyMaxHP()}}</div>
							<div class="panelFight-lattice-enemyPrefix">:HP</div>
						</div>
						<div class="panelFight-lattice" style="height: 10px;left:10px;">
							<div ng-class="{'panelFight-bar-enemy-grey':viewControl.panelFightBarColour2()!='red','panelFight-bar-enemy-red':viewControl.panelFightBarColour2()=='red'}" ng-style="viewControl.panelFightBar_StyleFn2()"></div>
						</div>
						<!--buff展示-->
						<div class="panelFight-lattice" style="left: 100px;width: 300px;">
							<div ng-repeat="x in viewDataModel.battle.objBuffs()" class="panelFight-lattice-buffimg">
								<div ng-class="{'panelFight-lattice-buffimg-upimg':'{{x.getImg()}}'=='up','panelFight-lattice-buffimg-downimg':'{{x.getImg()}}'=='down'}"></div>
								<div class="panelFight-lattice-buffimg-roundNum">{{x.getRound()}}</div>
								<div class="panelFight-lattice-buffimg-info">{{x.getName()}}</div>
							</div>
						</div>
					</div>
					
					<!--快捷释放-->
					<div class="panelFight-quick">
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(1)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton1()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(1)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(2)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton2()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(2)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(3)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton3()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(3)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(4)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton4()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(4)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(5)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton5()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(5)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
						<div class="panelFight-quick-unit">
							<div ng-click="quickButtonClick(6)" class="panelFight-quick-unit-button">
								<div class="panelFight-quick-unit-button-content">
									{{viewDataModel.battle.quickButton6()}}
								</div>
							</div>
							<div ng-click="quickButtonChange(6)" class="panelFight-quick-unit-prefixButton">
								+
							</div>
						</div>
					</div>
					
					<!--战斗信息显示-->
					<div class="panelFight-battleInfo">
						<div style="width:100%; bottom: 5px;position:absolute;">
							<p ng-repeat="x in viewDataModel.battle.battleInfo">{{x.str}}</p>
						</div>
					</div>
					
					<!--角色信息组件-->
					<div class="panelFight-roleInfo">
						<!--buff展示-->
						<div class="panelFight-lattice" style="left: 20px;top: -30px;">
							<div ng-repeat="x in viewDataModel.battle.roleBuffs()" class="panelFight-lattice-buffimg">
								<div ng-class="{'panelFight-lattice-buffimg-upimg':'{{x.getImg()}}'=='up','panelFight-lattice-buffimg-downimg':'{{x.getImg()}}'=='down'}"></div>
								<div class="panelFight-lattice-buffimg-roundNum">{{x.getRound()}}</div>
								<div class="panelFight-lattice-buffimg-info">{{x.getName()}}</div>
							</div>
						</div>
						<!--角色属性条展示-->
						<div class="panelFight-lattice">
							<div class="panelFight-lattice-prefix">HP:</div>
							<div class="panelFight-lattice-value">{{viewDataModel.battle.roleHP()}}/{{viewDataModel.battle.roleMaxHP()}}</div>
						</div>
						<div class="panelFight-lattice" style="height: 10px;">
							<div ng-class="{'panelFight-bar-grey':viewControl.panelFightBarColour()!='red','panelFight-bar-red':viewControl.panelFightBarColour()=='red'}" ng-style="viewControl.panelFightBar_StyleFn()"></div>
						</div>
						<div class="panelFight-lattice">
							<div class="panelFight-lattice-prefix">EP:</div>
							<div class="panelFight-lattice-value">{{viewDataModel.battle.roleEP()}}/{{viewDataModel.battle.roleMaxEP()}}</div>
						</div>
						<div class="panelFight-lattice" style="height: 10px;">
							<div class="panelFight-bar-grey" ng-style="viewControl.panelFightBarEP_StyleFn()"></div>
						</div>
						<!--
						<div class="panelFight-lattice" style="height: 10px;">
							<div class="panelFight-bar-block"></div>
						</div>
						-->
					</div>
					
					<!--遮罩层-->
					<div ng-hide="viewControl.display.quickMenuBagMaskLayerHide" ng-style="viewControl.quickMenuBagMaskLayer_Style" ng-rightclick="quickMenuBagMaskLayerClick($event)" class="maskLayer" ></div>
					<!--设置快捷按钮选择菜单-->
					<div ng-hide="viewControl.display.quickMenuBagHide" ng-style="viewControl.menu_bag_Style" ng-class="{'hide-animation':menuBagHide,'show-animation':!menuBagHide}" ng-rightclick="quickMenuBagMaskLayerClick($event)" class="menu-background">
						<div class="menu-top"></div>
						<div class="menu" >
							<div ng-click="menulistClick($index)"  ng-mouseenter="menulistHover($index,y.constructor.name)" ng-mouseleave="menulistUnHover()" ng-repeat="y in viewDataModel.menuBag.buttonElements()" class="menu-list">
								<div class="menu-list-background"></div>
								<div class="menu-list-background2"></div>
								<div class="menu-list-content">
									{{y.getName()}}
								</div>
								<div class="menu-list-content-suffix" ng-hide="y.constructor.name=='skill'">
									×{{y.getTotalNum()}}
								</div>
								<div class="menu-list-button-arrow">
									<div class="menu-list-button-arrow1"></div>
									<div class="menu-list-button-arrow2"></div>
									<div class="menu-list-button-arrow3"></div>
									<div class="menu-list-button-arrow4"></div>
									<div class="menu-list-button-arrow5"></div>
								</div>
							</div>
						</div>
						<div class="menu-bottom"></div>
					</div>
				</div>
				
				
			</div>
		</div>
		<script src="js/angular.js"></script>
		<script src="js/main.js"></script>
		<script src="js/data/DataModle.js"></script>
		<script src="js/viewData.js"></script>
		<script src="js/data/dataAction.js"></script>
		<script src="js/data/dataBuff.js"></script>
		<script src="js/data/dataSkill.js"></script>
		<script src="js/data/dataItem.js"></script>
		<script src="js/data/dataMission.js"></script>
		<script src="js/data/dataInteractiveObject.js"></script>
		<script src="js/data/data.js"></script>
		<script src="js/initFunction.js"></script>
		
		
		<script>
			/**
			 * 伪完全复制对象，需传入创建的新对象
			 * 传参： beanObj 原始被复制对象,copyObj 复制对象
			 */
			function copyBean (beanObj,copyObj){
				/*仅复制基本类型属性
				for (var i in copyObj) {
					if (copyObj.hasOwnProperty(i) && typeof copyObj[i] == "function") {
						if ("set"==i.substring(0,3)){
							//遍历beanObj对象所有get方法,并将值set至copyObj
							for (var j in beanObj) {
								if (beanObj.hasOwnProperty(j) && typeof beanObj[j] == "function") {
									if("get"==j.substring(0,3) && i.substring(3)==j.substring(3)){
										//copyObj.set(beanObj.get())
										copyObj[i](beanObj[j]());
									}
								}
							}
						};
					}
				}
				*/
				//复制基本类型属性  和  包含对象的数组属性（由于依赖于工厂创建对象，仅适用于本项目）
				//遍历beanObj对象所有get方法
				for (var beanObjFn in beanObj) {
					if (beanObj.hasOwnProperty(beanObjFn) && typeof beanObj[beanObjFn] == "function") {
						if("get"==beanObjFn.substring(0,3)){
							//判断beanObj.get后是否包含其他对象，需要递归
							var tempVal = beanObj[beanObjFn](0);
							//判断，为数组，且数组内有至少一个元素
							if(null != tempVal && Object.prototype.toString.call(tempVal)=="[object Array]" && tempVal.length>0){
								for (var j=0; j < tempVal.length; j++) {
									//判断数组内元素为对象
									if(Object.prototype.toString.call(tempVal[j])=="[object Object]"){
										var tempObj;
										//获取数组元素对象构造函数名，并根据名称创建新的对象
										if("domain"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createDomain();
										} else if("interactiveObject"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createInteractiveObject();
										} else if("action"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createAction();
										} else if("item"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createItem();
										} else if("role"==tempVal[j].constructor.name){
											tempObj = DataModleFactory.createRole();
										}
										//递归，复制数组内元素对象数据，获取返回复制对象
										var returnTempObj = copyBean(tempVal[j],tempObj);
										//遍历出copyObj的对应add方法调用存入
										for (var copyObjFn in copyObj) {
											if (copyObj.hasOwnProperty(copyObjFn) && typeof copyObj[copyObjFn] == "function") {
												if ("add"==copyObjFn.substring(0,3) && beanObjFn.substring(0,beanObjFn.length-1)){
													copyObj[copyObjFn](returnTempObj);
												}
											}
										}
									}else{
										//不是对象则直接存入copy对象（暂时没有这种情况）
									};
								};
							}else if(typeof tempVal=="number" || typeof tempVal=="string" || typeof tempVal=="boolean"){
								//判断为Number String Boolean
								//直接遍历出copyObj的对应set方法调用存入
								for (var copyObjFn in copyObj) {
									if (copyObj.hasOwnProperty(copyObjFn) && typeof copyObj[copyObjFn] == "function") {
										if ("set"==copyObjFn.substring(0,3) && copyObjFn.substring(3)==beanObjFn.substring(3)){
											copyObj[copyObjFn](tempVal);
										}
									}
								}
							};
						}
					}
				}
				return copyObj;
			};
			/**
			 * 对比两个Domain场景对象是否为同一种
			 */
			function compareDomain(domain1,domain2){
				return (domain1.getName()==domain2.getName()
						&&domain1.getSignId()==domain2.getSignId());
			};
			/**
			 * 对比两个InteractiveObject对象是否为同一种
			 */
			function compareInteractiveObject(interactiveObject1,interactiveObject2){
				return (interactiveObject1.getName()==interactiveObject2.getName());
			};
			/**
			 * 对比两个Item物品对象是否为同一种物品
			 */
			function compareItem(item1,item2){
				return (item1.getName()==item2.getName()
						&&item1.getType()==item2.getType()
						&&item1.getType2()==item2.getType2()
						&&item1.getContent()==item2.getContent());
			};
			/**
			 * 对比两个Action动作选项是否为同一种
			 */
			function compareAction(action1,action2){
				return (action1.getName()==action2.getName()
						&&action1.getType()==action2.getType()
						&&action1.getContent()==action2.getContent()
						&&action1.getTarget()==action2.getTarget());
			};
			/**
			 * 对比两个Buff是否为同一种
			 */
			function compareBuff(buff1,buff2){
				return (buff1.getName()==buff2.getName()
						&&buff1.getType()==buff2.getType()
						&&buff1.getContent()==buff2.getContent()
						&&buff1.getRound()==buff2.getRound()
						&&buff1.getSuperposition()==buff2.getSuperposition());
			}
			/**
			 * （全局级）物品信息集合（字典）[item数组]
			 * //需在其他对象之前构建
			 */
			var publicItemInfo = loadData(dictionaryData.itemInfo,"item");
			/**
			 * 公开场景数据 domain数组 
			 */
			var dataDomainsObj = loadData(data.publicMaps,"domain");
			
			
			/**
			 * 大地图数据 domain数组 (一个元素为一整张大地图)
			 */
			var mapDomainsObj = [];
			//封装一个大地图
			mapDomainsObj.push(loadData(data[mapIds[0].mapId],"domain"));
			
			/**
			 * 暂时仅为只有一个role对象的数组
			 */
			var dataRoleObj = loadData(data.roles,"role");
			/*-------------特殊对象-------------*/
			/**
			 * 全局任务交互动作
			 */
			var missionActionObj = loadData(exampleData.actions[0],"action");
			/**
			 * 全局临时存放点对象（用于复制的模版）
			 */
			var tempStoragePointObj = loadData(exampleData.interactiveObjects[0],"interactiveObject");
			/**
			 * 用于在任务栏显示没有任务
			 */
			var noneMissionObj = loadData(exampleData.missions[0],"mission");
			/*--------------------------------*/
			/**
			 * 当前大地图
			 */
			var currentMapDomains = [];
			/**
			 * 当前场景地图
			 */
			var currentDomain = DataModleFactory.createDomain();
			/**
			 * 当前可交互对象 
			 */
			var currentInteractiveObject = DataModleFactory.createInteractiveObject();
			/**
			 * 当前的物品
			 */
			var currentItem = DataModleFactory.createItem();
			/**
			 * 当前的交互动作
			 */
			var currentAction = DataModleFactory.createAction();
			/**
			 * 当前的任务
			 */
			var currentMission = DataModleFactory.createMission();
			/**
			 * 当前交易物品信息数据（价格）[item数组]
			 */
			var currentItemInfo = [];
			/**
			 * 交易暂存物品集合
			 */
			var transactionItems = {
				sellItems:[],
				buyItems:[],
			};
			/**
			 * 快捷按钮
			 */
			var quickButton1;
			var quickButton2;
			var quickButton3;
			var quickButton4;
			var quickButton5;
			var quickButton6;
			var app = angular.module("myApp", []);
			app.directive('ngRightclick', function($parse) {
			    return function(scope, element, attrs) {
			        var fn = $parse(attrs.ngRightclick);
			        element.bind('contextmenu', function(event) {
			            scope.$apply(function() {
			                event.preventDefault();
			                fn(scope, {$event:event});
			            });
			        });
			    };
			});
			/*滚轮事件监听*/
			app.directive('ngMousewheel', function($parse) {
			    return function(scope, element, attrs) {
			        var fn = $parse(attrs.ngMousewheel);
			        element.bind('contextmenu', function(event) {
			            scope.$apply(function() {
			                event.preventDefault();
			                fn(scope, {$event:event});
			            });
			        });
			    };
			});
			
			var deBug$RootScope = null;
			app.controller("myApp", function($scope,$rootScope,$timeout,$interval) {
				$scope.viewDataModel = viewDataModel;
				$scope.viewControl = viewControl;
				var stop;
				$rootScope.test = function(){
					stop = $interval(function() {
						console.info("test");
					}, 70);
				};
				$rootScope.test2 = function(){
					$interval.cancel(stop);
				};
				
				$rootScope.testright = function(){
					console.info("testright");
				};
				$rootScope.testOnMousewheel = function(){
					console.info("testOnMousewheel");
				};
				
				/**
				 * 交流面板的打字效果方法
				 */
				var panelTypingSign;//全局标记，用于保持单线程运行
				var panelTypingSign2="";//全局标记，用于点击显示全部内容（需点击事件修改）
				panelTyping = function(str) {
					var i = 0;
					//修改全局sign
					panelTypingSign = Number(Math.random().toString().substr(3,length) + Date.now()).toString(36);
					var tempSign = panelTypingSign;
					panelTypingSign2="";
					function typing() {
						//判断全局sign是否修改
						if (tempSign==panelTypingSign){
							if (i <= str.length&&panelTypingSign2=="") {
								viewDataModel.panelText = str.slice(0, i++) + '_';
								$timeout(typing, 30);//递归调用
							} else {
								panelTypingSign2="";//重置
								viewDataModel.panelText = str;//结束打字,移除 _ 光标
							}
						}else{return;}
					};
					typing();
				};
				$scope.panelTypingOnClick = function(){
					panelTypingSign2="typingAll";
				};
				/**
				 * 主场景显示&数据加载
				 */
				sceneMainShow = function(str) {
					//人物交互面板(按钮组)初始数据加载
					viewDataModel.panel4.buttonElements = function (){
						return currentDomain.getInteractiveObjects();
					};
					//动态效果
					viewControl.display.sceneMainHide = false;
					$timeout(function() {
						viewControl.currentScene = "scene-main";
					}, 10);
					$timeout(function() {
						//隐藏其他场景
						viewControl.display.sceneBattleHide = true;
						viewControl.display.sceneStartHide = true;
						mainShow();
						panelTyping(str);
					}, 200);
					//动态显示开始引导文本
					//$timeout(function() {
					//}, 1000);
				};
				/**
				 * 主场景视图数据清除
				 */
				sceneMainViewDataClear = function() {
					//人物交互面板(按钮组)初始数据加载
					viewDataModel.panel4.buttonElements = function (){
						return currentDomain.getInteractiveObjects();
					};
				};
				/**
				 * 场景更新数据
				 */
				sceneMainDataLoad = function(domainData){
					//加载场景数据
					currentDomain = domainData;
				};
				//初始化
				(function () {
					//初始化数据
					sceneMainDataLoad(dataDomainsObj[0]);
				})();
			});
			
			//起始场景
			app.controller("scene-start", function($scope, $rootScope, $timeout) {
				//开始按钮
				$scope.buttonStart = function(){
					sceneMainShow(data.startText);
				};
			});
			
			app.controller("scene-main", function($scope, $rootScope, $timeout) {
				/**
				 * 获取层叠关系数组中最大值
				 */
				getMaxZIndex = function(num){
					var maxZIndex=num?num:0;
					for (var i in viewControl.zIndexList) {
						if(viewControl.zIndexList[i]&&maxZIndex<viewControl.zIndexList[i]){
							maxZIndex=viewControl.zIndexList[i];
						}
					};
					return maxZIndex;
				};
				/**
				 * 主场景所有组件显示
				 */
				mainShow = function(){
					//无需控制层叠关系
					//场景名称展示条
					viewControl.display.panel2Hide = false;
					viewControl.panel2_Style.top = 30 + "px";
					viewControl.panel2_Style.left = 5 + "px";
					viewControl.panel2_Style.opacity = 0;
					//角色信息面板
					viewControl.display.panel3Hide = false;
					viewControl.panel3_Style.top = 80 + "px";
					viewControl.panel3_Style.left = 35 + "px";
					viewControl.panel3_Style.opacity = 0;
					//人物交互面板(按钮组)
					viewControl.display.panel4Hide = false;
					viewControl.panel4_Style.opacity = 0;
					//交流信息面板(基本会一直显示)
					viewControl.display.panelHide = false;
					$timeout(function() {
						//场景名称展示条
						viewControl.panel2_Style.left = 10 + "px";
						viewControl.panel2_Style.opacity = 1;
						//角色信息面板
						viewControl.panel3_Style.left = 40 + "px";
						viewControl.panel3_Style.opacity = 1;
						//人物交互面板(按钮组)
						viewControl.panel4_Style.opacity = 1;
					}, 50);
				};
				/**
				 * 主场景所有组件隐藏
				 */
				mainHide = function(){
					//场景名称展示条
					var panel2Left = viewControl.panel2_Style.left;
					viewControl.panel2_Style.left = Number(panel2Left.substr(0,panel2Left.length-2))-5 + "px";
					viewControl.panel2_Style.opacity = 0;
					//角色信息面板
					var panel3Left = viewControl.panel3_Style.left;
					viewControl.panel3_Style.left = Number(panel3Left.substr(0,panel3Left.length-2))-5 + "px";
					viewControl.panel3_Style.opacity = 0;
					//人物交互面板(按钮组)
					viewControl.panel4_Style.opacity = 0;
					//交流信息面板(基本会一直显示)
					$timeout(function() {
						//场景名称展示条
						viewControl.display.panel2Hide = true;
						//角色信息面板
						viewControl.display.panel3Hide = true;
						//人物交互面板(按钮组)
						viewControl.display.panel4Hide = true;
					}, 200);
				};
				/**
				 * 方向盘组件 显示命令
				 */
				steeringWheelShow = function(){
					viewControl.display.steeringWheelHide = false;
					var right = viewControl.steeringWheel_Style.right;
					viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2))-20 + "px";
					viewControl.steeringWheel_Style.opacity = 0;
					$timeout(function() {
						viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2)) + "px";
						viewControl.steeringWheel_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 方向盘组件 隐藏命令 
				 */
				steeringWheelHide = function(){
					var right = viewControl.steeringWheel_Style.right;
					viewControl.steeringWheel_Style.right = Number(right.substr(0,right.length-2))-20 + "px";
					viewControl.steeringWheel_Style.opacity = 0;
					$timeout(function() {
						viewControl.display.steeringWheelHide = true;
					}, 200);
				};
				/**
				 * 列表菜单（自动大小_带箭头）显示命令（需传入点击目标）
				 */
				menuShow = function(target,model){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel4"] = maxZIndex+2;
					viewControl.zIndexList["menuAutoMaskLayer"] = maxZIndex+1;
					//控制显示菜单的动画效果
					//弹出遮罩层
					viewControl.display.menuAutoMaskLayerHide = false;
					//显示菜单
					viewControl.display.menuHide = false;
					//获取相对整个场景对象的top,left
					var tempa = document.getElementById("menuAuto").parentNode;
					var tempb = target;
					var totalTop = 0;
					var totalLeft = tempb.offsetWidth;
					if (model=="3d") {
						totalTop = target.y-65;
						totalLeft = target.x-35;
					}else{
						while (tempa!=tempb){
							totalTop += tempb.offsetTop;
							totalLeft += tempb.offsetLeft;
							tempb = tempb.parentNode;
						};
					};
					
					if(totalLeft>1150){totalLeft=1150;};
					viewControl.menu_Style.top = totalTop + "px";
					viewControl.menu_Style.left = totalLeft-20 + "px";
					viewControl.menu_Style.opacity = 0;
					viewControl.menu_Style["z-index"] = viewControl.zIndexList["panel4"];
					viewControl.menuAutoMaskLayer_Style["z-index"] = viewControl.zIndexList["menuAutoMaskLayer"];
					$timeout(function() {
						viewControl.menu_Style.left = totalLeft + "px";
						viewControl.menu_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 列表菜单（自动大小_带箭头）隐藏命令（包含动画效果和view数据清理） 
				 */
				menuHide = function(){
					//控制隐藏菜单的动画效果
					var left = viewControl.menu_Style.left;
					viewControl.menu_Style.left = (Number(left.substring(0, left.length - 2)) + 20) + "px";
					viewControl.menu_Style.opacity = 0;
					$timeout(function() {
						//数据清理
						viewDataModel.menu.buttonElements = null;
						//重置层叠
						viewControl.menu_Style["z-index"] = 0;
						viewControl.menuAutoMaskLayer_Style["z-index"] = 0;
						viewControl.zIndexList["panel4"] = 0;
						viewControl.zIndexList["menuAutoMaskLayer"] = 0;
						//隐藏遮罩层
						viewControl.display.menuAutoMaskLayerHide = true;
						//隐藏菜单
						viewControl.display.menuHide = true;
					},200);
				};
				
				/**
				 * 物品信息面板组件 显示命令
				 */
				panel3ItemInfoShow = function(){
					if(dataRoleObj[0].getStatus()=="transaction"){
						//判断为交易状态，变更显示位置
						viewControl.panel3ItemInfo_Style.top = 27 + "px";
						viewControl.panel3ItemInfo_Style.left = 475 + "px";
					}else if(dataRoleObj[0].getStatus()=="useWarehouse"){
						//判断为使用仓库，变更显示位置
						viewControl.panel3ItemInfo_Style.top = 27 + "px";
						viewControl.panel3ItemInfo_Style.left = 970 + "px";
					}else if(dataRoleObj[0].getStatus()=="useRoleBag"||dataRoleObj[0].getStatus()=="skill"){
						//判断为使用背包，变更显示位置
						viewControl.panel3ItemInfo_Style.top = 57 + "px";
						viewControl.panel3ItemInfo_Style.left = 350 + "px";
					}else if(dataRoleObj[0].getStatus()=="fight"){
						viewControl.panel3ItemInfo_Style.top = 57 + "px";
						viewControl.panel3ItemInfo_Style.left = 550 + "px";
					}else{
						viewControl.panel3ItemInfo_Style.top = 57 + "px";
						viewControl.panel3ItemInfo_Style.left = 970 + "px";
					}
					viewControl.panel3ItemInfo_Style.opacity = 0;
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel3ItemInfo"] = maxZIndex+1;
					viewControl.panel3ItemInfo_Style["z-index"] = viewControl.zIndexList["panel3ItemInfo"];
					viewControl.display.panel3ItemInfoHide = false;
					$timeout(function() {
						if(dataRoleObj[0].getStatus()=="transaction"){
							//判断为交易状态，变更显示位置
							viewControl.panel3ItemInfo_Style.top = 30 + "px";
							viewControl.panel3ItemInfo_Style.left = 475 + "px";
						}else if(dataRoleObj[0].getStatus()=="useWarehouse"){
							//判断为使用仓库，变更显示位置
							viewControl.panel3ItemInfo_Style.top = 30 + "px";
							viewControl.panel3ItemInfo_Style.left = 970 + "px";
						}else if(dataRoleObj[0].getStatus()=="useRoleBag"||dataRoleObj[0].getStatus()=="skill"){
							//判断为使用背包，变更显示位置
							viewControl.panel3ItemInfo_Style.top = 60 + "px";
							viewControl.panel3ItemInfo_Style.left = 350 + "px";
						}else if(dataRoleObj[0].getStatus()=="fight"){
							viewControl.panel3ItemInfo_Style.top = 60 + "px";
							viewControl.panel3ItemInfo_Style.left = 550 + "px";
						}else{
							viewControl.panel3ItemInfo_Style.top = 60 + "px";
							viewControl.panel3ItemInfo_Style.left = 970 + "px";
						}
						viewControl.panel3ItemInfo_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 物品信息面板组件 隐藏命令
				 */
				panel3ItemInfoHide = function(){
					//实现隐藏的动画效果
					var top = viewControl.panel3ItemInfo_Style.top;
					viewControl.panel3ItemInfo_Style.top = (Number(top.substring(0, top.length - 2)) - 5) + "px";
					$timeout(function() {
						//数据清理
						//viewDataModel.panel3ItemInfo.name = null;
						//viewDataModel.panel3ItemInfo.content = null;
						//重置层叠
						viewControl.zIndexList["panel3ItemInfo"] = 0;
						viewControl.panel3ItemInfo_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.panel3ItemInfoHide = true;
					}, 200);
				};
				
				/**
				 * 对比角色物品（装备）信息面板组件 显示命令
				 */
				panel3RoleItemInfoShow = function(){
					if(dataRoleObj[0].getStatus()=="transaction"){
						//判断为交易状态，变更显示位置
						viewControl.panel3RoleItemInfo_Style.top = 277 + "px";
						viewControl.panel3RoleItemInfo_Style.left = 475 + "px";
					}else if(dataRoleObj[0].getStatus()=="useWarehouse"){
						//判断为使用仓库，变更显示位置
						viewControl.panel3RoleItemInfo_Style.top = 277 + "px";
						viewControl.panel3RoleItemInfo_Style.left = 970 + "px";
					}else if(dataRoleObj[0].getStatus()=="useRoleBag"){
						//判断为使用背包，变更显示位置
						viewControl.panel3RoleItemInfo_Style.top = 57 + "px";
						viewControl.panel3RoleItemInfo_Style.left = 640 + "px";
					}else {
						viewControl.panel3RoleItemInfo_Style.top = 57+ "px";
						viewControl.panel3RoleItemInfo_Style.left = 900 + "px";
					}
					viewControl.panel3RoleItemInfo_Style.opacity = 0;
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel3RoleItemInfo"] = maxZIndex+1;
					viewControl.panel3RoleItemInfo_Style["z-index"] = viewControl.zIndexList["panel3RoleItemInfo"];
					viewControl.display.panel3RoleItemInfoHide = false;
					$timeout(function() {
						if(dataRoleObj[0].getStatus()=="transaction"){
							//判断为交易状态，变更显示位置
							viewControl.panel3RoleItemInfo_Style.top = 300 + "px";
							viewControl.panel3RoleItemInfo_Style.left = 475 + "px";
						}else if(dataRoleObj[0].getStatus()=="useWarehouse"){
							//判断为使用仓库，变更显示位置
							viewControl.panel3RoleItemInfo_Style.top = 300 + "px";
							viewControl.panel3RoleItemInfo_Style.left = 970 + "px";
						}else if(dataRoleObj[0].getStatus()=="useRoleBag"){
							//判断为使用背包，变更显示位置
							viewControl.panel3RoleItemInfo_Style.top = 60 + "px";
							viewControl.panel3RoleItemInfo_Style.left = 640 + "px";
						}else {
							viewControl.panel3RoleItemInfo_Style.top = 60 + "px";
							viewControl.panel3RoleItemInfo_Style.left = 900 + "px";
						}
						viewControl.panel3RoleItemInfo_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 对比角色物品（装备）信息面板组件 隐藏命令
				 */
				panel3RoleItemInfoHide = function(){
					//实现隐藏的动画效果
					var top = viewControl.panel3RoleItemInfo_Style.top;
					viewControl.panel3RoleItemInfo_Style.top = (Number(top.substring(0, top.length - 2)) - 5) + "px";
					$timeout(function() {
						//数据清理
						//重置层叠
						viewControl.zIndexList["panel3RoleItemInfo"] = 0;
						viewControl.panel3RoleItemInfo_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.panel3RoleItemInfoHide = true;
					}, 200);
				};
				
				/**
				 * 仓库组件 显示命令(同时打开包裹组件)
				 */
				panel5Show = function(model){
					//隐藏主场景
					mainHide();
					var panel5Left=0;
					var menuBagLeft=0;
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["panel5"] = maxZIndex+2;
					viewControl.zIndexList["menuBag"] = maxZIndex+2;
					viewControl.zIndexList["panel5MaskLayer"] = maxZIndex+1;
					viewControl.zIndexList["panel"] = maxZIndex+2;
					
					viewControl.panel5_Style["z-index"] = viewControl.zIndexList["panel5"];
					viewControl.menu_bag_Style["z-index"] = viewControl.zIndexList["menuBag"];
					viewControl.panel5MaskLayer_Style["z-index"] = viewControl.zIndexList["panel5MaskLayer"];
					viewControl.panel_Style["z-index"] = viewControl.zIndexList["panel"];
					//判断为交易状态，增加交易面板显示
					if(model&&model=="transaction"){
						panel5Left+=320;
						menuBagLeft-=90;
						viewControl.zIndexList["transactionPanel"] = maxZIndex+1;
						viewControl.transactionPanel_Style["z-index"] = viewControl.zIndexList["transactionPanel"];
						viewControl.display.transactionPanelHide = false;
						viewControl.transactionPanel_Style.top = 75 + "px";
						viewControl.transactionPanel_Style.opacity = 0;
					}
					//弹出遮罩层
					viewControl.display.panel5MaskLayerHide = false;
					
					viewControl.display.panel5Hide = false;
					viewControl.panel5_Style.left = 500 +panel5Left+ "px";
					viewControl.panel5_Style.opacity = 0;
					//同时打开包
					viewControl.display.menuBagHide = false;
					viewControl.menu_bag_Style.left = 55 +menuBagLeft+ "px";
					viewControl.menu_bag_Style.opacity = 0;
					$timeout(function() {
						//判断为交易状态，增加交易面板显示
						if(model&&model=="transaction"){
							viewControl.transactionPanel_Style.top = 80 + "px";
							viewControl.transactionPanel_Style.opacity = 1;
						}
						viewControl.panel5_Style.left = 450 +panel5Left+ "px";
						viewControl.panel5_Style.opacity = 1;
						//包
						viewControl.menu_bag_Style.left = 60 +menuBagLeft+ "px";
						viewControl.menu_bag_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 仓库组件 隐藏命令(同时隐藏包裹组件)（包含动画效果和view数据清理） 
				 */
				panel5Hide = function(){
					//实现隐藏菜单（包裹）的动画效果
					var left = viewControl.menu_bag_Style.left;
					viewControl.menu_bag_Style.left = (Number(left.substring(0, left.length - 2)) - 50) + "px";
					viewControl.menu_bag_Style.opacity = 0;
					//实现隐藏仓库组件的动画效果
					left = viewControl.panel5_Style.left;
					viewControl.panel5_Style.left = (Number(left.substring(0, left.length - 2)) + 50) + "px";
					viewControl.panel5_Style.opacity = 0;
					//实现角色信息面板2的动画效果
					left = viewControl.panel3_Style2.left;
					viewControl.panel3_Style2.left = (Number(left.substring(0, left.length - 2)) + 30) + "px";
					viewControl.panel3_Style2.opacity = 0;
					//无论是否为交易状态，一并增加隐藏交易面板动画效果，重置角色状态
					viewControl.transactionPanel_Style.opacity = 0;
					dataRoleObj[0].setStatus("");
					dataRoleObj[0].setStatus2("");
					$timeout(function() {
						//避免操作过快，信息面板未隐藏
						panel3ItemInfoHide();
						panel3RoleItemInfoHide();
						
						//仓库组件 数据清理
						viewDataModel.panel5.buttonElements = null;
						viewDataModel.panel5.tittleText = null;
						//包裹数据清理(暂不需要)
						//重置层叠
						viewControl.zIndexList["panel5"] = 0;
						viewControl.zIndexList["menuBag"] = 0;
						viewControl.zIndexList["panel5MaskLayer"] = 0;
						viewControl.zIndexList["panel"] = 0;
						viewControl.zIndexList["panel3-2"] = 0;
						viewControl.panel5_Style["z-index"] = 0;
						viewControl.menu_bag_Style["z-index"] = 0;
						viewControl.panel5MaskLayer_Style["z-index"] = 0;
						viewControl.panel_Style["z-index"] = 0;
						viewControl.panel3_Style2["z-index"] = 0;
						//隐藏组件
						viewControl.display.panel5MaskLayerHide = true;
						viewControl.display.panel5Hide = true;
						viewControl.display.menuBagHide = true;
						viewControl.display.panel3Hide = true;
						//无论是否为交易状态，一并进行交易面板的处理
						viewControl.zIndexList["transactionPanel"] = 0;
						viewControl.transactionPanel_Style["z-index"] = 0;
						viewControl.display.transactionPanelHide = true;
						//无论是否为交易状态，一并进行交易面板的数据处理
						//待售出退回到角色包
						var roleItems = dataRoleObj[0].getItems();
						var flag = false;
						for (var j=0; j < transactionItems.sellItems.length;j) {
							var sellItem = transactionItems.sellItems[j];
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==sellItem.getName()&&roleItems[i].getType()==sellItem.getType()&&roleItems[i].getContent()==sellItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+sellItem.getTotalNum());
									flag = true;
								}
							};
							if(!flag){
								//遍历完成，未发现同一物品，复制出一个物品对象
								var item_Obj = DataModleFactory.createItem();
								copyBean(sellItem,item_Obj);
								//存入角色包
								dataRoleObj[0].addItem(item_Obj);
							}
							//从交易面板数据中移除
							transactionItems.sellItems.shift();
							flag = false;
						}
						//待购入退回至交互对象(判断存在当前交互对象)
						if(currentInteractiveObject&&currentInteractiveObject.getItems){
							var interactiveObjectItems = currentInteractiveObject.getItems();
							var flag = false;
							for (var j=0; j < transactionItems.buyItems.length;j) {
								var buyItem = transactionItems.buyItems[j];
								for (var i=0; i < interactiveObjectItems.length; i++) {
									if(interactiveObjectItems[i].getName()==buyItem.getName()&&interactiveObjectItems[i].getType()==buyItem.getType()&&interactiveObjectItems[i].getContent()==buyItem.getContent()){
										//遍历后发现同一物品,叠加数量
										interactiveObjectItems[i].setTotalNum(interactiveObjectItems[i].getTotalNum()+buyItem.getTotalNum());
										flag = true;
									}
								};
								if(!flag){
									//遍历完成，未发现同一物品，复制出一个物品对象
									var item_Obj = DataModleFactory.createItem();
									copyBean(buyItem,item_Obj);
									//存入交互对象
									currentInteractiveObject.addItem(item_Obj);
								}
								//从交易面板数据中移除
								transactionItems.buyItems.shift();
								flag = false;
							}
						}
						//交易流程完成，清空当前交互对象
						currentInteractiveObject = null;
						mainShow();
					}, 200);
				};
				
				/**
				 * 数字选择器  显示命令（需传入top left）
				 */
				numberPickerShow = function(top,left){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["numberPicker"] = maxZIndex+2;
					viewControl.zIndexList["numberPickerMaskLayer"] = maxZIndex+1;
					
					viewControl.numberPicker_Style["z-index"] = viewControl.zIndexList["numberPicker"];
					viewControl.numberPickerMaskLayer_Style["z-index"] = viewControl.zIndexList["numberPickerMaskLayer"];
					
					//弹出遮罩层
					viewControl.display.numberPickerMaskLayerHide = false;
					
					viewControl.display.numberPickerHide = false;
					viewControl.numberPicker_Style.top = top + "px";
					viewControl.numberPicker_Style.left = left + "px";
					viewControl.numberPicker_Style.opacity = 0;
					$timeout(function() {
						viewControl.numberPicker_Style.opacity = 1;
					}, 100);
				};
				/**
				 * 数字选择器 隐藏命令（包含动画效果和view数据清理） 
				 */
				numberPickerHide = function(){
					viewControl.numberPicker_Style.opacity = 0;
					$timeout(function() {
						//重置计数
						viewDataModel.numberPicker.number = 1;
						//重置层叠
						viewControl.zIndexList["numberPicker"] = 0;
						viewControl.zIndexList["numberPickerMaskLayer"] = 0;
						viewControl.numberPicker_Style["z-index"] = 0;
						viewControl.numberPickerMaskLayer_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.numberPickerMaskLayerHide = true;
						viewControl.display.numberPickerHide = true;
					}, 100);
				};
				
				
				/**
				 * 确认对话框 显示命令
				 */
				confirmPanleShow = function(){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["confirmPanle"] = maxZIndex+2;
					viewControl.zIndexList["confirmPanleMaskLayer"] = maxZIndex+1;
					viewControl.confirmPanle_Style["z-index"] = viewControl.zIndexList["confirmPanle"];
					viewControl.confirmPanleMaskLayer_Style["z-index"] = viewControl.zIndexList["confirmPanleMaskLayer"];
					
					//弹出遮罩层
					viewControl.display.confirmPanleMaskLayerHide = false;
					viewControl.display.confirmPanleHide = false;
					viewControl.confirmPanle_Style.opacity = 0;
					$timeout(function() {
						viewControl.confirmPanle_Style.opacity = 1;
					}, 10);
				};
				/**
				 * 确认对话框  隐藏命令
				 */
				confirmPanleHide = function(){
					//dataRoleObj[0].setStatus("");
					//dataRoleObj[0].setStatus2("");
					viewControl.confirmPanle_Style.opacity = 0;
					$timeout(function() {
						//重置层叠
						viewControl.zIndexList["confirmPanle"] = 0;
						viewControl.confirmPanle_Style["z-index"] = 0;
						viewControl.zIndexList["confirmPanleMaskLayer"] = 0;
						viewControl.confirmPanleMaskLayer_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.confirmPanleMaskLayerHide = true;
						viewControl.display.confirmPanleHide = true;
					}, 200);
				};
				
				
				/**
				 * 任务列表 显示命令
				 */
				missionSelectShow = function(){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["missionSelect"] = maxZIndex+2;
					viewControl.zIndexList["missionInfo"] = maxZIndex+2;
					viewControl.zIndexList["missionSelectMaskLayer"] = maxZIndex+1;
					viewControl.zIndexList["panel"] = maxZIndex+2;
					
					viewControl.missionSelect_Style["z-index"] = viewControl.zIndexList["missionSelect"];
					viewControl.missionInfo_Style["z-index"] = viewControl.zIndexList["missionInfo"];
					viewControl.missionSelectMaskLayer_Style["z-index"] = viewControl.zIndexList["missionSelectMaskLayer"];
					viewControl.panel_Style["z-index"] = viewControl.zIndexList["panel"];
					//弹出遮罩层
					viewControl.display.missionSelectMaskLayerHide = false;
					
					viewControl.display.missionSelectHide = false;
					viewControl.display.missionInfoHide = false;
					viewControl.missionSelect_Style.right = 20 + "px";
					viewControl.missionSelect_Style.opacity = 0;
					viewControl.missionInfo_Style.left = 50 + "px";
					viewControl.missionInfo_Style.opacity = 0;
					$timeout(function() {
						viewControl.missionSelect_Style.right = 30 + "px";
						viewControl.missionSelect_Style.opacity = 1;
						viewControl.missionInfo_Style.left = 60 + "px";
						viewControl.missionInfo_Style.opacity = 1;
						panelTyping("查看任务...");
					}, 400);
				};
				/**
				 * 任务列表 隐藏命令
				 */
				missionSelectHide = function(){
					viewControl.missionSelect_Style.opacity = 0;
					var right = viewControl.missionSelect_Style.right;
					viewControl.missionSelect_Style.right = (Number(right.substring(0, right.length - 2)) - 10) + "px";
					viewControl.missionInfo_Style.opacity = 0;
					var left = viewControl.missionInfo_Style.left;
					viewControl.missionInfo_Style.left = (Number(left.substring(0, left.length - 2)) - 10) + "px";
					currentMission = DataModleFactory.createMission();
					$timeout(function() {
						//重置层叠
						viewControl.zIndexList["missionSelect"] = 0;
						viewControl.missionSelect_Style["z-index"] = 0;
						viewControl.zIndexList["missionSelectMaskLayer"] = 0;
						viewControl.missionSelectMaskLayer_Style["z-index"] = 0;
						viewControl.zIndexList["missionInfo"] = 0;
						viewControl.missionInfo_Style["z-index"] = 0;
						viewControl.zIndexList["panel"] = 0;
						viewControl.panel_Style["z-index"] = 0;
						//隐藏组件
						viewControl.display.missionSelectMaskLayerHide = true;
						viewControl.display.missionSelectHide = true;
						viewControl.display.missionInfoHide = true;
						mainShow();
						panelTyping("");
					}, 200);
				};
				
				
				/**
				 * 地图交互对象按钮组 显示效果
				 */
				map3dButtonsShow = function(){
					for (var i=1; i < 17; i++) {
						var scale = viewControl["map3dButton"+i+"_Style"].transform.match(/scale\([-]*[0-9]*[.]*[0-9]*\)/)[0];
						viewControl["map3dButton"+i+"_Style"].transform = viewControl["map3dButton"+i+"_Style"].transform.replace(scale,"scale(0)");
						viewControl["map3dButton"+i+"_Style"]["transition-timing-function"] = "cubic-bezier(.14,1.52,.65,1.37)";
					};
					in
					$timeout(function() {
						for (var i=1; i < 17; i++) {
							var scale = viewControl["map3dButton"+i+"_Style"].transform.match(/scale\([-]*[0-9]*[.]*[0-9]*\)/)[0];
							viewControl["map3dButton"+i+"_Style"].transform = viewControl["map3dButton"+i+"_Style"].transform.replace(scale,"scale(1)");
						};
					}, 100);
					$timeout(function() {
						for (var i=1; i < 17; i++) {
							viewControl["map3dButton"+i+"_Style"].transition = ".6s";
							viewControl["map3dButton"+i+"_Style"]["transition-timing-function"] = "ease";
						};
					}, 1000);
				};
				/**
				 * 地图交互对象按钮组  隐藏命令
				 */
				/*
				map3dButtonsHide = function(){
					viewControl.map3dButton_Style. = "";
				};
				*/
				
				
				/**
				 * 展示战斗界面
				 */
				sceneFightShow = function(){
					//标记角色状态为战斗状态
					dataRoleObj[0].setStatus("fight");
					//场景切换,动态效果
					viewControl.display.sceneBattleHide = false;
					$timeout(function() {
						viewControl.currentScene = "scene-battle";
					}, 10);
					$timeout(function() {
						//隐藏其他场景
						viewControl.display.sceneMainHide = true;
						viewControl.display.sceneStartHide = true;
						mainShow();
						//panelTyping(data.startText);
					}, 200);
					//显示角色战斗状态信息面板
					
				};
				/**
				 * 隐藏战斗界面
				 */
				sceneFightHide = function(str){
					//标记角色状态
					dataRoleObj[0].setStatus("");
					//场景切换,动态效果
					viewControl.display.sceneMainHide = false;
					$timeout(function() {
						viewControl.currentScene = "scene-main";
					}, 10);
					$timeout(function() {
						viewControl.display.sceneBattleHide = true;
						viewControl.display.sceneStartHide = true;
						//隐藏其他场景
						mainShow();
						panelTyping(str);
					}, 200);
				};
			});

			//人物交互面板
			app.controller("panel4", function($scope, $rootScope, $timeout) {
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//处理传入对象，判断 class= button2
					var tempt = $event.target.parentNode;
					while("button2"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为交互对象
					viewControl.currentInteractiveType = "interactiveObject";
					//传入点击目标（用于定位），显示列表菜单
					menuShow($event,"3d");
					//标记当前交互对象
					currentInteractiveObject = currentDomain.getInteractiveObject(index);
					//加载交互对象动作数据
					viewDataModel.menu.buttonElements = function () {
						return currentInteractiveObject.getActions();
					};
					//viewDataModel.menu.tittleText = currentInteractiveObject.getName();
				};
				
				
				var dragRotateFn;
				$scope.dragRotate = function($event){
					//记录原始鼠标地址
					var mouseX = $event.x;
					var mouseY = $event.y;
					dragRotateFn = function (ev) {
						//获取原始rotateZ
						var numZ = Number(viewControl.map3dFloor_Style.transform.match(/rotateZ\([-]*[0-9]*/)[0].substring(8));
						var numY = Number(viewControl.map3dFloor_Style.transform.match(/rotateX\([-]*[0-9]*/)[0].substring(8));
						var temp = (mouseX - ev.x)*0.5+numZ;
						var temp2 = (mouseY - ev.y)*0.5+numY;
						if (temp2<30) {
							temp2=30;
						} else if(temp2>70){
							temp2=70;
						};
						//记录变动后的mouseX
						mouseX = ev.x;
						mouseY = ev.y;
						viewControl.map3dFloor_Style.transform = "rotateX("+temp2+"deg) rotateZ("+temp+"deg)";
						for (var i=1; i < 17; i++) {
							var rotateZ = viewControl["map3dButton"+i+"_Style"].transform.match(/rotateZ\([-]*[0-9]*[.]*[0-9]*/)[0];
							var rotateX = viewControl["map3dButton"+i+"_Style"].transform.match(/rotateX\([-]*[0-9]*[.]*[0-9]*/)[0];
							viewControl["map3dButton"+i+"_Style"].transform = viewControl["map3dButton"+i+"_Style"].transform.replace(rotateZ,"rotateZ("+(-temp));
							viewControl["map3dButton"+i+"_Style"].transform = viewControl["map3dButton"+i+"_Style"].transform.replace(rotateX,"rotateX("+(-temp2));
						};
						$scope.$apply();
					};
					//判断是右键按下
					if ($event.button==2) {
						//绑定事件，鼠标移动时变化style
						document.getElementById("map3D").addEventListener("mousemove",dragRotateFn);
					};
				};
				$scope.dragRotateStop = function(){
					//解绑事件
					document.getElementById("map3D").removeEventListener("mousemove",dragRotateFn);
				};
			});
			
			//交互动作菜单
			app.controller("menu", function($scope, $rootScope,$timeout) {
				//点击某个交互动作
				$scope.menulistClick = function(index,$event){
					//获取交互动作
					if ("interactiveObject"==viewControl.currentInteractiveType){
						currentAction = currentInteractiveObject.getActions()[index];
					}else if("item"==viewControl.currentInteractiveType){
						currentAction = currentItem.getActions(dataRoleObj[0].getStatus())[index];
					}else{
						return;
					}
					/*---------交互对象操作动作--------*/
					var flag=false;
					if(currentAction.getType()=="talk"){
						flag=true;
						//判断为对话
						var typingContent = currentAction.getContent();
						//任务校验
						//获取进行中任务
						var tempMissions = dataRoleObj[0].getMissions(MISSION.STATUS.ongoing);
						if(tempMissions.length>0){
							//遍历进行中任务
							for (var i=0; i < tempMissions.length; i++) {
								var tempInteractiveObjects = tempMissions[i].getCompleteInteractiveObjects();
								if(tempInteractiveObjects.length>0){
									//遍历任务包含的对象
									for (var i=0; i < tempInteractiveObjects.length; i++) {
										//判断是否有对话,且未完成
										if(tempInteractiveObjects[i].getCompleteTalk()==false){
											//判断当前交互对象和任务对象是否是同一对象
											if(compareInteractiveObject(currentInteractiveObject,tempInteractiveObjects[i])){
												//读取任务对话，没有则不读取
												if(tempInteractiveObjects[i].getCompleteTalkContent()!=""){
													typingContent=tempInteractiveObjects[i].getCompleteTalkContent();
												};
												//重新校验该任务完成情况
												dataRoleObj[0].checkMissions();
												break;
											};
										}
									};
								}
							};
						}
						
						panelTyping(typingContent);
						//对话动作完成，清空当前交互动作
						currentAction = null;
						//对话动作完成，清空当前交互对象
						//currentInteractiveObject = null;清空会报错
					}else if(currentAction.getType()=="move"){
						flag=true;
						//判断为移动，场景切换
						sceneMainViewDataClear();//视图数据清除
						//读取到移动目标(即signId)
						currentAction.getTarget();
						//读取坐标
						currentAction.getTargetX();
						currentAction.getTargetY();
						//判断是大地图 或是 公开场景
						if(currentAction.getTarget().substring(0,3)=="map"){//截取到map开头，则是大地图模式
							//遍历判断所有大地图
							for (var i=0; i < mapDomainsObj.length; i++) {
								//判断是目标大地图
								if(mapDomainsObj[i][0].getSignId()==currentAction.getTarget()){
									//记录当前大地图
									currentMapDomains = mapDomainsObj[i];
									//遍历该大地图中区域domain对象
									for (var i1=0; i1 < mapDomainsObj[i].length; i1++) {
										//判断区域domain对象坐标
										if(mapDomainsObj[i][i1].getX()==currentAction.getTargetX()&&mapDomainsObj[i][i1].getY()==currentAction.getTargetY()){
											//读取区域数据
											sceneMainDataLoad(mapDomainsObj[i][i1]);
											panelTyping(currentAction.getContent());
											break;
										}
									};
									break;
								}
							};
							//展示方向盘
							steeringWheelShow();
						}else{
							for (var i=0; i < dataDomainsObj.length; i++) {
								if (currentAction.getTarget()==dataDomainsObj[i].getSignId()) {
									//读取区域数据
									sceneMainDataLoad(dataDomainsObj[i]);
									panelTyping(currentAction.getContent());
									break;
								};
							};
							//隐藏方向盘
							steeringWheelHide();
						}
						//移动动作完成，清空当前交互动作
						currentAction = null;
						//任务校验
						//获取进行中任务
						var tempMissions = dataRoleObj[0].getMissions(MISSION.STATUS.ongoing);
						if(tempMissions.length>0){
							//遍历进行中任务
							for (var i=0; i < tempMissions.length; i++) {
								var tempDomains = tempMissions[i].getCompleteDomains();
								if (tempDomains.length>0) {
									//遍历任务包含的场景
									for (var i=0; i < tempDomains.length; i++) {
										//判断是否有到达条件,且未完成
										if(tempDomains[i].getArrive()==false){
											//判断当前到达场景和任务场景是否是同一场景对象
											if(compareDomain(currentDomain,tempDomains[i])){
												//将该任务属性修改为已到达
												tempDomains[i].setArrive(true);
												//重新校验该任务完成情况
												dataRoleObj[0].checkMissions();
												break;
											}
										}
									}
								};
							}
						}
						//移动动作完成，清空当前交互对象
						//currentInteractiveObject = null;清空会报错
					}else if(currentAction.getType()=="useWarehouse"){
						flag=true;
						//判断为打开仓库动作
						panelTyping(currentAction.getContent());
						//加载仓库数据
						viewDataModel.panel5.buttonElements = function () {
							return currentInteractiveObject.getItems();
						};
						viewDataModel.panel5.tittleText =  function () {
							return currentInteractiveObject.getName();
						};
						//加载包裹数据,重新定位视图数据指针
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getItems();
						};
						panel5Show();
						//标记角色状态为使用仓库状态
						dataRoleObj[0].setStatus("useWarehouse");
						//使用建筑功能（仓库）动作完成，清空当前交互动作
						currentAction = null;
						//使用流程继续，保留当前交互对象
						currentInteractiveObject;
					}else if(currentAction.getType()=="transaction"){
						flag=true;
						//判断为打开交易动作
						panelTyping(currentAction.getContent());
						//标记角色状态为交易状态
						dataRoleObj[0].setStatus("transaction");
						//加载物品信息数据（交易价格）
						currentItemInfo = (function (){
							var tempItemInfos = [];
							(function fn (itemInfos,obj){
								if (!itemInfos) {//如果itemInfo为空，新建数组
									itemInfos = [];
								};
								//判断：1.有get方法,2.执行后获得到了itemInfos,3.itemInfos[]长度>0
								if(obj.getItemInfos&&obj.getItemInfos()!=null&&obj.getItemInfos()!=undefined&&obj.getItemInfos().length>0){
									objItemInfos = obj.getItemInfos();
									for (var i=0; i < objItemInfos.length; i++) {
										var flag = false;
										for(var j=0; j < itemInfos.length; j++){
											if(compareItem(objItemInfos[i],itemInfos[j])){
												flag = true;//标记为已有
												break;
											}
										}
										if(flag){//判断itemInfo中是否已有,有则跳过继续下一个循环
											continue;
										}
										//进行深度复制
										var tempItemInfo = DataModleFactory.createItemInfo();
										copyBean(objItemInfos[i],tempItemInfo);
										itemInfos.push(tempItemInfo);
									}
								}
								//最后判断是否有父对象
								if(obj.supper!=null&&obj.supper!=undefined){
									//有父对象则递归
									fn(itemInfos,obj.supper);
								}else{//没有父对象则读取全局数据写入
									for (var i=0; i < publicItemInfo.length; i++) {
										var flag = false;
										for(var j=0; j < itemInfos.length; j++){
											if(compareItem(publicItemInfo[i],itemInfos[j])){
												flag = true;//标记为已有
												break;
											}
										}
										if(flag){//判断itemInfo中是否已有,有则跳过继续下一个循环
											continue;
										}
										//进行深度复制
										var tempItemInfo = DataModleFactory.createItemInfo();
										copyBean(publicItemInfo[i],tempItemInfo);
										itemInfos.push(tempItemInfo);
									}
								}
							})(tempItemInfos,currentInteractiveObject);
							return tempItemInfos;
						})();
						//加载当前交互对象的物品数据
						viewDataModel.panel5.buttonElements = function () {
							return currentInteractiveObject.getItems();
						};
						viewDataModel.panel5.tittleText =  function () {
							return currentInteractiveObject.getName();
						};
						//加载包裹数据,重新定位视图数据指针
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getItems();
						};
						//加载交易面板数据，初始为空
						//viewDataModel.transactionPanel.sellButtonElements = function(){return {};},
						//viewDataModel.transactionPanel.buyButtonElements = function(){return {};},
						panel5Show("transaction");
						//标记角色状态为交易状态
						dataRoleObj[0].setStatus("transaction");
						//打开交易动作完成，清空当前交互动作
						currentAction = null;
						//交易流程继续，保留当前交互对象
						currentInteractiveObject;
					}else if(currentAction.getType()==ACTION.TYPE.fight){
						flag=true;
						//判断为开始战斗
						mainHide();
						sceneMainViewDataClear();
						sceneFightShow();
					}else if(currentAction.getType()==ACTION.TYPE.mission){
						//alert("任务");
						flag=true;
						viewDataModel.missionSelect.elements=function(){
							//只读取  可接取:accept|进行中:ongoing|可交付:deliverable
							if (currentInteractiveObject!=null){
								var missionArray = currentInteractiveObject.getMissions(
									MISSION.STATUS.accept
									,MISSION.STATUS.ongoing
									,MISSION.STATUS.deliverable);
								return missionArray;
							}else{
								return null;
							}
						};
						mainHide();
						missionSelectShow();
					}
					/*---------物品操作动作--------*/
					else if(currentAction.getType()==ACTION.TYPE.split){
						flag=true;
						//判断为交易,重新定位视图数据指针
						viewDataModel.numberPicker.number = currentItem.getTotalNum();
						//打开数字选择器
						numberPickerShow(document.getElementById("menuAuto").offsetTop,document.getElementById("menuAuto").offsetLeft);
						//动作继续，不清空当前交互动作
						currentAction;
						//交易流程继续，保留当前交互对象
						currentInteractiveObject;
					}else if(currentAction.getType()==ACTION.TYPE.useConsumable){
						flag=true;
						//判断为使用(物品/消耗品)
						if(currentItem.getType2()==ITEM.TYPE.reusingConsumable){
							//判断第二类型为可复用,数量不减少
						}else{
							//数量-1
							currentItem.setTotalNum(currentItem.getTotalNum()-1);
							if(currentItem.getTotalNum()<1){
								dataRoleObj[0].delItem(currentItem);
							}
						}
						//执行使用效果
						//获取物品属性
						var tempAttr = currentItem.getAttr();
						if(tempAttr!=undefined&&tempAttr!=null){
							roleSettlement(tempAttr);
							/*
							//判断有hpPercent，则按百分比增加角色HP
							if("hpPercent" in tempAttr&&tempAttr.hpPercent!=undefined&&tempAttr.hpPercent!=null&&typeof Number(tempAttr.hpPercent) == "number"){
								dataRoleObj[0].setHp(dataRoleObj[0].getHp()+(dataRoleObj[0].getHp()*Number(tempAttr.hpPercent)));
							}
							//判断有hp，则增加角色HP
							if("hp" in tempAttr&&tempAttr.hp!=undefined&&tempAttr.hp!=null&&typeof Number(tempAttr.hp) == "number"){
								dataRoleObj[0].setHp(dataRoleObj[0].getHp()+Number(tempAttr.hp));
							}
							*/
						}
						//添加buff
						var tempBuffs = currentItem.getBuffs();//tempBuff 为  array
						if(tempBuffs&&tempBuffs!=undefined&&tempBuffs!=null&&tempBuffs.length>0){//判断有buff
							for (var i=0; i < tempBuffs.length; i++) {
								//复制一个buff对象，存入
								var tempBuff = copyBuff(tempBuffs[i]);
								dataRoleObj[0].addBuff(tempBuff);
							};
						};
					//}else if(currentAction.getType()==ACTION.TYPE.useUnConsumable){
						//判断为使用(物品/非消耗品)
						//执行使用效果
					}else if(currentAction.getType()==ACTION.TYPE.putOn){
						flag=true;
						//判断为穿上装备
						//获取当前hp的百分比
						var hpPercent = dataRoleObj[0].getHp()/dataRoleObj[0].getMaxHp();
						
						var tempItems = dataRoleObj[0].getItems();
						for (var i=0; i < tempItems.length; i++) {
							//遍历所有相同部位装备，并标记为卸下
							if(tempItems[i].getType2()==currentItem.getType2()){
								tempItems[i].setIsPutOn(false);
							}
						};
						currentItem.setIsPutOn(true);
						//按百分比重新计算当前hp
						dataRoleObj[0].setHp(dataRoleObj[0].getMaxHp()*hpPercent);
					}else if(currentAction.getType()==ACTION.TYPE.takeOff){
						flag=true;
						//获取当前hp的百分比
						var hpPercent = dataRoleObj[0].getHp()/dataRoleObj[0].getMaxHp();
						//判断为卸下装备
						currentItem.setIsPutOn(false);
						//按百分比重新计算当前hp
						dataRoleObj[0].setHp(dataRoleObj[0].getMaxHp()*hpPercent);
					}
					/*-------------使用技能-------------*/
					else if(currentAction.getType()==ACTION.TYPE.useSkill){
						flag=true;
						//获取当前技能
						var activeObjHpChange = 0;
						var activeObjEpChange = 0;
						var tempAttr = currentItem.getAttr();
						
						//如果消耗ep,计算ep是否足够
						if("epRecovery" in tempAttr
							&& typeof Number(tempAttr.epRecovery)=="number" 
							&& typeof !isNaN(Number(tempAttr.epRecovery))
							&& Number(tempAttr.epRecovery)!=0
							&& (Number(dataRoleObj[0].getEp())+Number(tempAttr.epRecovery))<0){
								//判断为ep不足
								panelTyping("ep不足,无法使用技能.");
						}else{
							if(tempAttr&&tempAttr!=undefined&&tempAttr!=null){
								//maxHp(百分比)恢复值
								if(SKILL.ATTR.hpRecoveryMaxHpPercent in tempAttr){
									activeObjHpChange+=dataRoleObj[0].getMaxHp()*tempAttr.hpRecoveryMaxHpPercent;
								}
								//当前hp(百分比)恢复值
								if(SKILL.ATTR.hpRecoveryPercent in tempAttr){
									activeObjHpChange+=dataRoleObj[0].getHp()*tempAttr.hpRecoveryPercent;
								}
								//hp直接恢复值
								if(SKILL.ATTR.hpRecovery in tempAttr){
									activeObjHpChange+=tempAttr.hpRecovery;
								}
								//maxEp(百分比)恢复值
								if(SKILL.ATTR.epRecoveryMaxEpPercent in tempAttr){
									activeObjEpChange+=dataRoleObj[0].getMaxEp()*tempAttr.epRecoveryMaxEpPercent;
								}
								//当前ep(百分比)恢复值
								if(SKILL.ATTR.epRecoveryPercent in tempAttr){
									activeObjEpChange+=dataRoleObj[0].getEp()*tempAttr.epRecoveryPercent;
								}
								//ep直接恢复值
								if(SKILL.ATTR.epRecovery in tempAttr){
									activeObjEpChange+=tempAttr.epRecovery;
								}
							}
							dataRoleObj[0].setHp(dataRoleObj[0].getHp()+activeObjHpChange);
							dataRoleObj[0].setEp(dataRoleObj[0].getEp()+activeObjEpChange);
						}
					}
					if(flag){//如果是不可使用的按钮，则不隐藏菜单
						//隐藏菜单
						menuHide();
					}
				};
			});

			//列表菜单:包裹 组件
			app.controller("menuBag", function($scope, $rootScope,$timeout) {
				$rootScope.menulistHover = function(index,pram) {
					//角色物品数组集合
					var roleItems = dataRoleObj[0].getItems(dataRoleObj[0].getStatus2());
					if(pram=="skill"){//判断为加载角色技能
						if(dataRoleObj[0].getStatus()=="fight"){
							roleItems = dataRoleObj[0].getSkills("active");
						}else{
							roleItems = dataRoleObj[0].getSkills();
						}
					}else if(dataRoleObj[0].getStatus()=="fight"){
						roleItems = dataRoleObj[0].getItems("useRoleBag-Consumable");
					}
					//标记当前交互（物品）对象
					currentItem = roleItems[index];
					$timeout(function() {
						//显示物品信息面板
						panel3ItemInfoShow();
						//判断为装备,增加对比信息面板显示
						if(currentItem.getType()==ITEM.TYPE.equip){
							//遍历角色物品集合
							for (var i=0; i < roleItems.length; i++) {
								//判断：1.已装备;2.和当前交互物品为同一类型装备
								if (roleItems[i].getIsPutOn() && roleItems[i].getType2()==currentItem.getType2()){
									//将数据写入视图
									viewDataModel.panel3RoleItemInfo.name = function () {
										if(roleItems[i]&&roleItems[i].getName){
											if(roleItems[i].getName()||roleItems[i].getName()==""){
												viewControl.display.panel3RoleItemInfoNameHide=false;
											}else{
												viewControl.display.panel3RoleItemInfoNameHide=true;
											}
											return roleItems[i].getName();
										}
									};
									viewDataModel.panel3RoleItemInfo.content = function () {
										if(roleItems[i]&&roleItems[i].getContent){
											if(roleItems[i].getContent()||roleItems[i].getContent()==""){
												viewControl.display.panel3RoleItemInfoContentHide=false;
											}else{
												viewControl.display.panel3RoleItemInfoContentHide=true;
											}
											return roleItems[i].getContent();
										}
									};
									viewDataModel.panel3RoleItemInfo.attrExplain = function(pram){
										if(roleItems[i]&&roleItems[i].getAttr){
											if(roleItems[i].getAttr()){
												if(pram in currentItem.getAttr()
													&& typeof Number(currentItem.getAttr()[pram])=="number" 
													&& typeof !isNaN(Number(currentItem.getAttr()[pram]))
													&& Number(currentItem.getAttr()[pram])!=0){
													if(pram=="maxHpPercent"){
														if(currentItem.getType()==ITEM.TYPE.equip){
															return "HP最大值增加";
														}else{
															return "恢复HP最大值";
														}
													}
												}
											}
										}
									};
									viewDataModel.panel3RoleItemInfo.attr = function (pram) {
										if(roleItems[i]&&roleItems[i].getAttr
											&&roleItems[i].getAttr()
											&&pram in roleItems[i].getAttr()
											&& typeof Number(roleItems[i].getAttr()[pram])=="number" 
											&& typeof !isNaN(Number(roleItems[i].getAttr()[pram]))
											&& Number(roleItems[i].getAttr()[pram])!=0){
											if(pram=="epRecovery"){
												viewControl.display.panel3RoleItemInfoEpRecoveryHide = false;
												return roleItems[i].getAttr().epRecovery;
											}else if(pram=="epRecoveryPercent"){
												viewControl.display.panel3RoleItemInfoEpRecoveryPercentHide = false;
												return parseInt(roleItems[i].getAttr().epRecoveryPercent*100)+"%";
											}else if(pram=="epRecoveryMaxEpPercent"){
												viewControl.display.panel3RoleItemInfoEpRecoveryMaxEpPercentHide = false;
												return parseInt(roleItems[i].getAttr().epRecoveryMaxEpPercent*100)+"%";
											}else if(pram=="maxEp"){
												viewControl.display.panel3RoleItemInfoMaxEpHide = false;
												return roleItems[i].getAttr().maxEp;
											}else if(pram=="maxEpPercent"){
												viewControl.display.panel3RoleItemInfoMaxEpPercentHide = false;
												return parseInt(roleItems[i].getAttr().maxEpPercent*100)+"%";
											}else if(pram=="hpRecovery"){
												viewControl.display.panel3RoleItemInfoHpRecoveryHide = false;
												return roleItems[i].getAttr().hpRecovery;
											}else if(pram=="hpRecoveryPercent"){
												viewControl.display.panel3RoleItemInfoHpRecoveryPercentHide = false;
												return parseInt(roleItems[i].getAttr().hpRecoveryPercent*100)+"%";
											}else if(pram=="hpRecoveryMaxHpPercent"){
												viewControl.display.panel3RoleItemInfoHpRecoveryMaxHpPercentHide = false;
												return parseInt(roleItems[i].getAttr().hpRecoveryMaxHpPercent*100)+"%";
											}else if(pram=="maxHp"){
												viewControl.display.panel3RoleItemInfoMaxHpHide = false;
												return roleItems[i].getAttr().maxHp;
											}else if(pram=="maxHpPercent"){
												viewControl.display.panel3RoleItemInfoMaxHpPercentHide = false;
												return parseInt(roleItems[i].getAttr().maxHpPercent*100)+"%";
											}else if(pram=="att"){
												viewControl.display.panel3RoleItemInfoAttHide = false;
												return roleItems[i].getAttr().att;
											}else if(pram=="attPercent"){
												viewControl.display.panel3RoleItemInfoAttPercentHide = false;
												return parseInt(roleItems[i].getAttr().attPercent*100)+"%";
											}else if(pram=="damage"){
												viewControl.display.panel3RoleItemInfoDamageHide = false;
												return roleItems[i].getAttr().damage;
											}else if(pram=="def"){
												viewControl.display.panel3RoleItemInfoDefHide = false;
												return roleItems[i].getAttr().def;
											}else if(pram=="defPercent"){
												viewControl.display.panel3RoleItemInfoDefPercentHide = false;
												return parseInt(roleItems[i].getAttr().defPercent*100)+"%";
											}else if(pram=="cri"){
												viewControl.display.panel3RoleItemInfoCriHide = false;
												return parseInt(roleItems[i].getAttr().cri*100)+"%";
											}else if(pram=="criPercent"){
												viewControl.display.panel3RoleItemInfoCriPercentHide = false;
												return roleItems[i].getAttr().criPercent+"倍";
											}else if(pram=="criStrike"){
												viewControl.display.panel3RoleItemInfoCriStrikeHide = false;
												return parseInt(roleItems[i].getAttr().criStrike*100)+"%";
											}else if(pram=="criStrikePercent"){
												viewControl.display.panel3RoleItemInfoCriStrikePercentHide = false;
												return roleItems[i].getAttr().criStrikePercent+"倍";
											}else if(pram=="avd"){
												viewControl.display.panel3RoleItemInfoAvdHide = false;
												return parseInt(roleItems[i].getAttr().avd*100)+"%";
											}else if(pram=="avdPercent"){
												viewControl.display.panel3RoleItemInfoAvdPercentHide = false;
												return roleItems[i].getAttr().avdPercent+"倍";
											}else if(pram=="hit"){
												viewControl.display.panel3RoleItemInfoHitHide = false;
												return parseInt(roleItems[i].getAttr().hit*100)+"%";
											}else if(pram=="hitPercent"){
												viewControl.display.panel3RoleItemInfoHitPercentHide = false;
												return roleItems[i].getAttr().hitPercent+"倍";
											}
										}else{
											if(pram=="epRecovery"){
												viewControl.display.panel3RoleItemInfoEpRecoveryHide = true;
											}else if(pram=="epRecoveryPercent"){
												viewControl.display.panel3RoleItemInfoEpRecoveryPercentHide = true;
											}else if(pram=="epRecoveryMaxEpPercent"){
												viewControl.display.panel3RoleItemInfoEpRecoveryMaxEpPercentHide = true;
											}else if(pram=="maxEp"){
												viewControl.display.panel3RoleItemInfoMaxEpHide = true;
											}else if(pram=="maxEpPercent"){
												viewControl.display.panel3RoleItemInfoMaxEpPercentHide = true;
											}else if(pram=="hpRecovery"){
												viewControl.display.panel3RoleItemInfoHpRecoveryHide = true;
											}else if(pram=="hpRecoveryPercent"){
												viewControl.display.panel3RoleItemInfoHpRecoveryPercentHide = true;
											}else if(pram=="hpRecoveryMaxHpPercent"){
												viewControl.display.panel3RoleItemInfoHpRecoveryMaxHpPercentHide = true;
											}else if(pram=="maxHp"){
												viewControl.display.panel3RoleItemInfoMaxHpHide = true;
											}else if(pram=="maxHpPercent"){
												viewControl.display.panel3RoleItemInfoMaxHpPercentHide = true;
											}else if(pram=="att"){
												viewControl.display.panel3RoleItemInfoAttHide = true;
											}else if(pram=="attPercent"){
												viewControl.display.panel3RoleItemInfoAttPercentHide = true;
											}else if(pram=="damage"){
												viewControl.display.panel3RoleItemInfoDamageHide = true;
											}else if(pram=="def"){
												viewControl.display.panel3RoleItemInfoDefHide = true;
											}else if(pram=="defPercent"){
												viewControl.display.panel3RoleItemInfoDefPercentHide = true;
											}else if(pram=="cri"){
												viewControl.display.panel3RoleItemInfoCriHide = true;
											}else if(pram=="criaPercent"){
												viewControl.display.panel3RoleItemInfoCriPercentHide = true;
											}else if(pram=="criStrike"){
												viewControl.display.panel3RoleItemInfoCriStrikeHide = true;
											}else if(pram=="criStrikePercent"){
												viewControl.display.panel3RoleItemInfoCriStrikePercentHide = true;
											}else if(pram=="avd"){
												viewControl.display.panel3RoleItemInfoAvdHide = true;
											}else if(pram=="avdPercent"){
												viewControl.display.panel3RoleItemInfoAvdPercentHide = true;
											}else if(pram=="hit"){
												viewControl.display.panel3RoleItemInfoHitHide = true;
											}else if(pram=="hitPercent"){
												viewControl.display.panel3RoleItemInfoHitPercentHide = true;
											}
										}
									};
									//显示装备对比信息面板
									panel3RoleItemInfoShow();
									break;
								}
							};
						}
					},200);
				};
				$rootScope.menulistUnHover = function() {
					//隐藏装备对比信息面板
					panel3RoleItemInfoHide();
					//隐藏物品信息面板
					panel3ItemInfoHide();
				};
				$scope.menulistClick = function($event,index) {
					//处理传入对象
					var tempt = $event.target.parentNode;
					while("menu-list ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					if("skill"==dataRoleObj[0].getStatus()){
						currentItem = dataRoleObj[0].getSkills()[index];
					}else{
						currentItem = dataRoleObj[0].getItems(dataRoleObj[0].getStatus2())[index];
					}
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						if("useRoleBag"==dataRoleObj[0].getStatus()){
							//判断是状态为打开背包，去掉堆叠选项显示
							return currentItem.getActions("useRoleBag");
						}else if("transaction"==dataRoleObj[0].getStatus()){
							//判断是状态为交易，仅堆叠选项显示
							return currentItem.getActions("transaction");
						}else if("useWarehouse"==dataRoleObj[0].getStatus()){
							//判断是状态为使用仓库，仅堆叠选项显示
							return currentItem.getActions("useWarehouse");
						}else if("skill"==dataRoleObj[0].getStatus()){
							//判断是状态为查看技能
							return currentItem.getActions();
						}
						return currentItem.getActions();
					};
				};
			});
			
			//仓库组件
			app.controller("panel5", function($scope, $rootScope,$timeout) {
				$scope.menulistHover = function(index) {
					$timeout(function() {
						//角色物品数组集合
						var roleItems = dataRoleObj[0].getItems(dataRoleObj[0].getStatus2());
						//标记当前交互（物品）对象
						currentItem = currentInteractiveObject.getItem(index);
						//显示物品信息面板
						panel3ItemInfoShow();
						//判断为装备,增加对比信息面板显示
						if(currentItem.getType()==ITEM.TYPE.equip){
							//遍历角色物品集合
							for (var i=0; i < roleItems.length; i++) {
								//判断：1.已装备;2.和当前交互物品为同一类型装备
								if (roleItems[i].getIsPutOn() && roleItems[i].getType2()==currentItem.getType2()){
									//将数据写入视图
									viewDataModel.panel3RoleItemInfo.name = function(){
										return roleItems[i].getName();
									};
									viewDataModel.panel3RoleItemInfo.content = function(){
										return roleItems[i].getContent();
									};
									//显示装备对比信息面板
									panel3RoleItemInfoShow();
									break;
								}
							};
						}
					},200);
				};
				$scope.menulistUnHover = function() {
					//隐藏装备对比信息面板
					panel3RoleItemInfoHide();
					//隐藏物品信息面板
					panel3ItemInfoHide();
				};
				//点击某个交互对象
				$scope.onClick = function($event,index) {
					//处理传入对象，判断 class= button2
					var tempt = $event.target.parentNode;
					while("button2 ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					currentItem = currentInteractiveObject.getItem(index);
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						return currentItem.getActions();
					};
					//viewDataModel.menu.tittleText = currentItem.getName();
				};
			});
			
			//交易面板组件
			app.controller("transactionPanel", function($scope, $rootScope,$timeout) {
				$scope.sellsClick = function($event,index) {
					//处理传入对象
					var tempt = $event.target.parentNode;
					while("button2 ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					currentItem = transactionItems.sellItems[index];
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						return currentItem.getActions();
					};
				};
				$scope.buysClick = function($event,index) {
					//处理传入对象
					var tempt = $event.target.parentNode;
					while("button2 ng-scope"!=tempt.className){
						tempt = tempt.parentNode;
					}
					//标记交互类型为物品
					viewControl.currentInteractiveType = "item";
					//传入点击目标（用于定位），显示列表菜单
					menuShow(tempt);
					//标记当前交互（物品）对象
					currentItem = transactionItems.buyItems[index];
					//加载交互对象动作数据（同步至视图）
					viewDataModel.menu.buttonElements = function () {
						return currentItem.getActions();
					};
				};
				//点击确认
				$scope.confirm = function() {
					//校验是否可执行
					//遍历出售物品，计算价值
					var sellCostTotal = 0;
					var tempNum2 = 0;
					for (var i=0; i < transactionItems.sellItems.length; i++) {
						var sellItem = transactionItems.sellItems[i];
						for (var j=0; j < currentItemInfo.length; j++) {
							if(compareItem(currentItemInfo[j],sellItem)){
								sellCostTotal+=(sellItem.getTotalNum()*currentItemInfo[j].getSellCost());
							}
						};
						//计算包裹占用空间
						if(!isNaN(Number(currentInteractiveObject.getBagSpace()))){//判断是否有限制
							if(!isNaN(Number(sellItem.getBagSpace()))){
								tempNum2 += sellItem.getTotalNum()*sellItem.getBagSpace();
							}else{
								tempNum2 += sellItem.getTotalNum();
							}
						}//没有限制则不校验
					};
					if(!isNaN(Number(currentInteractiveObject.getBagSpace()))){//判断是否有限制
						//校验包裹空间
						if((currentInteractiveObject.getOccupySpace()+tempNum)>currentInteractiveObject.getBagSpace()
							&&(currentInteractiveObject.getOccupySpace()+tempNum)>currentInteractiveObject.getOccupySpace()){
							//判断超过背包空间，打印并返回，维持原样
							panelTyping("对方空间不足...");
							return;
						}
					}//没有限制则不校验
					
					
					//遍历购入物品，计算价值
					var buyCostTotal = 0;
					var tempNum = 0;
					for (var i=0; i < transactionItems.buyItems.length; i++) {
						var buyItem = transactionItems.buyItems[i];
						for (var j=0; j < currentItemInfo.length; j++) {
							if(compareItem(currentItemInfo[j],buyItem)){
								buyCostTotal+=(buyItem.getTotalNum()*currentItemInfo[j].getBuyCost());
							}
						};
						//计算包裹占用空间
						if(!isNaN(Number(buyItem.getBagSpace()))){
							tempNum += buyItem.getTotalNum()*buyItem.getBagSpace();
						}else{
							tempNum += buyItem.getTotalNum();
						}
					};
					//对比价值
					if(sellCostTotal<buyCostTotal){
						panelTyping("价格不足");
						return;
					}
					//校验包裹空间
					if((dataRoleObj[0].getOccupySpace()+tempNum)>dataRoleObj[0].getBagSpace()
						&&(dataRoleObj[0].getOccupySpace()+tempNum)>dataRoleObj[0].getOccupySpace()){
						//判断超过背包空间，打印并返回，维持原样
						panelTyping("背包空间不足...");
						return;
					}
					//待售出存入交互对象
					var interactiveObjectItems = currentInteractiveObject.getItems();
					var flag = false;
					for (var j=0; j < transactionItems.sellItems.length;j) {
						var sellItem = transactionItems.sellItems[j];
						for (var i=0; i < interactiveObjectItems.length; i++) {
							if(compareItem(interactiveObjectItems[i],sellItem)){
								//遍历后发现同一物品,叠加数量
								interactiveObjectItems[i].setTotalNum(interactiveObjectItems[i].getTotalNum()+sellItem.getTotalNum());
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(sellItem,item_Obj);
							//存入交互对象
							currentInteractiveObject.addItem(item_Obj);
						}
						//从交易面板数据中移除
						transactionItems.sellItems.shift();
						flag = false;
					}
					//待购入存入角色包 roleItems  dataRoleObj[0].getItems()
					var roleItems = dataRoleObj[0].getItems();
					var flag = false;
					for (var j=0; j < transactionItems.buyItems.length;j) {
						var buyItem = transactionItems.buyItems[j];
						for (var i=0; i < roleItems.length; i++) {
							if(compareItem(roleItems[i],buyItem)){
								//遍历后发现同一物品,叠加数量
								roleItems[i].setTotalNum(roleItems[i].getTotalNum()+buyItem.getTotalNum());
								flag = true;
							}
						};
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(buyItem,item_Obj);
							//存入交互对象
							dataRoleObj[0].addItem(item_Obj);
						}
						//从交易面板数据中移除
						transactionItems.buyItems.shift();
						flag = false;
					}
					panel5Hide();
					panelTyping("交易完成");
					//交易流程完成，清空当前交互对象
					//currentInteractiveObject = null;
				};
			});
			
			//数字选择器
			app.controller("numberPicker", function($scope, $rootScope,$timeout,$interval) {
				//按住数字增加
				$scope.numberUp = function() {
					numberUp_Interval = $interval(function() {
						if(viewDataModel.numberPicker.number<currentItem.getTotalNum()&&viewDataModel.numberPicker.number<99){
							viewDataModel.numberPicker.number++;
						}else{
							viewDataModel.numberPicker.number = 1;
						}
					}, 70);
				};
				//停止数字增加
				$scope.numberUpStop = function() {
					$interval.cancel(numberUp_Interval);
				};
				//按住数字减少
				$scope.numberDown = function() {
					numberDown_Interval = $interval(function() {
						if(viewDataModel.numberPicker.number>1){
							viewDataModel.numberPicker.number--;
						}else{
							viewDataModel.numberPicker.number = currentItem.getTotalNum();
						}
					}, 70);
				};
				//停止数字增加
				$scope.numberDownStop = function() {
					$interval.cancel(numberDown_Interval);
				};
				//点击确认
				$scope.confirm = function() {
					//校验
					if(viewDataModel.numberPicker.number>currentItem.getTotalNum()){
						viewDataModel.numberPicker.number=currentItem.getTotalNum();
					}
					//从当前交互动作，判断是移动至角色包裹
					if(ACTION.TYPE.split==currentAction.getType() && ACTION.TARGET.toRoleBag==currentAction.getTarget()){
						var roleItems;
						//判断是角色否交易状态
						if(dataRoleObj[0].getStatus()=="transaction"){
							//交易状态，读取交易暂存物品数组
							roleItems = transactionItems.buyItems;
						}else{//非交易状态，读取角色包物品数组
							roleItems = dataRoleObj[0].getItems();
							//校验包裹空间
							var tempNum = currentItem.getTotalNum();
							if(!isNaN(Number(currentItem.getBagSpace()))){
								tempNum = currentItem.getTotalNum()*currentItem.getBagSpace();
							}
							if((dataRoleObj[0].getOccupySpace()+tempNum)>dataRoleObj[0].getBagSpace()){
								//判断超过背包空间，打印并返回，维持原样
								panelTyping("背包空间不足...");
								return;
							}
						}
						var flag = false;
						if(roleItems){
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
									flag = true;
								}
							};
						}
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							/*obj所拥有item中action已改为自动读取itemInfo
							//暂存action交互动作数据
							var tempItemActions = currentItem.getActions();
							if(tempItemActions){
								for (var l=0; l < tempItemActions.length; l++) {
									//action对象存入item_Obj
									item_Obj.addAction(tempItemActions.getAction(i));
								};
							};
							*/
							//判断是角色否交易状态
							if(dataRoleObj[0].getStatus()=="transaction"){
								//交易状态，修改action
								item_Obj.clearActions();
								var tempAction = loadData(dictionaryData.action.buyback,"action");
								item_Obj.addAction(tempAction);
								//将物品数据暂存至。。
								roleItems.push(item_Obj);
							}else{//非交易状态，物品数据存至角色包
								dataRoleObj[0].addItem(item_Obj);
							}
						}
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							currentInteractiveObject.delItem(currentItem);
						}
						//隐藏
						numberPickerHide();
					} else if(ACTION.TYPE.split==currentAction.getType() && ACTION.TARGET.toInteractiveObject==currentAction.getTarget()){
						//判断是从角色包裹移动至当前交互对象
						var roleItems;
						//判断是角色否交易状态
						if(dataRoleObj[0].getStatus()=="transaction"){
							//交易状态，读取交易暂存物品数组
							roleItems = transactionItems.sellItems;
						}else{//非交易状态，读取当前交互对象的物品数组
							roleItems = currentInteractiveObject.getItems();
							//校验仓库空间
							if(!isNaN(Number(currentInteractiveObject.getBagSpace()))){//判断有限制
								var tempNum = currentItem.getTotalNum();
								if(!isNaN(Number(currentItem.getBagSpace()))){
									tempNum = currentItem.getTotalNum()*currentItem.getBagSpace();
								}
								if((currentInteractiveObject.getOccupySpace()+tempNum)>currentInteractiveObject.getBagSpace()){
									//判断超过仓库空间，打印并返回，维持原样
									panelTyping("仓库空间不足...");
									return;
								}
							}//无限制则不校验
						}
						var flag = false;
						if(roleItems){
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
									flag = true;
								}
							};
						}
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							/*role所拥有item中action已改为自动读取itemInfo
							//暂存action交互动作数据
							var tempItemActions = currentItem.getActions();
							if(tempItemActions){
								for (var l=0; l < tempItemActions.length; l++) {
									//action对象存入item_Obj
									item_Obj.addAction(tempItemActions.getAction(i));
								};
							};
							*/
							//判断是角色否交易状态
							if(dataRoleObj[0].getStatus()=="transaction"){
								//交易状态，修改action
								item_Obj.clearActions();
								var tempAction = loadData(dictionaryData.action.sellback,"action");
								item_Obj.addAction(tempAction);
								//交易状态，将物品数据暂存至。。
								roleItems.push(item_Obj);
							}else{//非交易状态，物品数据存至交互对象
								currentInteractiveObject.addItem(item_Obj);
							}
						}
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							dataRoleObj[0].delItem(currentItem);
						}
						//隐藏
						numberPickerHide();
					} else if(ACTION.TYPE.split==currentAction.getType() && ACTION.TARGET.sellback==currentAction.getTarget()){
						//判断是卖出撤回至包
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							for (var i=0; i < transactionItems.sellItems.length; i++) {
								if(transactionItems.sellItems[i]==currentItem){
									transactionItems.sellItems.splice(i,1);
								}
							};
						}
						//读取角色包物品数组
						var roleItems = dataRoleObj[0].getItems();
						var flag = false;
						if(roleItems){
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
									flag = true;
								}
							};
						}
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							//物品数据存至角色包
							dataRoleObj[0].addItem(item_Obj);
						}
						//隐藏
						numberPickerHide();
					} else if(ACTION.TYPE.split==currentAction.getType() && ACTION.TARGET.buyback==currentAction.getTarget()){
						//判断是撤回至交互对象
						//修改数据
						currentItem.setTotalNum(currentItem.getTotalNum()-Number(viewDataModel.numberPicker.number));
						if (currentItem.getTotalNum()==0){//如果为0则从中删除物品对象
							for (var i=0; i < transactionItems.buyItems.length; i++) {
								if(transactionItems.buyItems[i]==currentItem){
									transactionItems.buyItems.splice(i,1);
								}
							};
						}
						//读取交互对象物品数组
						var roleItems  = currentInteractiveObject.getItems();
						var flag = false;
						if(roleItems){
							for (var i=0; i < roleItems.length; i++) {
								if(roleItems[i].getName()==currentItem.getName()&&roleItems[i].getType()==currentItem.getType()&&roleItems[i].getContent()==currentItem.getContent()){
									//遍历后发现同一物品,叠加数量
									roleItems[i].setTotalNum(roleItems[i].getTotalNum()+Number(viewDataModel.numberPicker.number));
									flag = true;
								}
							};
						}
						if(!flag){
							//遍历完成，未发现同一物品，复制出一个物品对象
							var item_Obj = DataModleFactory.createItem();
							copyBean(currentItem,item_Obj);
							item_Obj.setTotalNum(Number(viewDataModel.numberPicker.number));
							currentInteractiveObject.addItem(item_Obj);
						}
						//隐藏
						numberPickerHide();
					}
					
				};
			});
			
			//列表菜单（自动大小_带箭头）专用遮罩层
			app.controller("menuAutoMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$rootScope.menuAutoMaskLayerClick = function($event) {
					menuHide();
				};
			});
			//仓库专用遮罩层
			app.controller("panel5MaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$rootScope.panel5MaskLayerClick = function($event) {
					panelTyping("");
					panel5Hide();
				};
			});
			//数字选择器专用遮罩层
			app.controller("numberPickerMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$rootScope.numberPickerMaskLayerClick = function($event) {
					numberPickerHide();
				};
			});
			//确认对话框专用遮罩层
			app.controller("confirmPanleMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$rootScope.confirmPanleMaskLayerClick = function($event) {
					confirmPanleHide();
				};
			});
			//任务列表专用遮罩层
			app.controller("missionSelectMaskLayer", function($scope, $rootScope, $timeout) {
				//点击后隐藏
				$rootScope.missionSelectMaskLayerClick = function() {
					dataRoleObj[0].setStatus("");
					missionSelectHide();
				};
			});
			
			//角色信息面板
			app.controller("panel3", function($scope, $rootScope, $timeout) {
				//角色暂时只有一个，直接与角色数据绑定
				viewDataModel.panel3.tittleText=dataRoleObj[0].getName;
				viewDataModel.panel3.roleHp=dataRoleObj[0].getHp;
				viewDataModel.panel3.roleEp=dataRoleObj[0].getEp ;
				viewDataModel.panel3.roleMaxHp=dataRoleObj[0].getMaxHp;
				viewDataModel.panel3.roleMaxEp=dataRoleObj[0].getMaxEp;
				viewDataModel.panel3.roleAtt=dataRoleObj[0].getAtt;
				viewDataModel.panel3.roleDef=dataRoleObj[0].getDef;
				viewDataModel.panel3.roleCri=function (){
					return parseInt(dataRoleObj[0].getCri()*100)+"%";
				};
				viewDataModel.panel3.roleCriStrike=function (){
					return parseInt(dataRoleObj[0].getCriStrike()*100)+"%";
				};
				viewDataModel.panel3.roleAvd=function (){
					return parseInt(dataRoleObj[0].getAvd()*100)+"%";
				};
				viewDataModel.panel3.roleHit=function (){
					return parseInt(dataRoleObj[0].getHit()*100)+"%";
				};
			});
			
			//物品信息面板
			app.controller("panel3ItemInfo", function($scope, $rootScope, $timeout) {
				viewDataModel.panel3ItemInfo.name = function () {
					if(currentItem&&currentItem.getName){
						if(currentItem.getName()||currentItem.getName()==""){
							viewControl.display.panel3ItemInfoNameHide=false;
						}else{
							viewControl.display.panel3ItemInfoNameHide=true;
						}
						return currentItem.getName();
					}
				};
				viewDataModel.panel3ItemInfo.content = function () {
					if(currentItem&&currentItem.getContent){
						if(currentItem.getContent()||currentItem.getContent()==""){
							viewControl.display.panel3ItemInfoContentHide=false;
						}else{
							viewControl.display.panel3ItemInfoContentHide=true;
						}
						return currentItem.getContent();
					}
				};
				viewDataModel.panel3ItemInfo.attrExplain = function(pram){
					if(currentItem&&currentItem.getAttr){
						if(currentItem.getAttr()){
							if(pram in currentItem.getAttr()
								&& typeof Number(currentItem.getAttr()[pram])=="number" 
								&& typeof !isNaN(Number(currentItem.getAttr()[pram]))
								&& Number(currentItem.getAttr()[pram])!=0){
								if(pram=="maxHpPercent"){
									if(currentItem.getType()==ITEM.TYPE.equip){
										return "HP最大值增加";
									}else{
										return "恢复HP最大值";
									}
								}
								if(pram=="maxEpPercent"){
									if(currentItem.getType()==ITEM.TYPE.equip){
										return "EP最大值增加";
									}else{
										return "恢复EP最大值";
									}
								}
							}
						}
					}
				};
				viewDataModel.panel3ItemInfo.attr = function (pram) {
					if(currentItem&&currentItem.getAttr
						&&currentItem.getAttr()
						&&pram in currentItem.getAttr()
						&& typeof Number(currentItem.getAttr()[pram])=="number" 
						&& typeof !isNaN(Number(currentItem.getAttr()[pram]))
						&& Number(currentItem.getAttr()[pram])!=0){
						if(pram=="epRecovery"){
							viewControl.display.panel3ItemInfoEpRecoveryHide = false;
							return currentItem.getAttr().epRecovery;
						}else if(pram=="epRecoveryPercent"){
							viewControl.display.panel3ItemInfoEpRecoveryPercentHide = false;
							return parseInt(currentItem.getAttr().epRecoveryPercent*100)+"%";
						}else if(pram=="epRecoveryMaxEpPercent"){
							viewControl.display.panel3ItemInfoEpRecoveryMaxEpPercentHide = false;
							return parseInt(currentItem.getAttr().epRecoveryMaxEpPercent*100)+"%";
						}else if(pram=="maxEp"){
							viewControl.display.panel3ItemInfoMaxEpHide = false;
							return currentItem.getAttr().maxEp;
						}else if(pram=="maxEpPercent"){
							viewControl.display.panel3ItemInfoMaxEpPercentHide = false;
							return parseInt(currentItem.getAttr().maxEpPercent*100)+"%";
						}else if(pram=="hpRecovery"){
							viewControl.display.panel3ItemInfoHpRecoveryHide = false;
							return currentItem.getAttr().hpRecovery;
						}else if(pram=="hpRecoveryPercent"){
							viewControl.display.panel3ItemInfoHpRecoveryPercentHide = false;
							return parseInt(currentItem.getAttr().hpRecoveryPercent*100)+"%";
						}else if(pram=="hpRecoveryMaxHpPercent"){
							viewControl.display.panel3ItemInfoHpRecoveryMaxHpPercentHide = false;
							return parseInt(currentItem.getAttr().hpRecoveryMaxHpPercent*100)+"%";
						}else if(pram=="maxHp"){
							viewControl.display.panel3ItemInfoMaxHpHide = false;
							return currentItem.getAttr().maxHp;
						}else if(pram=="maxHpPercent"){
							viewControl.display.panel3ItemInfoMaxHpPercentHide = false;
							return parseInt(currentItem.getAttr().maxHpPercent*100)+"%";
						}else if(pram=="att"){
							viewControl.display.panel3ItemInfoAttHide = false;
							return currentItem.getAttr().att;
						}else if(pram=="attPercent"){
							viewControl.display.panel3ItemInfoAttPercentHide = false;
							return parseInt(currentItem.getAttr().attPercent*100)+"%";
						}else if(pram=="damage"){
							viewControl.display.panel3ItemInfoDamageHide = false;
							return currentItem.getAttr().damage;
						}else if(pram=="def"){
							viewControl.display.panel3ItemInfoDefHide = false;
							return currentItem.getAttr().def;
						}else if(pram=="defPercent"){
							viewControl.display.panel3ItemInfoDefPercentHide = false;
							return parseInt(currentItem.getAttr().defPercent*100)+"%";
						}else if(pram=="cri"){
							viewControl.display.panel3ItemInfoCriHide = false;
							return parseInt(currentItem.getAttr().cri*100)+"%";
						}else if(pram=="criPercent"){
							viewControl.display.panel3ItemInfoCriPercentHide = false;
							return currentItem.getAttr().criPercent+"倍";
						}else if(pram=="criStrike"){
							viewControl.display.panel3ItemInfoCriStrikeHide = false;
							return parseInt(currentItem.getAttr().criStrike*100)+"%";
						}else if(pram=="criStrikePercent"){
							viewControl.display.panel3ItemInfoCriStrikePercentHide = false;
							return currentItem.getAttr().criStrikePercent+"倍";
						}else if(pram=="avd"){
							viewControl.display.panel3ItemInfoAvdHide = false;
							return parseInt(currentItem.getAttr().avd*100)+"%";
						}else if(pram=="avdPercent"){
							viewControl.display.panel3ItemInfoAvdPercentHide = false;
							return currentItem.getAttr().avdPercent+"倍";
						}else if(pram=="hit"){
							viewControl.display.panel3ItemInfoHitHide = false;
							return parseInt(currentItem.getAttr().hit*100)+"%";
						}else if(pram=="hitPercent"){
							viewControl.display.panel3ItemInfoHitPercentHide = false;
							return currentItem.getAttr().hitPercent+"倍";
						}
					}else{
						if(pram=="epRecovery"){
							viewControl.display.panel3ItemInfoEpRecoveryHide = true;
						}else if(pram=="epRecoveryPercent"){
							viewControl.display.panel3ItemInfoEpRecoveryPercentHide = true;
						}else if(pram=="epRecoveryMaxEpPercent"){
							viewControl.display.panel3ItemInfoEpRecoveryMaxEpPercentHide = true;
						}else if(pram=="maxEp"){
							viewControl.display.panel3ItemInfoMaxEpHide = true;
						}else if(pram=="maxEpPercent"){
							viewControl.display.panel3ItemInfoMaxEpPercentHide = true;
						}else if(pram=="hpRecovery"){
							viewControl.display.panel3ItemInfoHpRecoveryHide = true;
						}else if(pram=="hpRecoveryPercent"){
							viewControl.display.panel3ItemInfoHpRecoveryPercentHide = true;
						}else if(pram=="hpRecoveryMaxHpPercent"){
							viewControl.display.panel3ItemInfoHpRecoveryMaxHpPercentHide = true;
						}else if(pram=="maxHp"){
							viewControl.display.panel3ItemInfoMaxHpHide = true;
						}else if(pram=="maxHpPercent"){
							viewControl.display.panel3ItemInfoMaxHpPercentHide = true;
						}else if(pram=="att"){
							viewControl.display.panel3ItemInfoAttHide = true;
						}else if(pram=="attPercent"){
							viewControl.display.panel3ItemInfoAttPercentHide = true;
						}else if(pram=="damage"){
							viewControl.display.panel3ItemInfoDamageHide = true;
						}else if(pram=="def"){
							viewControl.display.panel3ItemInfoDefHide = true;
						}else if(pram=="defPercent"){
							viewControl.display.panel3ItemInfoDefPercentHide = true;
						}else if(pram=="cri"){
							viewControl.display.panel3ItemInfoCriHide = true;
						}else if(pram=="criPercent"){
							viewControl.display.panel3ItemInfoCriPercentHide = true;
						}else if(pram=="criStrike"){
							viewControl.display.panel3ItemInfoCriStrikeHide = true;
						}else if(pram=="criStrikePercent"){
							viewControl.display.panel3ItemInfoCriStrikePercentHide = true;
						}else if(pram=="avd"){
							viewControl.display.panel3ItemInfoAvdHide = true;
						}else if(pram=="avdPercent"){
							viewControl.display.panel3ItemInfoAvdPercentHide = true;
						}else if(pram=="hit"){
							viewControl.display.panel3ItemInfoHitHide = true;
						}else if(pram=="hitPercent"){
							viewControl.display.panel3ItemInfoHitPercentHide = true;
						}
					}
				};
				viewDataModel.panel3ItemInfo.buffs = function() {
					if(currentItem&&currentItem.getBuffs
						&&currentItem.getBuffs()
						&&currentItem.getBuffs().length>0){
						viewControl.display.panel3ItemInfoBuffsHide = false;
						return currentItem.getBuffs();
					}else{
						viewControl.display.panel3ItemInfoBuffsHide = true;
					}
				};
			});
			
			//对比角色装备物品信息
			app.controller("panel3RoleItemInfo", function($scope, $rootScope, $timeout) {
				//视图在对比时实时写入
				viewDataModel.panel3RoleItemInfo.name = null;
				viewDataModel.panel3RoleItemInfo.content = null;
			});
			
			//顶部菜单
			app.controller("topFrame", function($scope, $rootScope, $timeout) {
				$scope.clickButton1 = function(pram,pram2){
					mainHide();
					if(dataRoleObj[0].getStatus()=="fight"){
						//判断为战斗状态，不可操作
						alert("当前为战斗状态不可操作!");
						return;
					}
					//设置当前状态为使用背包
					dataRoleObj[0].setStatus(pram);
					//设置第二状态（过滤条件）
					dataRoleObj[0].setStatus2(pram2);
					//清空当前对象
					currentInteractiveObject=null;
					currentItem=null;
					currentAction=null;
					//打开背包功能
					if(pram=="skill"){//判断为查看技能
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getSkills();
						};
						panelTyping("查看技能...");
					}else{
						//加载包裹数据,重新定位视图数据指针
						viewDataModel.menuBag.buttonElements = function () {
							return dataRoleObj[0].getItems(pram2);
						};
						panelTyping("查看物品...");
					}
					var menuBagLeft=0;
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["menuBag"] = maxZIndex+2;
					viewControl.zIndexList["panel"] = maxZIndex+2;
					viewControl.zIndexList["panel3-2"] = maxZIndex+2;
					viewControl.zIndexList["panel5MaskLayer"] = maxZIndex+1;
					viewControl.menu_bag_Style["z-index"] = viewControl.zIndexList["menuBag"];
					viewControl.panel_Style["z-index"] = viewControl.zIndexList["panel"];
					viewControl.panel3_Style2["z-index"] = viewControl.zIndexList["panel3-2"];
					viewControl.panel5MaskLayer_Style["z-index"] = viewControl.zIndexList["panel5MaskLayer"];
					//弹出遮罩层
					viewControl.display.panel5MaskLayerHide = false;
					//同时打开包
					viewControl.display.menuBagHide = false;
					viewControl.menu_bag_Style.left = 55 +menuBagLeft+ "px";
					viewControl.menu_bag_Style.opacity = 0;
					//显示角色信息面板
					viewControl.panel3_Style2.top = 60 + "px";
					viewControl.panel3_Style2.left =  950 + "px";
					viewControl.panel3_Style2.opacity = 0;
					$timeout(function() {
						//包
						viewControl.menu_bag_Style.left = 60 +menuBagLeft+ "px";
						viewControl.menu_bag_Style.opacity = 1;
						//角色信息面板
						viewControl.display.panel3Hide2 = false;
						viewControl.panel3_Style2.left =  930 + "px";
						viewControl.panel3_Style2.opacity = 1;
					}, 200);
				};
				$scope.clickButton2 = function(pram,pram2){
					if(dataRoleObj[0].getStatus()=="fight"){
						//判断为战斗状态，不可操作
						alert("当前为战斗状态不可操作!");
						return;
					}
					mainHide();
					dataRoleObj[0].setStatus("checkMission");
					viewDataModel.missionSelect.elements=function(){
						//这里全读取(只读取  可接取:accept|进行中:ongoing|可交付:deliverable)
						var missionArray = dataRoleObj[0].getMissions(
									MISSION.STATUS.accept
									,MISSION.STATUS.ongoing
									,MISSION.STATUS.deliverable);
						return missionArray;
					};
					$timeout(function() {
						missionSelectShow();
					}, 200);
				};
			});
			
			app.controller("missionSelect", function($scope, $rootScope){
				$scope.missionSelectHover=function($index){
					if(dataRoleObj[0].getStatus()=="checkMission"){
						//是在查看任务界面
						currentMission = dataRoleObj[0].getMissions(
									MISSION.STATUS.accept
									,MISSION.STATUS.ongoing
									,MISSION.STATUS.deliverable)[$index];
					}else{//是在交互界面
						//只读取  可接取:accept|进行中:ongoing|可交付:deliverable
						currentMission = currentInteractiveObject.getMissions(
									MISSION.STATUS.accept
									,MISSION.STATUS.ongoing
									,MISSION.STATUS.deliverable)[$index];
					}
				};
				$scope.missionSelectClick=function($index){
					viewDataModel.confirmPanle.tittle="任务";
					if(dataRoleObj[0].getStatus()=="checkMission"){
						//是在查看任务界面
						//可接取、进行中，弹出确认框
						if(currentMission.getStatus()==MISSION.STATUS.accept){
							viewDataModel.confirmPanle.textContent="接受任务？";
							//展示确认框
							confirmPanleShow();
						}else if(currentMission.getStatus()==MISSION.STATUS.ongoing){
							viewDataModel.confirmPanle.textContent="放弃任务？";
							//展示确认框
							confirmPanleShow();
						}
						//其他状态不可操作
					}else{//是在交互界面
						//可接取、进行中、可交付，弹出确认框
						if(currentMission.getStatus()==MISSION.STATUS.accept){
							viewDataModel.confirmPanle.textContent="接受任务？";
							//展示确认框
							confirmPanleShow();
						}else if(currentMission.getStatus()==MISSION.STATUS.ongoing){
							viewDataModel.confirmPanle.textContent="放弃任务？";
							//展示确认框
							confirmPanleShow();
						}else if(currentMission.getStatus()==MISSION.STATUS.deliverable){
							viewDataModel.confirmPanle.textContent="完成任务？";
							//展示确认框
							confirmPanleShow();
						}
						//其他状态不可操作
					}
				};
			});
			
			app.controller("confirmPanle", function($scope, $rootScope){
				$scope.confirmPanleButtonSureClick = function(){
					if(currentMission.getStatus()==MISSION.STATUS.accept){
						//判断为可接取accept，修改为进行中ongoing，并存入角色
						currentMission.setStatus(MISSION.STATUS.ongoing);
						dataRoleObj[0].addMission(currentMission);
						panelTyping("已接取:  "+currentMission.getName());
					}else if(currentMission.getStatus()==MISSION.STATUS.ongoing){
						//判断为进行中ongoing，修改为可接取accept，并从角色中删除
						currentMission.setStatus(MISSION.STATUS.accept);
						dataRoleObj[0].delMission(currentMission);
						panelTyping("已放弃:  "+currentMission.getName());
					}else if(currentMission.getStatus()==MISSION.STATUS.deliverable){
						//----判断包裹空间是否足够-未完成-----
						//判断为可交付deliverable，修改为已完成
						currentMission.setStatus(MISSION.STATUS.completed);
						panelTyping("已完成:  "+currentMission.getName());
						currentMission = noneMissionObj;
					}
					confirmPanleHide();
				};
			});
			
			app.controller("steeringWheel",function($scope, $rootScope, $timeout) {
				//方向盘箭头生成以及点击动画控制
				//生成上下左右4个箭头
				$scope.arrows=["1","2","3","4"];
				//点击效果控制
				var sign = "-1";
				$scope.arrowOnClick = function(i) {
					if (sign=="-1"){
						sign="-2";
					}else{
						sign="-1";
					}
					$scope.animation = (i+1) + sign;
					mapMove(i+1);
				};
				//地图移动
				function mapMove (sign){
					var x = currentDomain.getX();
					var y = currentDomain.getY();
					if(sign=="1"){
						//向上移动
						y-=1;
					}else if(sign=="2"){
						//向右移动
						x+=1;
					}else if(sign=="3"){
						//向下移动
						y+=1;
					}else if(sign=="4"){
						//向左移动
						x-=1;
					}
					for (var i=0; i < currentMapDomains.length; i++) {
						if(currentMapDomains[i].getX()==x
						&&currentMapDomains[i].getY()==y){
							currentDomain = currentMapDomains[i];
							map3dButtonsShow();
							break;
						}
					};
				};
			}); 
			/*--------------------------------------------------------*/
			/**
			 * 随机概率计算,objArr:参与随机对象;arr2:概率数值
			 */
			/*该方法移至main.js中
			function random(objArr, arr2) {
				//过滤校验,去掉概率不正确的元素(非Number、NaN、小于等于0)
				for (var i=0; i < arr2.length; i++) {
					if(typeof Number(arr2[i])!="number"||isNaN(Number(arr2[i]))||Number(arr2[i])<=0){
						objArr.splice(i,1);
						arr2.splice(i,1);
					}
				};
				var sum = 0,
				factor = 0,
				random = Math.random();
				for(var i = arr2.length - 1; i >= 0; i--) {
					sum += Number(arr2[i]); // 统计概率总和
				};
				for(var i = arr2.length - 1; i >= 0; i--) {
					factor += Number(arr2[i]);
					if(random <= factor) 
					return objArr[i];
				};
				//总概率不足1时，均未随机到则为null
				return null;
			};
			*/
			/**
			 * activeObj:主动对象
			 * passiveObj:被动对象
			 * activeObjSkill:主动对象所用技能
			 */
			function battleSettlement (activeObj,passiveObj,activeObjSkill) {
				var tempAttr;
				if("getAttr" in activeObjSkill&&activeObjSkill.getAttr()!=undefined&&Object.getOwnPropertyNames(activeObjSkill.getAttr()).length>0){
					//判断有getAttr
					tempAttr = activeObjSkill.getAttr();
				}else{//没有则应该为直接传入了attr{}
					tempAttr = activeObjSkill;
				}
				var infoStr="";
				//主动对象hp变化值（主动对象自身效果）
				var activeObjHpChange = 0;
				//主动对象ep变化值（主动对象自身效果）
				var activeObjEpChange = 0;
				//主动对象的att输出
				var activeObjAttDamage=NaN;
				//主动对象的cri暴击率计算
				var activeObjCri = 0;
				//主动对象的criStrike暴击伤害计算
				var activeObjCriStrike = 0;
				//主动对象的hit命中率计算
				var activeObjHit = 0;
				//标记是否对被动对象有攻击
				var flag=false;
				if(tempAttr&&tempAttr!=undefined&&tempAttr!=null){
					//maxHp(百分比)恢复值
					if(SKILL.ATTR.hpRecoveryMaxHpPercent in tempAttr){
						activeObjHpChange+=activeObj.getMaxHp()*tempAttr.hpRecoveryMaxHpPercent;
					}
					//当前hp(百分比)恢复值
					if(SKILL.ATTR.hpRecoveryPercent in tempAttr){
						activeObjHpChange+=activeObj.getHp()*tempAttr.hpRecoveryPercent;
					}
					//hp直接恢复值
					if(SKILL.ATTR.hpRecovery in tempAttr){
						activeObjHpChange+=tempAttr.hpRecovery;
					}
					//maxEp(百分比)恢复值
					if(SKILL.ATTR.epRecoveryMaxEpPercent in tempAttr){
						activeObjEpChange+=activeObj.getMaxEp()*tempAttr.epRecoveryMaxEpPercent;
					}
					//当前ep(百分比)恢复值
					if(SKILL.ATTR.epRecoveryPercent in tempAttr){
						activeObjEpChange+=activeObj.getEp()*tempAttr.epRecoveryPercent;
					}
					//ep直接恢复值
					if(SKILL.ATTR.epRecovery in tempAttr){
						activeObjEpChange+=tempAttr.epRecovery;
					}
					
					//计算输出伤害值（不包含固定伤害）
					//计算攻击输出（不包含固定伤害）
					if(SKILL.ATTR.attPercent in tempAttr){
						if(isNaN(activeObjAttDamage)){ activeObjAttDamage=0;};
						activeObjAttDamage += activeObj.getAtt()*tempAttr.attPercent;
						flag=true;
					}
					if(SKILL.ATTR.att in tempAttr){
						if(isNaN(activeObjAttDamage)){ activeObjAttDamage=0;};
						activeObjAttDamage += tempAttr.att;
						flag=true;
					}
					//计算暴击率
					if(SKILL.ATTR.cri in tempAttr){
						activeObjCri = activeObj.getCri()+tempAttr.cri;
					}else{
						activeObjCri = activeObj.getCri();
					}
					//计算暴击伤害
					if(SKILL.ATTR.criStrike in tempAttr){
						activeObjCriStrike = activeObj.getCriStrike()+tempAttr.criStrike;
					}else{
						activeObjCriStrike = activeObj.getCriStrike();
					}
					//计算命中
					if(SKILL.ATTR.hit in tempAttr){
						activeObjHit = activeObj.getHit()+tempAttr.hit;
					}else{
						activeObjHit = activeObj.getHit();
					}
					
				}
				
				var str="";
				if(dataRoleObj[0].getStatus()=="fight"){//判断是战斗状态
					//计算命中闪避
					var tempHit = activeObjHit-passiveObj.getAvd();
					if(random([true,false],[tempHit,(1-tempHit)])){//命中
						//被动对象hp计算:1.主动对象攻击给予的变化（受伤减少）
						var tempEnemyHp = passiveObj.getHp();
						//主动对象输出伤害-被动对象防御
						var tempActiveObjAttDamage=activeObjAttDamage-passiveObj.getDef();
						//计算暴击加成
						if(random([true,false],[activeObjCri,(1-activeObjCri)])){
							//暴击发生，计算暴击伤害
							tempActiveObjAttDamage+=tempActiveObjAttDamage*activeObjCriStrike;
							//标记暴击发生
							str = "cri";
						};
						
						//判断为固定伤害输出计算，不计算防御力
						if(SKILL.ATTR.damage in tempAttr){
							if(isNaN(tempActiveObjAttDamage)){ tempActiveObjAttDamage=0;};
							tempActiveObjAttDamage += tempAttr.damage;
							flag=true;
						}
						
						//触发被动技能
						if(flag){
							//---------未实现--------------
						}
						
					}else{
						//闪避发生
						str = "avd";
					}
					
					
					if(tempActiveObjAttDamage<0){tempActiveObjAttDamage=0;}
					tempActiveObjAttDamage = Math.round(Number(tempActiveObjAttDamage));//舍去小数
					tempEnemyHp-=tempActiveObjAttDamage;
					//将被动对象hp实现
					passiveObj.setHp(tempEnemyHp);
					//输出战斗信息
					if(!isNaN(activeObjAttDamage)&&flag){
						if(str=="cri"){
							infoStr+="暴击!";
						}
						if(str=="avd"){
							infoStr+="未命中...";
						}else{
							infoStr+=(activeObj.getName()+"造成了 "+tempActiveObjAttDamage+" 伤害;");
						}
					};
				}
				
				
				//主动对象hp计算:1.自身给予的主动变化（恢复）;
				var tempActiveObjHp = activeObj.getHp();
				activeObjHpChange = Math.round(Number(activeObjHpChange));//舍去小数
				if(activeObjHpChange>0){
					infoStr+=(activeObj.getName()+"恢复了 "+activeObjHpChange+" 生命;");
				}else if(activeObjHpChange<0){
					infoStr+=(activeObj.getName()+"的生命减少了 "+activeObjHpChange+";");
				}
				tempActiveObjHp+=activeObjHpChange;
				//将主动对象hp实现
				activeObj.setHp(tempActiveObjHp);
				
				if("getEp" in activeObj){
					//主动对象ep计算:1.自身给予的主动变化（恢复）;
					var tempActiveObjEp = activeObj.getEp();
					activeObjEpChange = Math.round(Number(activeObjEpChange));//舍去小数
					if(activeObjEpChange>0){
						infoStr+=(activeObj.getName()+"恢复了 "+activeObjEpChange+" 能量;");
					}else if(activeObjEpChange<0){
						infoStr+=(activeObj.getName()+"的能量减少了 "+activeObjEpChange+";");
					}
					tempActiveObjEp+=activeObjEpChange;
					//将主动对象ep实现
					activeObj.setEp(tempActiveObjEp);
					
				}
				
				if(infoStr!=""){
					viewDataModel.battle.battleInfo.push({str:infoStr});
					infoStr = "";
				}
				
				//添加buff
				if("getBuffs" in activeObjSkill){
					var tempBuffs = activeObjSkill.getBuffs();//tempBuff 为  array
					if(tempBuffs&&tempBuffs!=undefined&&tempBuffs!=null&&tempBuffs.length>0){//判断有buff
						//获取当前角色hp的百分比
						var roleHpPercent = activeObj.getHp()/activeObj.getMaxHp();
						//获取当前对方hp的百分比
						var enemyHpPercent = passiveObj.getHp()/passiveObj.getMaxHp();
						for (var i=0; i < tempBuffs.length; i++) {
							//复制一个buff对象，存入
							var tempBuff = copyBuff(tempBuffs[i]);
							if(tempBuff.getTarget()==BUFF.TARGET.self){
								//判断是赋予自己(buff)
								activeObj.addBuff(tempBuff);
								infoStr+=(activeObj.getName()+"获得了\""+tempBuff.getName()+"\"效果;");
							}else if(tempBuff.getTarget()==BUFF.TARGET.opponent){
								//判断是赋予对方(deBuff)
								if(str!="avd"){
									passiveObj.addBuff(tempBuff);
									infoStr+=(activeObj.getName()+"给对方\""+tempBuff.getName()+"\"效果;");
								}else{
									infoStr+=(activeObj.getName()+"给对方\""+tempBuff.getName()+"\"效果,但未命中;");
								}
							}
						};
						//重设双方HP，以处理跟随MaxHP变化
						activeObj.setHp(activeObj.getMaxHp()*roleHpPercent);
						passiveObj.setHp(passiveObj.getMaxHp()*enemyHpPercent);
					};
					viewDataModel.battle.battleInfo.push({str:infoStr});
					infoStr="";
				}
				
				//判断hp是否为0
				if(dataRoleObj[0].getHp()<=0){
					//结束（未实现）
					viewDataModel.battle.battleInfo.push({str:"角色死亡"});
					fightOver("fail");
					return false;
				}else 
				//判断对方hp是否为0
				if(currentInteractiveObject.getHp()<=0){
					//结束（未实现）
					viewDataModel.battle.battleInfo.push({str:"战斗胜利"});
					fightOver("victory");
					return false;
				}
				return true;
			}
			/**
			 * 双方行动结算（角色先行动）传入：skillObj
			 */
			function battleSettlement2 (skillObj) {
				//角色行动
				if(battleSettlement(dataRoleObj[0],currentInteractiveObject,skillObj)){
					//技能概率计算
					var skillsArr = currentInteractiveObject.getSkills("active");
					var skillsChanceArr=[];
					if(Object.prototype.toString.call(skillsArr)=="[object Array]"&&skillsArr.length>0){//判断有技能
						for (var i=0; i < skillsArr.length; i++) {
							skillsChanceArr.push(Number(skillsArr[i].getUseChance()));
						};
					}
					var useSkill = random(skillsArr,skillsChanceArr);
					var str="";
					if(useSkill!=null){//判断为使用技能
					}else{
						//没有使用技能，为普通攻击
						useSkill={attPercent:1};
					}
					//对方行动
					battleSettlement(currentInteractiveObject,dataRoleObj[0],useSkill);
				}
			}
			
			/**
			 * 回合开始buff结算（hp增加、减少;ep增加、减少）
			 */
			function roundStartBuffSettlement (){
				var buffs = dataRoleObj[0].getBuffs();
				var hpRecovery = 0;//hp恢复量-减少量
				var epRecovery = 0;//ep恢复量-减少量
				for (var i=0; i < buffs.length; i++) {
					var attr = buffs[i].getAttr();
					var flag1 = false;var flag2 = false;
					if(BUFF.ATTR.hpRecovery in attr){//hp恢复-直接量
						flag1 = true;hpRecovery+=attr.hpRecovery;}
					if(BUFF.ATTR.hpRecoveryPercent in attr){//hp恢复-当前hp百分比
						flag1 = true;hpRecovery+=(dataRoleObj[0].getHp()*attr.hpRecoveryPercent);}
					if(BUFF.ATTR.hpRecoveryMaxHpPercent in attr){//hp恢复-MaxHp百分比
						flag1 = true;hpRecovery+=(dataRoleObj[0].getMaxHp()*attr.hpRecoveryMaxHpPercent);}
					if(BUFF.ATTR.epRecovery in attr){//ep恢复-直接量
						flag2 = true;epRecovery+=attr.epRecovery;}
					if(BUFF.ATTR.epRecoveryPercent in attr){//ep恢复-当前ep百分比
						flag2 = true;epRecovery+=(dataRoleObj[0].getEp()*attr.epRecoveryPercent);}
					if(BUFF.ATTR.epRecoveryMaxEpPercent in attr){//ep恢复-MaxHp百分比
						flag2 = true;epRecovery+=(dataRoleObj[0].getMaxEp()*attr.epRecoveryMaxEpPercent);}
					if(flag1){
						if(hpRecovery>=0){
							viewDataModel.battle.battleInfo.push({str:"你受到"+buffs[i].getName()+"效果:"+"HP+"+hpRecovery});
						}else{
							viewDataModel.battle.battleInfo.push({str:"你受到"+buffs[i].getName()+"效果:"+"HP"+hpRecovery});
						}
					}
					if(flag2){
						if(epRecovery>=0){
							viewDataModel.battle.battleInfo.push({str:"你受到"+buffs[i].getName()+"效果:"+"EP+"+epRecovery});
						}else{
							viewDataModel.battle.battleInfo.push({str:"你受到"+buffs[i].getName()+"效果:"+"EP"+epRecovery});
						}
					}
				};
				var buffs = currentInteractiveObject.getBuffs();
				var hpRecovery = 0;//hp恢复量-减少量
				var epRecovery = 0;//ep恢复量-减少量
				for (var i=0; i < buffs.length; i++) {
					var attr = buffs[i].getAttr();
					var flag1 = false;
					if(BUFF.ATTR.hpRecovery in attr){//hp恢复-直接量
						flag1 = true;hpRecovery+=attr.hpRecovery;}
					if(BUFF.ATTR.hpRecoveryPercent in attr){//hp恢复-当前hp百分比
						flag1 = true;hpRecovery+=(dataRoleObj[0].getHp()*attr.hpRecoveryPercent);}
					if(BUFF.ATTR.hpRecoveryMaxHpPercent in attr){//hp恢复-MaxHp百分比
						flag1 = true;hpRecovery+=(dataRoleObj[0].getMaxHp()*attr.hpRecoveryMaxHpPercent);}
					if(flag1){
						if(hpRecovery>=0){
							viewDataModel.battle.battleInfo.push({str:currentInteractiveObject.getName()+"受到"+buffs[i].getName()+"效果:"+"HP+"+hpRecovery});
						}else{
							viewDataModel.battle.battleInfo.push({str:currentInteractiveObject.getName()+"受到"+buffs[i].getName()+"效果:"+"HP"+hpRecovery});
						}
					}
				};
			}
			/**
			 * 回合结束buff结算
			 */
			function buffSettlement (){
				//获取双方当前hp的百分比
				var roleHpPercent = dataRoleObj[0].getHp()/dataRoleObj[0].getMaxHp();
				var enemyHpPercent = currentInteractiveObject.getHp()/currentInteractiveObject.getMaxHp();
				var buffs = dataRoleObj[0].getBuffs();
				for (var i=0; i < buffs.length; i++) {
					buffs[i].setRound(buffs[i].getRound()-1);
					if(buffs[i].getRound()<=0){
						dataRoleObj[0].delBuff(buffs[i]);
						i--;
					}
				};
				var buffs2 = currentInteractiveObject.getBuffs();
				for (var i=0; i < buffs2.length; i++) {
					buffs2[i].setRound(buffs2[i].getRound()-1);
					if(buffs2[i].getRound()<=0){
						currentInteractiveObject.delBuff(buffs2[i]);
						i--;
					}
				};
				//重设双方HP，以处理跟随MaxHP变化
				dataRoleObj[0].setHp(dataRoleObj[0].getMaxHp()*roleHpPercent);
				currentInteractiveObject.setHp(currentInteractiveObject.getMaxHp()*enemyHpPercent);
			}
			/**
			 * 结束战斗
			 */
			function fightOver (pram) {
				if(pram=="victory"){//战斗胜利
					//数据计算
					//携带buff清除
					dataRoleObj[0].clearBuffs();
					currentInteractiveObject.clearBuffs();
					//计算掉落
					var tempItems = currentInteractiveObject.getItems();
					var dropItems = [];//最终的掉落物品
					var dropItemsArr = [];//掉落物品对象数组
					var dropChanceArr = [];//掉落概率数组
					for (var i=0; i < tempItems.length; i++) {
						if(typeof tempItems[i].getDropChance()=="number"){
							dropItemsArr.push(tempItems[i]);
							dropChanceArr.push(tempItems[i].getDropChance());
						}
					};
					var itemNames="";
					if (dropItemsArr.length>0){//判断有掉落率物品才进行
						//随机掉落数量
						var dropNum  = Math.ceil(Math.random()*currentInteractiveObject.getDropNum());
						for (var i=0; i < dropNum; i++) {//根据掉落数量随机多次
							var dropItem = random(dropItemsArr,dropChanceArr);
							if(dropItem!=null){
								//对掉落物品对象复制处理
								var item_Obj = DataModleFactory.createItem();
								copyBean(dropItem,item_Obj);
								item_Obj.setTotalNum(1);
								dropItems.push(item_Obj);
								itemNames+=(dropItem.getName()+";");
							}
						};
					};
					//掉落物品信息写入
					if(itemNames.length>0){
						itemNames="掉落物品:"+itemNames;
						//获取到临时存放点对象
						var tempObjArr = currentDomain.getInteractiveObjects();
						var tempObj = null;
						for (var i=0; i < tempObjArr.length; i++) {
							if(tempObjArr[i].getName()=="临时存放点"){
								tempObj = tempObjArr[i];
								break;
							}
						};
						if(tempObj==null){
							//没有获取到，则新建一个临时存放点对象 
							tempObj = DataModleFactory.createInteractiveObject();
							copyBean(tempStoragePointObj,tempObj);
							currentDomain.addInteractiveObject(tempObj,"unshift");
						}
						//将掉落物存入临时存放点对象 
						for (var i=0; i < dropItems.length; i++) {
							tempObj.addItem(dropItems[i]);
						};
					};
					//场景切换
					sceneFightHide("战斗胜利!"+itemNames);
					sceneMainDataLoad(currentDomain);
					//任务校验------由于暂时不是直接放进包中(未完成)---------
					//mainShow();
				}else if(pram=="fail"){//战斗失败（未实现）
					
				}
			}
			//战斗场景
			app.controller("scene-battle", function($scope, $rootScope, $timeout) {
				quickMenuBagHide = function(){
					viewControl.display.quickMenuBagHide = true;
					viewControl.display.quickMenuBagMaskLayerHide = true;
					viewControl.zIndexList["menuBag"] = 0;
					viewControl.zIndexList["quickMenuBagMaskLayer"] = 0;
					viewControl.menu_bag_Style["z-index"] = 0;
					viewControl.quickMenuBagMaskLayer_Style["z-index"] = 0;
					viewControl.menu_bag_Style.opacity = 0;
				};
				quickMenuBagShow = function(){
					//获取层叠关系数组中最大值，并+1存入
					var maxZIndex = getMaxZIndex(100);
					viewControl.zIndexList["menuBag"] = maxZIndex+2;
					viewControl.zIndexList["quickMenuBagMaskLayer"] = maxZIndex+1;
					viewControl.menu_bag_Style["z-index"] = viewControl.zIndexList["menuBag"];
					viewControl.quickMenuBagMaskLayer_Style["z-index"] = viewControl.zIndexList["quickMenuBagMaskLayer"];
					//显示选择菜单
					viewControl.display.quickMenuBagHide = false;
					viewControl.display.quickMenuBagMaskLayerHide = false;
					viewControl.menu_bag_Style.left = 200+"px";
					viewControl.menu_bag_Style.opacity = 1;
				};
				var quickButtonChangeArr;
				var nowQuickButtonSet;
				$scope.quickButtonChange = function(num){//选择快捷按钮
					quickMenuBagShow();
					if(num==4){//加载背包中消耗品（包含战斗消耗品）
						quickButtonChangeArr = dataRoleObj[0].getItems("useRoleBag-Consumable");
						nowQuickButtonSet=4;
					}else if(num==5){//加载背包中消耗品（包含战斗消耗品）
						quickButtonChangeArr = dataRoleObj[0].getItems("useRoleBag-Consumable");
						nowQuickButtonSet=5;
					}else if(num==6){//加载背包中消耗品（包含战斗消耗品）
						quickButtonChangeArr = dataRoleObj[0].getItems("useRoleBag-Consumable");
						nowQuickButtonSet=6;
					}else if(num==1){//加载角色技能
						quickButtonChangeArr = dataRoleObj[0].getSkills("active");
						nowQuickButtonSet=1;
					}else if(num==2){//加载角色技能
						quickButtonChangeArr = dataRoleObj[0].getSkills("active");
						nowQuickButtonSet=2;
					}else if(num==3){//加载角色技能
						quickButtonChangeArr = dataRoleObj[0].getSkills("active");
						nowQuickButtonSet=3;
					}else{
						quickButtonChangeArr = [];
					}
					viewDataModel.menuBag.buttonElements=function(){
						return quickButtonChangeArr;
					};
				};
				$scope.menulistClick = function($index){//点击选择
					quickMenuBagHide();
					switch(nowQuickButtonSet){
						case 4:quickButton4=quickButtonChangeArr[$index];
							break;
						case 5:quickButton5=quickButtonChangeArr[$index];
							break;
						case 6:quickButton6=quickButtonChangeArr[$index];
							break;
						case 1:quickButton1=quickButtonChangeArr[$index];
							break;
						case 2:quickButton2=quickButtonChangeArr[$index];
							break;
						case 3:quickButton3=quickButtonChangeArr[$index];
							break;
						default:break;
					};
				};
				$scope.quickMenuBagMaskLayerClick = function(){
					quickMenuBagHide();
				};
				$scope.quickButtonClick = function(num){
					var infoStr="";
					
					var useItem = function (quickButton,num){
						if (quickButton&&quickButton!=undefined&&quickButton!=null){//判断quickButton是否设置
								if(quickButton.getTotalNum()&&quickButton.getTotalNum()!=undefined&&quickButton.getTotalNum()!=null&&quickButton.getTotalNum()>0){
									//判断TotalNum存在且>0
									if (quickButton.getType()==ITEM.TYPE.consumable) {//判断第一类型为消耗品
										if(quickButton.getType2()==ITEM.TYPE2.consumable||quickButton.getType2()==ITEM.TYPE2.reusingConsumable){//判断第二类型为消耗品或可反复使用消耗品
											//执行使用效果
											var tempAttr = quickButton.getAttr();
											//行动结算
											roundStartBuffSettlement();
											battleSettlement2(quickButton);
											buffSettlement();
											//数量-1
											if(!(quickButton.getType2()==ITEM.TYPE2.reusingConsumable)){//是可反复使用消耗品则不减少数量
												var totalNum = quickButton.getTotalNum();
												totalNum -= 1;
												if(totalNum<=0){
													dataRoleObj[0].delItem(quickButton);
													quickButton = null;
												}else{
													quickButton.setTotalNum(totalNum);
												}
											}
										}else if(quickButton.getType2()==ITEM.TYPE2.battleConsumable){//判断第二类型为战斗消耗品（攻击类）
											//执行使用效果
											var tempAttr = quickButton.getAttr();
											//行动结算
											roundStartBuffSettlement();
											battleSettlement2(quickButton);
											buffSettlement();
											//数量-1
											var totalNum = quickButton.getTotalNum();
											totalNum -= 1;
											if(totalNum<=0){
												dataRoleObj[0].delItem(quickButton);
												quickButton = null;
											}else{
												quickButton.setTotalNum(totalNum);
											}
										}
										
									}
								}else{//判断TotalNum不存在<=0,重新校准数据
									dataRoleObj[0].delItem(quickButton);
								}
							}else{//quickButton未设置，打开设置
								$scope.quickButtonChange(num);
							}
					};
					
					var useSkill = function (quickButton,num){
						if (quickButton&&quickButton!=undefined&&quickButton!=null){//判断quickButton是否设置
								//执行使用效果
								var tempAttr = quickButton.getAttr();
								//行动结算
								//如果消耗ep,计算ep是否足够
								if("epRecovery" in tempAttr
									&& typeof Number(tempAttr.epRecovery)=="number" 
									&& typeof !isNaN(Number(tempAttr.epRecovery))
									&& Number(tempAttr.epRecovery)!=0
									&& (Number(dataRoleObj[0].getEp())+Number(tempAttr.epRecovery))<0){
										//判断为ep不足
										viewDataModel.battle.battleInfo.push({str:"ep不足,无法使用技能"});
										return;
									}else{
										dataRoleObj[0].setEp(Number(dataRoleObj[0].getEp())+Number(tempAttr.epRecovery));
									}
								roundStartBuffSettlement();
								battleSettlement2(quickButton);
								buffSettlement();
							}else{//quickButton未设置，打开设置
								$scope.quickButtonChange(num);
							}
					};
					switch(num){
						case 1://使用技能
							useSkill(quickButton1,1);
							break;
						case 2://使用技能
							useSkill(quickButton2,2);
							break;
						case 3://使用技能
							useSkill(quickButton3,3);
							break;
						case 4://使用消耗品
							useItem(quickButton4,4);
							break;
						case 5://使用消耗品
							useItem(quickButton5,5);
							break;
						case 6://使用消耗品
							useItem(quickButton6,6);
							break;
						default:
					   		break;
					}
				};
				
			});
		</script>
		<script src="js/animation/steeringWheel.js"></script>

	</body>
</html>

