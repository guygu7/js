<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Bootstrap 101 Template</title>
		<link href="test.css" rel="stylesheet">
		<link href="css/internalSceneBasic.css" rel="stylesheet">
		<link href="css/buttonCircularMenu.css" rel="stylesheet">
	</head>
	<body>
		<div id="mainDesktop" class="main-desktop"></div>
		<script src="jquery-3.2.1/jquery-3.2.1.min.js"></script>
		<script src="js/core.js"></script>
		<script src="js/BasicComponent.js"></script>
		<script src="js/Components.js"></script>
		<script src="js/Menu.js"></script>
		<script src="js/Scene.js"></script>
		<script src="js/internalScene.js"></script>
		<script src="js/panel.js"></script>
		<script src="js/button.js"></script>
		<script src="js/table.js"></script>
		<script src="js/corner.js"></script>
		<script src="js/progressbar.js"></script>
		<script src="js/infoDIV.js"></script>
		<script src="js/dataModel.js"></script>
		<!--内部场景加载-->
		<script src="js/Sceneloading/internalSceneBasic.js"></script>
		<script src="js/Sceneloading/internalSceneStronghold.js"></script>
		<script src="js/Sceneloading/internalSceneInteraction.js"></script>
		<script>
			
			//构建主界面
			var scene = LC.Components.SceneFactory.createScene();
			$("#mainDesktop").append(scene.dom);
			$("#mainDesktop").append(LC.infoObj.dom);
			//布局面板渲染
			var panel1 = LC.Components.PanelFactory.createPanelBasic(null,"170px","587px");
			var panel2 = LC.Components.PanelFactory.createPanelEmpty(null,"918px","436px");
			var panel3 = LC.Components.PanelFactory.createPanelBasic(null,"904px","148px");
			//var panel4 = LC.Components.PanelFactory.createPanelBasic();
			/*
			//初始大地图界面
			var internalSceneBasic = LC.Components.InternalSceneFactory.createInternalSceneBasic(null,"904px","404px");
			//内部据点界面
			var LC.DefaultInternalScene.internalSceneStronghold = LC.Components.InternalSceneFactory.createInternalSceneBasic(null,"904px","404px");
			LC.DefaultInternalScene.internalSceneStronghold.hide();//初始隐藏
			//交互对象交互界面
			var internalSceneInteraction = LC.Components.InternalSceneFactory.createInternalSceneBasic(null,"904px","404px");
			internalSceneInteraction.hide();//初始隐藏
			*/
			panel2.dom.append(LC.DefaultInternalScene.internalSceneBasic.dom).append(LC.DefaultInternalScene.internalSceneStronghold.dom).append(LC.DefaultInternalScene.internalSceneInteraction.dom);
			scene.dom.append(panel1.dom).append(panel2.dom).append(panel3.dom);
			/*==========活动栏位===========*/
			var itemBag = LC.Components.PanelFactory.createPanelTransparent(null, "445px", "300px");
			var closeBut = LC.Components.ButtonFactory.createButtonClose(null, itemBag);
			var titel = LC.Components.PanelFactory.createPanelTitle().setText("物品栏");
			itemBag.dom.append(closeBut.dom).append(titel.dom);
			itemBag.addPosition("upperright").addPositionMode("absolute");
			itemBag.hide();
			LC.Components.ComponentFunction.drag(titel, itemBag, scene);
			scene.dom.append(itemBag.dom);
			//添加内容
			var table = LC.Components.TableFactory.createTable(1, 40);
			/*
			 var cell = LC.Components.PanelFactory.createPanelBasic("??");
			 cell.dom.css({"width":"90%","height":"90%"});
			 table.setCell(1,1,cell);
			 var corner = LC.Components.CornerSignFactory.createCornerSign();
			 cell.dom.append(corner.dom);

			 cell.dom.testp = "测试属性1";

			 corner.dom.append("99");
			 cell.item = item1;
			 */
			itemBag.dom.append(table.dom);
			/*==========活动栏位2===========*/
			/*
			 var itemBag2 = LC.Components.PanelFactory.createPanelTransparent(null,"445px","300px");
			 var closeBut2 = LC.Components.ButtonFactory.createButtonClose(null,itemBag2);
			 var titel2 = LC.Components.PanelFactory.createPanelTitle().setText("物品栏2");
			 itemBag2.dom.append(closeBut2.dom).append(titel2.dom);
			 itemBag2.addPosition("upperright").addPositionMode("absolute");
			 itemBag2.hide();
			 LC.Components.ComponentFunction.drag(titel2,itemBag2,scene);
			 scene.dom.append(itemBag2.dom);
			 //添加内容
			 var table2 = LC.Components.TableFactory.createTable(4,10);
			 var cell2 = LC.Components.PanelFactory.createPanelBasic("wupin");
			 cell2.dom.css({"width":"90%","height":"90%"});
			 table.setCell(3,1,cell2);
			 var corner2 = LC.Components.CornerSignFactory.createCornerSign();
			 cell2.dom.append(corner2.dom);

			 corner2.dom.append("99");
			 itemBag2.dom.append(table2.dom);
			 //====拖拽测试====
			 LC.Components.ComponentFunction.drag(cell,cell,scene,cell2,true);
			 */
			/*==========菜单============*/
			var menu = LC.Components.DropdownFactory.createDropdownUp();
			menu.addElement(0, "菜单");
			menu.addPosition("lowerright");
			menu.addElement(1, "物品");
			menu.addElement(2, "物品2");
			menu.getElement(1).dom.bind("click", function() {
				console.log("1");
				itemBag.show();
			});
			menu.getElement(2).dom.bind("click", function() {
				itemBag2.show();
			});
			LC.DefaultInternalScene.internalSceneBasic.dom.append(menu.dom);
			//========

			/*====进度条====*/
			/*
			var progress = LC.Components.ProgressBarFactory.createProgressBar1();
			progress.addPosition("lowerleft").setSize("500px", "10px");
			LC.DefaultInternalScene.internalSceneBasic.dom.append(progress.dom);
			//===模拟===
			var but = $("<div>but1</div>").css({
				"width" : "30px",
				"height" : "20px",
				"background-color" : "#474B64"
			}).bind("click", function() {
				progress.setRunWidth(10, 1);
				progress.setRunWidth(10, 2);
				progress.start();
			});
			LC.DefaultInternalScene.internalSceneBasic.dom.append(but);
			*/
			//========
			//sceneNext.hide();
			scene.show();

			//var info = LC.Components.InfoDIVFactory.createInfoDIV();
			//itemBag.addInfo();
			LC.Components.ComponentFunction.addInfo(itemBag);

			//构建数据层
			//基本数据
			var mapX=256;
			var mapY=256;
			//构建地图
			map = LC.Data.MapFactory.createMap(mapX,mapY);
			//初始地点,随机设置一个初始地点,限制在大地图中间生成
			var initX = Math.floor(Math.random()*(Math.floor(mapX*2/3)));
			if (initX<(Math.floor(mapX*1/3))){
				initX=(Math.floor(mapX*1/3));
			}
			var initY = Math.floor(Math.random()*(Math.floor(mapY*2/3)));
			if (initY<(Math.floor(mapY*1/3))){
				initY=(Math.floor(mapY*1/3));
			}
			map.get(initX+","+initY).setName("出生地").setType(LC.Data.CommonProperty.PLAT.PLAT_TYPE.HOME);
			//在初始地点构建内部据点
			map.get(initX+","+initY).setLink("stronghold");
			/**
			 * 定义当前所在地图变量
			 */
			LC.GlobalVar.CURRENT_LOCATION = map.get(initX + "," + initY);
			//++++++++建立测试数据++++++++
			//建立动作数据
			var action1 = LC.Data.ActionFactory.createAction();
			action1.setName("界面切换");
			action1.setType("界面切换");
			action1.setActFn(function (prama){//设置具体动作，切换界面、变换当前界面等
					//prama.data获取到交互角色数据
					console.log(prama.data.getName());
				});
			var action2 = LC.Data.ActionFactory.createAction();
			action2.setName("角色交互");
			action2.setType("角色交互");
			action2.setActFn(function (){//设置具体动作，切换界面、变换当前界面等
					alert("T1");
				});
				
			var action3 = LC.Data.ActionFactory.createAction();
			action3.setName("界面切换");
			action3.setType("界面切换");
			action3.setActFn(function (){//设置具体动作，切换界面、变换当前界面等
					alert("T3");
				});
			
			//据点中添加交互对象,模拟随机生成的数据
			var obj1 = new LC.Data.RoleFactory.createRole();
			obj1.setName("实体角色1").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			obj1.addAction("1-1",action1);
			obj1.addAction("1-2",action2);
			var obj2 = new LC.Data.RoleFactory.createRole();
			obj2.setName("实体角色2").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			obj2.addAction("1-2",action3);
			var obj3 = new LC.Data.RoleFactory.createRole();
			obj3.setName("实体角色3").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			var obj4 = new LC.Data.RoleFactory.createRole();
			obj4.setName("静态建筑1").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			var obj5 = new LC.Data.RoleFactory.createRole();
			obj5.setName("静态建筑2").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			var obj6 = new LC.Data.RoleFactory.createRole();
			obj6.setName("静态建筑3").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			map.get(initX+","+initY).addRole("交互对象1",obj1);
			map.get(initX+","+initY).addRole("交互对象2",obj2);
			//map.get(initX+","+initY).addRole("交互对象3",obj3);
			map.get(initX+","+initY).addRole("静态建筑1",obj4);
			map.get(initX+","+initY).addRole("静态建筑2",obj5);
			map.get(initX+","+initY).addRole("静态建筑3",obj6);
			//在地图上构建其他据点
			//新增数个交互对象
			var obj7 = new LC.Data.RoleFactory.createRole();
			obj7.setName("新增实体角色1").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			var obj8 = new LC.Data.RoleFactory.createRole();
			obj8.setName("新增实体角色2").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			var obj9 = new LC.Data.RoleFactory.createRole();
			obj9.setName("新增实体角色3").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.NPC);
			var obj10 = new LC.Data.RoleFactory.createRole();
			obj10.setName("新增静态建筑1").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			var obj11 = new LC.Data.RoleFactory.createRole();
			obj11.setName("新增静态建筑2").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			var obj12 = new LC.Data.RoleFactory.createRole();
			obj12.setName("新增静态建筑3").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.BUILDING);
			//北方地图添加若干交互对象
			map.get(initX+","+(initY-1)).addRole("新增实体角色1",obj7);
			map.get(initX+","+(initY-1)).addRole("新增实体角色2",obj8);
			map.get(initX+","+(initY-1)).addRole("新增实体角色3",obj9);
			map.get(initX+","+(initY-1)).addRole("新增静态建筑1",obj10);
			//东方地图添加若干交互对象
			map.get((initX+1)+","+initY).addRole("交互对象1",obj1);
			map.get((initX+1)+","+initY).addRole("新增实体角色1",obj7);
			map.get((initX+1)+","+initY).addRole("新增静态建筑2",obj11);
			//南方地图添加若干交互对象
			map.get(initX+","+(initY+1)).addRole("交互对象2",obj2);
			//西方地图添加若干交互对象
			map.get((initX-1)+","+initY).addRole("新增静态建筑3",obj12);
			//给交互对象添加交互属性
			var action1 = LC.Data.ActionFactory.createAction();
			action1.setName(LC.Data.CommonProperty.ACTION.ACTION_NAME.TALLK).setType(LC.Data.CommonProperty.ACTION.ACTION_TYPE.TYPE1);
			var action2 = LC.Data.ActionFactory.createAction();
			action1.setName(LC.Data.CommonProperty.ACTION.ACTION_NAME.ACTION).setType(LC.Data.CommonProperty.ACTION.ACTION_TYPE.TYPE1);
			obj7.addAction("tallk",action1);
			obj7.addAction("action",action2);
			//++++++++++++++++++++++++++
			
			
			//地图上分布物体======未完成===========
			
			//******创建角色实例，角色面板视图实例，并绑定*****
			//创建角色
			var gameplayer = new LC.Data.RoleFactory.createRole();
			//在左侧面板中增加角色信息板
			var rolePanel = LC.Components.PanelFactory.createPanelBasic(null,"160px","80px",LC.CommonProperty.CSS_PANEL_PROTRUDING);
			panel1.dom.append(rolePanel.dom);
			//角色信息板中添加各种数据显示
			rolePanel.dom.append($("<div id='name'></div>"));
			rolePanel.dom.append($("<div id='health'></div>"));
			//将角色信息板 视图实例 监听 数据实例 
			gameplayer.addListener(rolePanel);
			//设定视图响应
			rolePanel.addResponseMethod("setName",function(pram){
				rolePanel.dom.children("#name").text(pram);
			});
			rolePanel.addResponseMethod("setHealth",function(pram){
				rolePanel.dom.children("#health").text(pram);
			});
			//初始化玩家角色数据
			gameplayer.init().setName("人物名称").setType(LC.Data.CommonProperty.ROLE.ROLE_TYPE.PLAYER);
			//*****************************
			
			//***********战斗界面，视图构建*************
			//************************************
			
			//动态数据、实时存档
			LC.Data.DynamicData={};
			LC.Data.DynamicData.Map=map;//保存地图
			LC.Data.DynamicData.Home=initX+","+initY;//保存初始地点位置
			LC.Data.DynamicData.PlayerRole=gameplayer;//保存玩家角色信息
			
			console.log(map.get(LC.Data.DynamicData.Home));
			
			//启动时初始化隐藏所有界面
			LC.DefaultInternalScene.hide();
			//启动时初次载入地图数据
			LC.DefaultInternalScene.internalSceneBasic.loadData(LC.GlobalVar.CURRENT_LOCATION);
			LC.DefaultInternalScene.internalSceneBasic.show();


		</script>
	</body>
</html>
